<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_itembubble</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_solid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SMB2 / SMA4 Item Bubble

/*
**  This item uses creation code!
**
**  sprout = Pick from below:
**      cs_big
**      cs_fire
**      cs_ice
**      cs_carrot
**      cs_leaf
**      cs_frog
**      cs_tanooki
**      cs_hammer
**      cs_boomerang
**      cs_super
**      cs_bomb
**      cs_shell
**      cs_bee
**      cs_lightning
**      cs_penguin
**      cs_propeller
**      cs_cat
**      cs_yoshi
**      cs_yoshi_r
**      cs_yoshi_y
**      cs_yoshi_b
**      cs_kuriboshoe
**      cs_baburushoe
**      cs_dossunshoe
**      cs_jugemushoe
**      cs_1up
**      cs_3up
**      cs_poison
**      cs_star
**      cs_key
**      cs_pswitch
**      cs_gswitch
**      cs_trampoline
**      cs_propellerblock
**      cs_beanstalk
*/

//Default value
sprout = cs_coin;

//Size
size = 1;
newsize = 1;

//Whether this block can be hit
ready = 0;

//Slope collision
myslope = instance_create(x,bbox_top,obj_slopeparent);
with (myslope)
    sprite_index = spr_itembubblemask;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy slope

with (myslope) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make it able to be hit again

ready = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Item bubble logic

//Make sure it gets the new size
if (ready) {

    //If the size is greater than the objective size, shrink it.
    if (size &gt; newsize) {
    
        //Reduce size
        size -= 0.05;
        
        //Move down
        y++;
        
        //Move slope down
        if (instance_exists(myslope))
            with (myslope) y++;   
    }
        
    //Otherwise, make it able to be hit
    else
        alarm[0] = 1;
}

//Set the same size
image_xscale = size;
image_yscale = size;

//Make sure the slope gets the same size
with (myslope) {

    image_xscale = other.size;
    image_yscale = other.size;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_parcarry">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision with a thrown vegetable

//If the vegetable is not being held and it's moving down
if ((other.held == 0) &amp;&amp; (other.vspeed &gt;= 0)) {

    //Switch size
    if (ready == 0) {
    
        //Play 'Bumped' sound
        audio_play_sound(snd_bubble, 0, false);
    
        if (size == 1) {
        
            newsize = 0.75;
            ready = 1;
        }
        else if (size == 0.75) {
        
            newsize = 0.5;
            ready = 1;
        }
        else {
        
            //Play 'Pop' sound
            audio_play_sound(snd_pop, 0, false);
            
            //Create a coin if no item was selected
            if (sprout == cs_coin) {
            
                repeat(5) {
                
                    with (instance_create(x,y-12,obj_blockcoin2)) {
                    
                        hspeed = random_range(1,-1);
                        vspeed = random_range(-2,-6);
                    }
                }
            }
                
            //Otherwise, create a item.
            else if (sprout != cs_coin) {
            
                with (sprite_make_object(x-8+(sprite_get_xoffset(constant_get_sprite(sprout))),y-12,constant_get_sprite(sprout))) {
                
                    vspeed = -4;
                    permission = 1;
                }
            }
            
            //Create 'Pop' effect
            with (instance_create(x-16,y-16,obj_smoke)) sprite_index = spr_pop;
            
            //Destroy
            instance_destroy();
        }
    }
    
    //With veggie
    other.vspeed = -1.5;
    
    //Create a spinthump
    with (instance_create(other.x+8,other.y,obj_smoke)) 
        sprite_index = spr_spinthump;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the item and the bubble

//Draw the item
if (sprout = cs_coin) {

    draw_sprite_ext(spr_coin,0,x-8,y-8,1,1,0,c_white,1)
}
else {

    draw_sprite_ext(constant_get_sprite(sprout),0,x,y-8,1,1,0,c_white,1)
}

draw_sprite_ext(sprite_index,-1,round(x),round(y),image_xscale,image_xscale,0,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
