<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_beachkoopa_walk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_deactenemyparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Yellow beach koopa

//Default variables
ready = 1;

//How vulnerable is this enemy to various items?
vulnerable = 0;

//How vulnerable is this enemy to the player?
stomp = 0;

//How vulnerable is this enemy to yoshi?
edible = 0;

//Facing direction
xscale = 1;

//Whether the object is swimming
swimming = false;

//Whether the koopa is jumping inside a shell
jumping = 0;

//Animate
image_speed = 0.125;

//Start moving
alarm[10] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Follow the player

//If there's no gravity
if (gravity == 0) {

    //Start moving
    if (!instance_exists(obj_playerparent))
    || (obj_playerparent.x &lt; x)
        hspeed = -1;
    else
        hspeed = 1;
}

//Change direction
alarm[11] = 60+round(random_range(60,120));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move towards the player

if (hspeed == 0) {

    //Set the sprite
    sprite_index = spr_beachkoopa_walk;

    //Follow the player
    alarm[11] = 60;

    //Start moving
    if (!instance_exists(obj_playerparent))
    || (obj_playerparent.x &lt; x)
        hspeed = -1;
    else
        hspeed = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Yellow beach koopa logic

//Inherit event
event_inherited();

//Sliding logic
if (ready == 0) {
    
    //Slow down
    hspeed = max(0,abs(hspeed)-0.05)*sign(hspeed);
    
    //If the koopa is about to stop
    if (hspeed &lt; 0.05) 
    &amp;&amp; (hspeed &gt; -0.05) {
        
        //Stop it
        hspeed = 0;
        
        //Allow movement
        ready = 1;
        
        //Start moving
        alarm[10] = 90;
    }
}

//Otherwise, check for shells
else if (ready &gt; 0) {

    //If the koopa just came out from the shell, do not allow it to enter.
    if (sprite_index == spr_beachkoopa_walk)
    &amp;&amp; (ready == 1)
    &amp;&amp; (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom-4,obj_shell,0,0))
        ready = 2;
        
    //Otherwise if the koopa is no longer overlapping a shell, make him enter one.
    else if (ready == 2) {
    
        //Keep following the player
        if ((gravity == 0) &amp;&amp; (ready &gt; 1)) {
        
            //If the player does exist
            if (instance_exists(obj_playerparent)) {
            
                //If the koopa is moving to the left and the player is 48 pixels to the right
                if ((hspeed &lt; 0) &amp;&amp; (obj_playerparent.x &gt; x+48))
                    hspeed = 1;
                    
                //Otherwise, if the koopa is moving to the right and the player is 48 pixels to the left
                else if ((hspeed &gt; 0) &amp;&amp; (obj_playerparent.x &lt; x-48))
                    hspeed = -1;
            }
            
            //Check for a moving shell
            var mshell = collision_rectangle(x+(16*sign(xscale)),bbox_top,x+(24*sign(xscale)),bbox_bottom-4,obj_shell_kick,0,0);
            
            //If there's a shell in position and said shell does not have a koopa inside.
            if (mshell) 
            &amp;&amp; (mshell.hspeed != hspeed) {
            
                //Set the vertical speed
                if (swimming == 0)
                    vspeed = -4;
                else
                    vspeed = -2;
                    
                //Boost jump
                y--;
            }
        }
    
        //Check for a shell
        var shell = collision_rectangle(x+(5*sign(xscale)),bbox_top,x+(10*sign(xscale)),bbox_bottom+16,obj_shell,0,0);
        
        //If there's a shell in position and said shell does not have a koopa inside.
        if (shell) 
        &amp;&amp; (shell.held == 0) {
        
            //Reduce speed so the koopa can enter the shell.
            if (abs(hspeed) &gt; 0.5) {
            
                hspeed = 0.5*sign(xscale);
            }
        
            //If there's not a koopa inside the shell
            if (shell.koopainside == 0) 
            &amp;&amp; (jumping == 0) {
            
                //Set the vertical speed
                vspeed = -2.5;
                
                //Boost jump
                y--;
            
                //Make the beach koopa jump
                jumping = 1;
            }
            
            //Otherwise, turn around
            else if (shell.koopainside != 0)
                hspeed = -hspeed;
        } 
        else {
        
            //Increment speed
            if (abs(hspeed) &lt; 1)
                hspeed = 1*sign(xscale);
        }
        
        //Reset jump
        if (jumping == 1)
        &amp;&amp; (gravity == 0)
        &amp;&amp; (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_shell,0,0))
            jumping = 0;
                   
    }
}

//Set facing direction
if (hspeed &gt; 0)
    xscale = 1;
else
    xscale = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_shell">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Climb inside the shell

//If the koopa is jumping inside, turn into a kamikaze koopa (no matter what colour is used.
if (jumping == 1)
&amp;&amp; (gravity == 0) 
&amp;&amp; (ready == 2) {
    
    //With the shell
    with (other) {
    
        instance_create(x,y,obj_koopa_kamikaze);
        instance_destroy();
    }
    
    //Destroy this object
    instance_destroy();
}
else
    event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default wall collision

if ((hspeed &lt; 0) &amp;&amp; (collision_rectangle(bbox_left-1,bbox_top+4,bbox_left,bbox_bottom-4,obj_solid,1,0)))
|| ((hspeed &gt; 0) &amp;&amp; (collision_rectangle(bbox_right,bbox_top+4,bbox_right+1,bbox_bottom-4,obj_solid,1,0))) {

    //Stop if being launched
    if (ready == 0)
        hspeed = 0;
    else
        hspeed = -hspeed;
    
    //Prevent getting embed on walls
    while (collision_rectangle(bbox_left,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,0,0))
        x++;
    while (collision_rectangle(bbox_left,bbox_top+4,bbox_right,bbox_bottom-1,obj_solid,0,0))
        x--;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Special turn at enemies script

if (ready == 2)
exit;
    event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
