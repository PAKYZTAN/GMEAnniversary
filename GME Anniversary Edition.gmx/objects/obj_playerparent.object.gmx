<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mario_big_walk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Super Player Parent

//Enable / Disable gravity
enable_gravity = true;

//Movement variables
xspeed = 0;
yspeed = 0;
ygrav = 0;
catclimbing = 0;

//Handle the player current state.
//0:    Idle
//1:    Walk
//2:    Jump / Swim
//3:    Climb
state = 0;
delay = 0;

//Handle the player facing direction.
//1:    Right
//-1:   Left
xscale = 1;

//Handle the player direction when stuck on a solid.
//1:    Right
//-1:   Left
direct = 1;
direct2 = 0;

//Make the player able to hold various items.
//0:    Can hold
//1:    SMB2 style holding.
//2:    SMW/SMB3 style holding.
//3:    SMA4 Boomerang
holding = 0;

//Handle the player jump.
//0:    Can jump
//1:    Can stop in mid-air
//2:    Cannot stop in mid-air
jumping = 0;

//Allow the player to spin-jump.
stompstyle = false;

//Plays a sound when the player is climbing up a beanstalk.
noise = 0;

//Makes the player run faster
run = 0;

//Makes the player change it's direction.
skidnow = 0;
turning = 0;

//Makes the player swim when on contact with a water surface.
swimming = 0;

//Makes the player able to buttslide down slopes.
sliding = 0;

//Makes the player able to fly high.
flying = false;
flyfix = 0;

//Makes the player able to crouch down.
crouch = 0;

//Handles the player net smacking
netsmack = 0;

//Makes the player able or not able to move.
move = false;

//Angle of the player after wall run
angle = 0;

//Handle P-Meter
pmeter = 0;
pmeterready = false;

//Makes the player able to kick held items.
kicking = false;

//Is the player gravity disabled?
disablegrav = 0;

//Makes the player invulnerable to all hazards.
invulnerable = false;

//Disables the player controls completely.
disablecontrol = false;

//Makes the player do a somersault jump when invulnerable
somersault = false;

//Checks if the player is stuck on a solid surface.
inwall = false;

//Displays the player shooting pose when firing a projectile
firing = 0;

//Is Raccoon / Tanooki the player wiggling his tail?
wiggle = 0;

//Handles the player combos and gives extra lives.
hitcombo = 0;

//Change direction of the projectiles when spinning
dir = 1;

//Carrot / Bee powerup flight variables
beefly = 0;
floatnow = 0;
isfloating = 0;

//Frog / Penguin powerup swimming variables
swimtype = 0;

//Prevents the player from moving if stunned
stuntime = 0;

//Prevents the player from moving if frozen
freezetime = 0;

//Makes the player shake when stunned
shake = 0;

//Mutes the 'Bump' sound when either the player is climbing or swimming with the frog or penguin powerups
noisy = 0;

//Allows the player to end sliding manually when releasing the 'Down' key.
holddown = false;

//Boost player's fall
boost = 0;

//Player colour
isflashing = 0;

//If the player is warping from a pit.
pitwarp = false;

//Initialize important alarms
alarm[3] = 1; //This one is found on player skins
alarm[5] = 1;
alarm[8] = 1; 
alarm[10] = 1; //This one is found on player skins

//Create markers
instance_create(0,0,obj_marker_head);
instance_create(0,0,obj_marker_bottom);

//Create dash attack
if (instance_number(obj_dashkill) == 0)
    instance_create(0,0,obj_dashkill);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop sounds

//Stop 'Spin' sound
audio_stop_sound(snd_spin);

//Stop 'Skid' sound
audio_stop_sound(snd_skid);

//Stop 'Climb' sound
audio_stop_sound(snd_climb);

//Stop 'P-Meter' sound
audio_stop_sound(snd_pmeter);

//Destroy puller object
if (instance_exists(obj_puller))
    with (obj_puller) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Restart flying ability

//Allow Mario to fly again.
flying = false;

//Reset P-Meter
pmeter = 0;

//Make Mario walk
run = 0;

//Stop 'P-Meter' sound
if (audio_is_playing(snd_pmeter))
    audio_stop_sound(snd_pmeter);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create a bubble effect if the player is swimming

alarm[8] = 45+random_range(-15, 15);
if (swimming)
    instance_create(x,bbox_top,obj_bubble);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop kicking

kicking = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cycle between palettes

//Make the player flash if he's under the effects of the starman.
if (instance_exists(obj_invincibility)) {

    //Make the player flash.
    isflashing += 0.1;
    if (isflashing &gt; 6)
        isflashing = 1;
    
    //Repeat the process.
    if (obj_invincibility.alarm[0] &gt; 120)
        alarm[5] = 1;
    else
        alarm[5] = 4;
}
else {

    isflashing = 0;
    alarm[5] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset angle

angle = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End turning animation

turning = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the player blink when hit

//If the player is still invulnerable to all hazards
if (invulnerable) {

    //Repeat the process
    alarm[1] = 1;
    
    //Change alpha
    image_alpha = !image_alpha;
}

//Otherwise, set up default alpha value
else
    image_alpha = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Makes the player vulnerable to all hazards

invulnerable = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics

//Manage P-Wing effect
if (global.pwing == 1) {

    //If the player does not have either raccoon or tanooki powerup
    if (global.powerup != cs_leaf)
    &amp;&amp; (global.powerup != cs_tanooki) {
    
        //Disable P-Wing
        global.pwing = 0;
        
        //Allow the player to fly again.
        flying = false;
        
        //Reset P-Meter
        pmeter = 0;
    }
    
    //Keep pmeter active
    pmeter = 112;
    
    //Play 'P-Meter' sound if not playing
    if (!audio_is_playing(snd_pmeter)) 
        audio_play_sound(snd_pmeter, 0, true);
    
    //Keep alarm 9 active 
    alarm[9] = 60 * global.flighttime;
    
    //If the player is flying
    if (state != 2) &amp;&amp; (global.pwing == 1)
        flyfix = 0;
    else
        flyfix = 1;
}

//Otherwise
else {

    if ((state != 2) &amp;&amp; (flying == 0))
        flyfix = 0;
    else
        flyfix = 1;
}

//If the gravity is enabled
if (enable_gravity == 1) {

    //Reset gravity, hspeed and vspeed as they are unused on the player.
    gravity = 0;
    hspeed = 0;
    vspeed = 0;
    
    //Move the player based on the values of xspeed, yspeed and ygrav
    x += xspeed;
    y += yspeed;
    yspeed += ygrav;
    
    //Change the angle when doing a somersault
    if (state == 2) 
    &amp;&amp; (crouch == 0)
    &amp;&amp; (holding == 0)
    &amp;&amp; (wallkick == 0)
    &amp;&amp; (swimming == 0)
    &amp;&amp; (stompstyle == 0) {
    
        //If the player is doing a somersault
        if (somersault)    
            angle -= 30*sign(xscale);
    }
    else {
    
        somersault = 0;
        if (angle != 0)
            angle = 0;
    }
    
    //Decrement net smack
    if (netsmack &gt; 0)
        netsmack--;
        
    //Decrement stun time
    if (stuntime &gt; 0) {
    
        //If the stuntime is about to end
        if (stuntime == 1) {
        
            //Stop stun
            stuntime = 0;
            shake = 0;
            
            //Enable controls
            disablecontrol = false;
        }
        
        //Decrement stuntime
        stuntime--;
        
        //Shake if possible
        shake = -shake;
    }
    
    //Decrement freeze time
    if (freezetime &gt; 1) {
    
        //Decrement freezetime
        freezetime--;
        
        //Do not move
        xspeed = 0;
        yspeed = 0;
        ygrav = 0;
    
        //Unfreeze when 'freezetime' hits 1
        if (freezetime == 1) {
        
            //Play 'Shatter' sound
            audio_play_sound(snd_shatter, 0, false);
            
            //Create sparklies
            repeat (32) {
    
                with (instance_create(bbox_left+sprite_width/2-4,bbox_top+sprite_height/2-4,obj_smoke)) {
                
                    //Sprite
                    sprite_index = spr_icespark;
                    
                    //Animate
                    image_speed = 0.1;
                    
                    //Motion
                    motion_set(random(360), random(1));
                }
            }
        
            //Stop freeze
            freezetime = 0;
            
            //Enable controls
            disablecontrol = false;
            
            //Make invulnerable for less time
            invulnerable = 1;
            alarm[0] = 90;
            alarm[1] = 1;
        }
    }
    
    //Make sure the player is doing a spinjump
    if (global.powerup != cs_propeller)
    &amp;&amp; (stompstyle == 2)
        stompstyle = 1;
        
    //Make sure the player does not spinjump when holding something
    if ((holding &gt; 0) &amp;&amp; (holding &lt; 4))
    &amp;&amp; (stompstyle &gt; 0)
        stompstyle = 0;
    
    //Mute 'Bump' sound when climbing or when the player is swimming with the frog or penguin powerup
    if (state == 3)
    || ((state == 2) &amp;&amp; (swimming) &amp;&amp; ((global.powerup == cs_frog) || (global.powerup == cs_penguin)))
        noisy = 1;
    else
        noisy = 0;
    
    //Floor collision
    if (yspeed &gt; 0) { //If the player is moving down and the gravity is not disabled.
    
        //Check for a semisolid object
        var semisolid = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+yspeed,obj_semisolid,0,0);
        
        //If the semisolid exists and the player is above it.
        if (semisolid)
        &amp;&amp; (bbox_bottom &lt; semisolid.yprevious+5) {
        
            //Snap above the semisolid platform
            y = semisolid.y-16;
            
            //Stop vertical movement
            yspeed = 0;
            ygrav = 0;
            
            //Reset values
            event_user(15);
        }
        
        //Check for a enemy that is solid on top
        var enemy = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+yspeed,obj_enemytop,0,0);
        
        //If the enemy exists and the player is above it
        if (enemy)
        &amp;&amp; (bbox_bottom &lt; enemy.yprevious+5) {
        
            //Snap above the semisolid platform
            y = enemy.y-16;
            
            //Stop vertical movement
            yspeed = 0;
            ygrav = 0;
            
            //Reset values
            event_user(15);
        }
    }
        
    //Embed the player into the slope if he is walking or sliding down a slope to ensure correct slope physics.
    if ((collision_rectangle(x-1,bbox_bottom+1,x+1,bbox_bottom+4,obj_slopeparent,1,0)) 
    &amp;&amp; (!collision_rectangle(x-1,bbox_bottom-4,x+1,bbox_bottom-4,obj_slopeparent,1,0)))
    &amp;&amp; (state == 1)
        y += 4;
    
    //Handle slope collision
    if (collision_rectangle(x-1,bbox_bottom-4,x+1,bbox_bottom,obj_slopeparent,1,0)) 
    &amp;&amp; (!collision_rectangle(x-1,bbox_bottom-8,x+1,bbox_bottom-8,obj_slopeparent,1,0)) {
    
        //If the player is moving down onto a slope.
        if (yspeed &gt; 0) {
        
            //Stop vertical movement
            yspeed = 0;
            ygrav = 0;
            
            //Reset values
            event_user(15);
        }
        
        //Prevent the player from getting embed inside a slope.
        if (yspeed &gt; -0.85)        
            while (collision_rectangle(x-1,bbox_bottom-4,x+1,bbox_bottom,obj_slopeparent,1,0))        
                y--;
    }
    
    //Left conveyor belt collision
    lconv = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_conveyor_l,0,0);
    if ((lconv) &amp;&amp; (lconv.image_speed != 0)) {
    
        if (!collision_rectangle(bbox_left-1,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,1,0))
            x -= 0.75;
    }
    
    //Right conveyor belt collision
    rconv = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_conveyor_r,0,0);
    if ((rconv) &amp;&amp; (rconv.image_speed != 0)) {
    
        if (!collision_rectangle(bbox_right,bbox_top+4,bbox_right+1,bbox_bottom-1,obj_solid,1,0))
            x += 0.75;
    }
    
    //If the player is not swimming
    if (!swimming) {
    
        //If the player is not sliding
        if (!sliding) {
    
            //If the player is not climbing
            if (state != 3) {
        
                //Execute main behaviour script
                scr_player_behaviour();
                
                //Execute the wall collision checking script
                scr_player_behaviour_wall()
                
                //If the player is running on walls or ceilings
                if (instance_exists(obj_wallrunner)) 
                &amp;&amp; (global.mount != 2) {
                
                    //If the P-Meter is full.
                    if (pmeter &gt; 112) {
                    
                        //Play 'P-Meter' sound
                        if (!audio_is_playing(snd_pmeter)) {
                        
                            audio_play_sound(snd_pmeter, 0, true);
                        }
                        
                        //Keep P-Meter full.
                        pmeter = 112;
                    
                        //Make the player able to run.
                        run = true;
                    }
                    
                    //Otherwise, fill P-Meter
                    else
                        pmeter += 2;
                }
                
                //Otherwise...
                else {
                
                    //If the player's horizontal speed is equal/greater than 2.4 and it's not wearing a kuribo shoe.
                    if (abs(xspeed) &gt; runspeed-0.1) 
                    &amp;&amp; (global.mount != 2) 
                    || (global.pwing == 1) {
                    
                        //If the player is not jumping.
                        if (state &lt; 2) {
                        
                            //If the P-Wing is active
                            if (global.pwing == 1) {
                            
                                //Play 'P-Meter' sound
                                if (!audio_is_playing(snd_pmeter)) {
                                
                                    audio_play_sound(snd_pmeter, 0, true);
                                    if (pmeter &lt; 112)
                                        pmeter = 112;
                                }                                
                            }
                            
                            //Otherwise
                            else {
                        
                                //If the P-Meter is full.
                                if (pmeter &gt; 112) {
                                
                                    //Play 'P-Meter' sound
                                    if (!audio_is_playing(snd_pmeter)) {
                                    
                                        audio_play_sound(snd_pmeter, 0, true);
                                    }
                                    
                                    //Keep P-Meter full.
                                    pmeter = 112;
                                
                                    //Make the player able to run.
                                    run = true;
                                }
                                
                                //Otherwise, fill P-Meter
                                else
                                    pmeter += 2;
                            }
                        }
                        
                        //If the player is on the ground and not running.
                        else if ((!run) &amp;&amp; (pmeter &gt; 0))
                            pmeter--;
                    }
                    
                    //Otherwise, if the player's horizontal speed is lower than 2.4
                    else if ((!run) || ((state &lt; 2) &amp;&amp; (abs(xspeed) &lt; runspeed)) &amp;&amp; (global.pwing == 0)) { 
                    
                        //If the player is flying and lands on the floor.
                        if (flying) {
                        
                            //Stop 'P-Meter' sound
                            audio_stop_sound(snd_pmeter);
                            
                            //Allow the player to fly again.
                            flying = false;
                            
                            //Make the player walk
                            run = false;
                            
                            //Empty P-Meter.
                            if (pmeter &gt; 0)        
                                pmeter --;
                        }
                        
                        //If the player is not flying.
                        else if (!flying) {
                        
                            //Stop 'P-Meter' sound
                            audio_stop_sound(snd_pmeter);
                                                
                            //Make the player walk
                            run = false;
                            
                            //Restart flying.
                            alarm[9] = 0;
                            
                            //Empty P-Meter.
                            if (pmeter &gt; 0)       
                                pmeter --;
                        }   
                    }
                }
            }
            
            //Otherwise, if the player is climbing.
            else if (state == 3) {
            
                //Execute climb behaviour script
                scr_player_behaviour_climb();
                
                //Smack net if possible
                if (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_climb_net,0,0))
                &amp;&amp; (keyboard_check_pressed(global.controlkey))
                &amp;&amp; (netsmack == 0) {
                
                    //Play 'Bump' sound
                    audio_play_sound(snd_bump, 0, false);
                
                    //Increment netsmack
                    netsmack = 4;
                    
                    //Change facing direction
                    xscale = -xscale;
                }
                
                //Stop P-Meter if not permanent
                if (global.pwing == 0) {
                
                    //Stop 'P-Meter' sound
                    audio_stop_sound(snd_pmeter);
                                                                    
                    //Decrement P-Meter
                    flying = false;
                    run = false;
                    if (pmeter &gt; 0)
                        pmeter--;
                }
            }
        }
        
        //Otherwise, if the player is sliding down a slope
        else if (sliding) {
        
            //Execute slide behaviour script
            scr_player_behaviour_slide();
            
            //Stop P-Meter if not permanent
            if (global.pwing == 0) {
            
                //Stop 'P-Meter' sound
                audio_stop_sound(snd_pmeter);
                                                                
                //Decrement P-Meter
                flying = false;
                run = false;
                if (pmeter &gt; 0)
                    pmeter--;
            }
        }
    }
    
    //Otherwise, if the player is actually swimming.
    else if (swimming) {
        
        //Execute swim behaviour script
        scr_player_behaviour_swim();
            
        //Stop P-Meter if not permanent
        if (global.pwing == 0) {
        
            //Stop 'P-Meter' sound
            audio_stop_sound(snd_pmeter);
                                                            
            //Decrement P-Meter
            flying = false;
            run = false;
            if (pmeter &gt; 0)
                pmeter--;
        }
    }
    
    //If the player is bumping into a wall to the right
    if (xspeed &gt; 0)
    &amp;&amp; (collision_rectangle(bbox_right,bbox_top+4,bbox_right+1,bbox_bottom-4,obj_solid,1,0)) {
    
        //If the player is sliding with the shell
        if (global.powerup == cs_shell)
        &amp;&amp; (global.mount == 0)
        &amp;&amp; (sliding) {
        
            //Play 'Bump' sound
            if (!audio_is_playing(snd_bump)) {
            
                audio_play_sound(snd_bump, 0, false);
            }
        
            //Reverse horizontal speed
            xspeed = -xspeed;
            
            //Create shell thump effect
            instance_create(x+5,y+8,obj_shellbump);
            
            //Create block bumper object
            instance_create(x-8,y,obj_blockbumper);
        }
            
        //Otherwise, stop it and stop slide if necessary.
        else {
        
            //Stop horizontal movement
            xspeed = 0;
            
            //Stop sliding
            sliding = false;       
        }
        
        //Prevent the player from getting embed into the wall
        while (collision_rectangle(bbox_right,bbox_top+4,bbox_right,bbox_bottom-1,obj_solid,1,0))
        &amp;&amp; (!collision_point(x,bbox_top+4,obj_solid,0,0))
            x--;
    }
    
    //Otherwise, if the player is bumping into a wall to the left
    else if (xspeed &lt; 0)
    &amp;&amp; (collision_rectangle(bbox_left-1,bbox_top+4,bbox_left,bbox_bottom-4,obj_solid,1,0)) {
    
        //If the player is sliding with the shell
        if (global.powerup == cs_shell)
        &amp;&amp; (global.mount == 0)
        &amp;&amp; (sliding) {
            
            //Play 'Bump' sound
            if (!audio_is_playing(snd_bump)) {
            
                audio_play_sound(snd_bump, 0, false);
            }
        
            //Reverse horizontal speed
            xspeed = -xspeed;
            
            //Create shell thump effect
            instance_create(x-5,y+8,obj_shellbump);
                    
            //Create block bumper object
            instance_create(x-8,y,obj_blockbumper);
        }
    
        //Otherwise, stop it and stop slide if necessary.    
        else {
        
            //Stop horizontal movement
            xspeed = 0;
            
            //Stop sliding
            sliding = false; 
        }        
        
        //Prevent the player from getting embed into the wall
        while (collision_rectangle(bbox_left,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,1,0))
        &amp;&amp; (!collision_point(x,bbox_top+4,obj_solid,0,0))
            x++;
    }
    
    //If the player is moving up
    if (yspeed &lt; 0)
    &amp;&amp; ((collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_solid,1,0)) 
    || (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_ceilslopeparent,1,0))) {
        
        //Prevent the player's head from getting stuck on a ceiling.
        if (state &gt; 1) {
    
            while ((collision_rectangle(bbox_left,bbox_top+1,bbox_right,bbox_top+1,obj_solid,1,0))
            || (collision_rectangle(bbox_left,bbox_top+1,bbox_right,bbox_top+1,obj_ceilslopeparent,1,0)))
                y++;
        }
        
        //Stop vertical speed
        yspeed = 0;
        
        //Check if there's a block on the way.
        var block = collision_rectangle(bbox_left,bbox_top-2,bbox_right,bbox_top,obj_blockparent,1,0);
        
        //If there's a block on the way.
        if (block) {
            
            //If the block has NOT been hit.
            if (block.ready == 0) {
        
                //Trigger block events
                with (block) {
                
                    //Block is hit
                    ready = 1;
                    
                    //Set vertical speed
                    vspeed = -2;
                    alarm[0] = 4;
                    
                    //Block specific events
                    event_user(0);
                }
            }
        }
        
        //If the player does not have either the frog and penguin suit, and it's not climbing.
        if (!noisy)
        &amp;&amp; (state &lt; 3) {
        
            //Max out the bee flying timer
            if (global.powerup == cs_bee) {
    
                beefly = 128;
            }
            
            //Stop variable jumping
            jumpnow = 2;        
            
            //Play 'Bump' sound
            if (!audio_is_playing(snd_bump))        
                audio_play_sound(snd_bump, 0, false);        
        }
    }
    
    //Prevent the player from overlapping ceiling slopes
    if (state &gt; 1) {
    
        while (collision_rectangle(bbox_left,bbox_top+1,bbox_right,bbox_top+1,obj_ceilslopeparent,1,0))
            y++;            
    }
    
    //If the player is not climbing
    if (state != 3) {
    
        //If the player's controls are not disabled and it's not jumping
        if (state != 2)
        &amp;&amp; (!sliding)
        &amp;&amp; (!disablecontrol) {
        
            //Make the player crouch down when the 'Down' key is held
            if (keyboard_check(global.downkey))
            &amp;&amp; (global.powerup != cs_frog)
            &amp;&amp; (!crouch)
            &amp;&amp; (!noisy)
                crouch = true;
                
            //Otherwise, if the 'Down' key is no longer pressed
            else if (!keyboard_check(global.downkey))
                crouch = false;
        }
        
        //Handles powerup specific projectiles, tail spinning, cat scratching and statue morphing.
        if (keyboard_check_pressed(global.controlkey)) 
        &amp;&amp; (!obj_levelcontrol.barrier)
        &amp;&amp; (!disablecontrol)
            alarm[11] = 1;
    }
    else {
    
        //Make the player get up
        crouch = false;
        
        //Stop special jump
        stompstyle = false;
    }
    
    //Check for a nearby swimming surface
    var water = collision_rectangle(bbox_left,y-1,bbox_right,y,obj_swim,1,0);
    
    //If the player is not swimming and makes contact with a water surface
    if ((!swimming) &amp;&amp; (water)) {
        
        //Make the player swim.
        swimming = true;
        swimtype = 0;
        
        //Make the player get up
        crouch = false;
        
        //Stop most horizontal movement
        xspeed = xspeed/2.5;
                
        //Stop vertical movement
        ygrav = 0;
        if (yspeed &gt; 0) {
        
            //Stop vertical movement
            yspeed = 0;
            
            //Create a splash effect if not in contact with a bubble
            if (water.object_index != obj_waterbubble) {
            
                with (instance_create(x-8,water.y-15,obj_smoke)) {
                
                    depth = -4;
                    sprite_index = spr_splash;
                }            
            }
        }
    }
    
    //Otherwise, if the player had enough swimming and wants to get out
    else if ((swimming) &amp;&amp; (!water)) {
    
        //If there's not water above and there's not a solid on the way out
        if (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_solid,1,0)) {
        
            //If the player is moving up
            if ((state == 2) &amp;&amp; (yspeed &lt; 0)) {
            
                //If 'Shift' is held
                if (keyboard_check(global.shiftkey)) {
                
                    //Play 'Jump' sound
                    audio_play_sound(snd_jump, 0, false);
                    
                    //Make the player not swim
                    swimming = false;
                    
                    //Allow variable jump
                    jumping = 1;
                    
                    //Set the vertical speed
                    yspeed = -3.4675;
                    
                    //Create splash effect
                    if (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_waterbubble,1,0)) {
                    
                        with (instance_create(x-8,y-15,obj_smoke)) {
                        
                            depth = -4;
                            sprite_index = spr_splash;
                        }
                    }
                }
                
                //Otherwise, if 'Shift' is not held.
                else {
                
                    //If the player is moving up.
                    if (yspeed &lt; 0)
                        yspeed = 0;
                }
            }
        }
    }
        
    //Free the player is he is stuck on a solid.
    if (yspeed == 0)
    &amp;&amp; (crouch == false) 
    &amp;&amp; (mask_index == spr_bigmask) {
        
        //If the player gets stuck
        if (collision_rectangle(bbox_left,bbox_top+4,bbox_right,bbox_top+4,obj_solid,1,0)) 
        &amp;&amp; (inwall == 0) {
        
            //If the direction was not set
            if (direct2 == 0) {
            
                //Set it up
                direct2 = xscale;
            }
            
            //Begin movement
            inwall = 1;
            
            //Set the movement direction
            direct = -direct2;
        }
        
        //Otherwise, if the player gets stuck on a wall.
        else if (inwall == 1) {
            
            //Move the player until it's not embed in a wall.
            x += 1*sign(direct);       
            
            //If the player is not longer embed on a wall, make him able to move.
            if (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_solid,1,0)) {
            
                inwall = 0;
                direct2 = 0;
            }
            
            //If the player collides with a wall while being stuck
            if ((direct == -1) &amp;&amp; (collision_line(bbox_left,y+4,bbox_left,bbox_bottom-4,obj_solid,1,0)))
            || ((direct == 1) &amp;&amp; (collision_line(bbox_right,y+4,bbox_right,bbox_bottom-4,obj_solid,1,0)))
                direct = -direct;
        }
    }
    
    //Unstuck in case of overlapping a solid completely
    if (state &lt; 2)
    &amp;&amp; (inwall == 0) {
    
        //If overlapping
        while (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_mblock,0,0))
        || (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_propellerblock,0,0))
            y--;
    }
        
    //Handle tail whip animation
    if ((state == 2) &amp;&amp; (wiggle &gt; 0))
        wiggle--;
    else
        wiggle = 0;
    
    //If the player is not in contact with water.
    if (!collision_rectangle(bbox_left,y,bbox_right,bbox_bottom,obj_swim,0,0)) {
    
        //If the player is swimming.
        if (swimming)  
            swimming = false;
    }
    
    //Prevent the player from going too high on the level
    if (y &lt; -96)
        y = -96;
        
    //Otherwise, if he is falling.
    else {
    
        //If the player is below the bottom room boundary and didn't activate a warp, restart the room.
        if (bbox_bottom &gt; room_height+32) {
                    
            if (pitwarp == false) {
            
                instance_create(x,y,obj_player_dead);
                instance_destroy();
                exit;  
            }
            
            else {
            
                //Force the player to fall.
                vspeed = 4;
            }       
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset all values when landing

//Enable gravity
disablegrav = 0;

//Reset bee flight
beefly = 0;

//Allow the player to jump again
jumping = 0;

//Reset spin jump variable
stompstyle = 0;

//Reset the wall kick
wallkick = 0;

//Reset the cat climb time
catclimbing = 0;

//Reset combo variable if not sliding
if (!sliding)
    hitcombo = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set the kick pose

kicking = 2;
alarm[6] = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set the throw pose

kicking = 1;
alarm[6] = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Toggle movement when crouched down

//If the player is crouched down
if (crouch) {

    //If the player is inside a shoe, allow move
    if (global.mount == 2)
        move = true;
        
    //Otherwise...
    else {

        if (state == 2) { //If the player is jumping.
        
            //Allow the player's horizontal movement.
            move = true;
        }
        else { //Otherwise, disallow the player's movement.
        
            //Disallow the player's horizontal movement.
            move = false;    
        }
    }
}

//Otherwise, allow movement
else 
    move = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the player bounce

//If the player has the propeller suit and the down key is pressed.
if (global.powerup == cs_propeller)
&amp;&amp; (keyboard_check(global.downkey))
&amp;&amp; (stompstyle != 0)
    exit;
    
//Otherwise, if the player is not climbing
else if (state == 3)
    exit;
    
//Otherwise, bounce
else {

    //Set the vertical speed
    yspeed = -4;
    
    //Boost jump
    y--;
    
    //Switch to jump state
    state = 2;
    
    //Check if the 'Jump' key is pressed.
    if (keyboard_check(global.shiftkey))
        jumping = 1;
    else
        jumping = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default hurt script

//If not invulnerable
if (invulnerable == false) {

    //If the player is riding something
    if (global.mount &gt; 0) {
    
        //If the player is riding a shoe, destroy shoe
        if (global.mount == 2) {
            
            //With the shoe
            with (obj_kuriboshoe) {
            
                //Create flying shoe
                with (instance_create(x,y,obj_kuriboshoe_lost)) {
                
                    sprite_index = other.sprite_index;
                    image_xscale = obj_playerparent.xscale;
                    hspeed = obj_playerparent.xscale*-1;
                }
                
                //Destroy
                instance_destroy();
            }
        
            //Make Mario invincible for a while.
            invulnerable = true;
            alarm[0] = 90;
            alarm[1] = 1;                 
        }
        
        else {
        
            //If the player is riding a yoshi, scare yoshi
            if (global.mount == 1) {
    
                with (obj_yoshi) {
                
                    //Create a scared yoshi
                    with (instance_create(x,y,obj_yoshi_runaway)) colour = other.colour;
                    
                    //Destroy
                    instance_destroy();
                }
                
                //Make Mario invincible for a while.
                invulnerable = true;
                alarm[0] = 90;
                alarm[1] = 1;        
            }
        }
    }
    
    else {
    
        //If frozen, break ice
        if (freezetime &gt; 0) {
        
            //Play 'Shatter' sound
            audio_play_sound(snd_shatter, 0, false);
            
            //Create sparklies
            repeat (32) {

                with (instance_create(bbox_left+sprite_width/2-4,bbox_top+sprite_height/2-4,obj_smoke)) {
                
                    //Sprite
                    sprite_index = spr_icespark;
                    
                    //Animate
                    image_speed = 0.1;
                    
                    //Motion
                    motion_set(random(360), random(1));
                }
            }
            
            //Break ice
            freezetime = 0;
            
            //Enable controls
            disablecontrol = false;             
        }
        
        //Otherwise
        else {

            //If health mode is active
            if (global.healthmode == true) {
            
                //If the player does have a powerup
                if (global.powerup &gt; cs_big) {
                
                    //Play 'Warp' sound
                    audio_play_sound(snd_warp, 0, false);
                    
                    //Turn into 'Super'
                    global.powerup = cs_big;
                    
                    //Perform animation sequence
                    with (instance_create(0,0,obj_player_transform))
                        sequence = 3;
                }
                
                //Otherwise, if the player does not have a powerup
                else {
                
                    //If there's health left
                    if (health &gt; 1) {
                    
                        //Play 'Warp' sound
                        audio_play_sound(snd_warp, 0, false);
                        
                        //Decrement health
                        health--;
                        
                        //Perform animation sequence
                        with (instance_create(0,0,obj_player_transform))
                            sequence = 3;
                    }
                    
                    //Otherwise if the HP is 1, die.
                    else if (health == 1) {
                    
                        //Set health
                        health = 0;
                        
                        //Perform death events
                        instance_create(x,y,obj_player_dead);
                        instance_destroy();
                        exit;     
                    }
                }
            }
            
            //Otherwise, if health mode is not enabled
            else if (global.healthmode == false) {
            
                //If the player has a higher grade powerup
                if (global.powerup &gt; cs_big) {
                
                    //Play 'Warp' sound
                    audio_play_sound(snd_warp, 0, false);
            
                    //Turn the player into 'Super'.
                    global.powerup = cs_big;
                    
                    //Perform animation sequence
                    with (instance_create(0,0,obj_player_transform))
                        sequence = 3;    
                }
                
                //Otherwise, turn into small
                else if (global.powerup == cs_big) {
                
                    //Play 'Warp' sound
                    audio_play_sound(snd_warp, 0, false);
                    
                    //Turn the player into 'Super'.
                    global.powerup = cs_small;
                    
                    //Drop reserve item
                    with (obj_levelcontrol) {
                    
                        if (global.reserve &gt; cs_small)
                        &amp;&amp; (global.reservedrop == true)
                            event_user(1);
                    }
                    
                    //Perform animation sequence
                    with (instance_create(0,0,obj_player_transform))
                        sequence = 1;        
                }
                
                //Otherwise, kill the player
                else {
                  
                    instance_create(x,y,obj_player_dead);
                    instance_destroy();
                    exit;     
                }
            }
        }
    }
    
    //Become invulnerable
    invulnerable = 1;
    
    //Become vulnerable
    alarm[0] = 90;
    alarm[1] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
