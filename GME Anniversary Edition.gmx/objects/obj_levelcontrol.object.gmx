<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_marker_event</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The level manager, this is needed on every in-game level. Do not forget to place it.

/*
**  This item uses creation code!
**
**  levelmusic  = The level music (Any sound resource you load in)
**  leveltime   = The time limit in seconds (Optional)
**  camlock     = Whether to lock the camera in place
**  water       = Whether the area is a underwater area
*/

//Default Values:
levelmusic = noone;
leveltime = 0;
camlock = 1;
water = 0;

//Begin playing the music if the p-switch effect is not active or you did not carried a star from a previous room
if (global.pswitch == 0)
&amp;&amp; (global.starman == 0)
&amp;&amp; (global.mapstar == 0)
    alarm[0] = 2;
    
//Music not disabled
musicdisable = 0;

//Manage barrier
barrier = 1;
alarm[7] = 3;

//Manage foreground backgrounds
for (var i=0; i&lt;8; i++) {

    bgfg[i] = 0;
    if (background_foreground[i] == true) {
    
        bgfg[i] = true;
        background_foreground[i] = false;
    }
}
alarm[8] = 3;

//PSwitch is on?
switchon = 0;

//GSwitch is on?
gswitchon = 0;

//Screen shake
shake = 0;

//Object to follow
follow = noone;

//P-Switch Warning
pwarning = 0;
gwarning = 0;

//Make sure the view follows this object.
view_object[0] = id;

//Create HUD object
instance_create(0,0,obj_hud);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turn off E-Switch events

//Stop end timer
audio_stop_sound(snd_switchtimer_end);

//Enable all switches
with (obj_eswitchblock) {

    //Make it solid if needed
    if (mysolid == noone) then mysolid = instance_create(x,y,obj_solid);

    //Do not animate
    image_speed = 0;
    image_index = 0;
}

//Disable all blocks
with (obj_eblock) event_user(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turn off ?-Switch events

//Stop end timer
audio_stop_sound(snd_switchtimer_end);

//Enable all switches
with (obj_qswitchblock) {

    //If a timeline exists
    if (timelineS != noone) {
    
        //Stop given timeline
        timeline_running = false;
        
        //Reset timeline
        timeline_position = 899;
    }

    //Make it solid if needed
    if (mysolid == noone) then mysolid = instance_create(x,y,obj_solid);

    //Do not animate
    image_speed = 0;
    image_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Warn the player that the switch effect is about to end

audio_play_sound(snd_switchtimer_end, 0, false);
audio_stop_sound(snd_switchtimer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create foreground layers if necessary

for (var i=0; i&lt;8; i++) {

    //If a background has not been set, do not draw
    if (background_index[i] != -1) {
    
        //If the background is set to the foreground
        if (bgfg[i] == true) {
        
            fg = instance_create(0,0,obj_foreground)
            fg.index = i;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Disable barrier and create water if required

//Disable barrier
barrier = 0;

//Create swim object
if (water) {

    with (instance_create(0, -96, obj_swim)) {
    
        image_xscale = room_width;
        image_yscale = room_height;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deactivate Gray P-Switch events

//If the switch is on already.
if (gswitchon) {

    //Turn off the P-Switch.
    gswitchon = false;
    
    //Reset silver coin
    global.silvercoins = 0;
    
    //Stop the switch song
    audio_stop_sound(bgm_pswitch);
    
    //Allow warning
    gwarning = 0;
    
    //Restart the invincibility music if it was stopped due to overlap.
    if (instance_exists(obj_invincibility)) {
    
        if (obj_invincibility.alarm[0] &gt; -1)    
            obj_invincibility.alarm[2] = 2;
        else
            alarm[0] = 2;
    }
    
    //Otherwise, restart
    else
        alarm[0] = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deactivate P-Switch events.

//If the switch is on already.
if (switchon) {

    //Turn off the P-Switch.
    switchon = false;
    
    //Change items.
    pswitch_deactivate();
    
    //Stop the switch song
    audio_stop_sound(bgm_pswitch);
    
    //Allow warning
    pwarning = 0;
    
    //Restart the invincibility music if it was stopped due to overlap.
    if (instance_exists(obj_invincibility)) {
    
        if (obj_invincibility.alarm[0] &gt; -1)    
            obj_invincibility.alarm[2] = 2;
        else
            alarm[0] = 2;
    }
    
    //Otherwise, restart
    else
        alarm[0] = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Kill the player

//Reset up the timer
global.time = 0;

//Kill the player
with (instance_create(obj_playerparent.x,obj_playerparent.y,obj_player_dead)) timeup = 1;
with (obj_playerparent) instance_destroy();
exit;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Speed up the music and warn the player that the time is running out

//Play 'Hurry' sound
audio_play_sound(snd_hurry, 0, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Decrement time variable

//If the player object exists
if (instance_exists(obj_playerparent)) {

    //If there's time left
    if (global.time &gt; 0) {
    
        //Decrement
        global.time--;
        
        //Decrement again
        alarm[2] = 40;
        
        //Play the hurry up sound at 100 seconds
        if (global.time == 101)
            alarm[3] = 40;
            
        //Kill the player at 0 seconds
        else if (global.time == 1)
            alarm[4] = 40;
    }
}

//Otherwise, hold.
else {

    alarm[2] = 50;
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop the music

audio_stop_sound(levelmusic);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Loop the music

//If not audio is playing and the music is not disabled and the pswitch theme is not playing
if (!audio_is_playing(levelmusic)) 
if (musicdisable == 0)
&amp;&amp; (switchon == 0)
&amp;&amp; (gswitchon == 0)
    audio_play_sound(levelmusic, 1, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deals with the music speed

//Play a warning sound when the P-Switch effect is running out
if (pwarning == 0) {

    //Check ticks
    if ((alarm[5] &gt; 0) &amp;&amp; (alarm[5] &lt; 120)) {
    
        audio_play_sound(snd_warning, 0, false);
        pwarning = 1;
    }
}

//Play a warning sound when the G-Switch effect is running out
if (gwarning == 0) {

    //Check ticks
    if ((alarm[6] &gt; 0) &amp;&amp; (alarm[6] &lt; 120)) {
    
        audio_play_sound(snd_warning, 0, false);
        gwarning = 1;
    }
}

//Pause the music if 'Hurry' is being played
if (audio_is_playing(snd_hurry)) {

    //Pause 'levelmusic'
    if (audio_is_playing(levelmusic)) 
        audio_pause_sound(levelmusic);
    
    //Pause 'bgm_starman'
    else if (audio_is_playing(bgm_starman))
        audio_pause_sound(bgm_starman);
    
    //Pause 'bgm_pswitch'
    else if (audio_is_playing(bgm_pswitch))
        audio_pause_sound(bgm_pswitch); 
}

else {

    //Set pitch of music at 1.3
    if (global.time &gt; 0) 
    &amp;&amp; (global.time &lt; 101) {
        
        audio_sound_pitch(levelmusic, 1.25);
        audio_sound_pitch(bgm_starman, 1.25);
        audio_sound_pitch(bgm_pswitch, 1.25);    
    }
    
    //Otherwise, set pitch to 1.0
    else {
    
        audio_sound_pitch(levelmusic, 1);
        audio_sound_pitch(bgm_starman, 1);
        audio_sound_pitch(bgm_pswitch, 1);
    }

    //Resume 'levelmusic' if paused
    if (audio_is_paused(levelmusic)) 
        audio_resume_sound(levelmusic);
    
    //Resume 'bgm_starman' if paused
    else if (audio_is_paused(bgm_starman))
        audio_resume_sound(bgm_starman);
    
    //Resume 'bgm_pswitch' if paused
    else if (audio_is_paused(bgm_pswitch))
        audio_resume_sound(bgm_pswitch);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deals with various game logic stuff

//Check what object to follow
event_user(2);

//If the autoscroll object exists
if (instance_exists(obj_autoscroll)) {

    //If the player does exist
    if (instance_exists(obj_playerparent)) {

        //If the camera is locked.
        if (camlock) {
        
            //Set the x position of the camera.
            x = obj_autoscroll.x;
            
            //If the player speed is the maximum possible...
            if (((obj_playerparent.run)
            
            //...and the player has one of the following powerups...
            &amp;&amp; ((global.powerup == cs_leaf)
            || (global.powerup == cs_tanooki)))
            
            //...or the player is riding something that is flying
            || (((instance_exists(obj_yoshi)) &amp;&amp; (obj_yoshi.flying == 1))
            || (instance_exists(obj_kuriboshoe)) &amp;&amp; (obj_kuriboshoe.flying == 1))) {
            
                //Set the y position of the camera
                y = obj_playerparent.y;
                
                //Set the vertical speed of the view
                view_vspeed[0] = 4;
            }
            
            //Otherwise, if the player is climbing up a beanstalk or a fence.
            else if (obj_playerparent.state == 3) {
            
                //Set the y position of the camera
                y = obj_playerparent.y;
                
                //Set the vertical speed of the view
                view_vspeed[0] = 4;                   
            }
            
            //Otherwise, if the player is not doing anything stated above and the view is above the view start position.
            else {
            
                //If the player is colliding with a moving platform
                if (collision_rectangle(obj_playerparent.bbox_left,obj_playerparent.bbox_bottom+1,obj_playerparent.bbox_right,obj_playerparent.bbox_bottom+2,obj_platformparent,0,0)) 
                &amp;&amp; (obj_playerparent.state &lt; 2) {
                
                    //Set the y position of the camera
                    y = obj_playerparent.y;
                    
                    //Set the vertical speed of the view
                    view_vspeed[0] = 4;
                }
                
                //Otherwise
                else if (view_yview[0] &lt; room_height-216) {
            
                    //Set the y position of the camera
                    y = obj_playerparent.y;
                    
                    //Set the vertical speed of the view
                    view_vspeed[0] = -1;           
                }
            }        
        }
        
        //Otherwise, if the camera is not locked.
        else {
        
            //Set the x position of the camera.
            x = obj_autoscroll.x;
        
            //Set the y position of the camera.
            y = obj_autoscroll.y;                
        }
    }
    
    //Otherwise, follow the rest of objects
    else if (instance_exists(follow)) {
    
        //Check what object the camera must follow
        event_user(2);
    
        //If the camera is locked.
        if (camlock) {
        
            //Set the x position of the camera.
            x = follow.x;
        
            //Set the y position of the camera.
            if (view_yview[0] &lt; room_height-216)            
                y = follow.y;
        }
        
        //Otherwise, if it's not locked.
        else {
        
            //Set the x position of the camera.
            x = follow.x;
        
            //Set the y position of the camera.
            y = follow.y;            
        }     
        
        //Set the view speed
        view_hspeed[0] = 4;
        view_vspeed[0] = 4;   
    }
}

//Follow main player
else if (instance_exists(obj_playerparent)) {

    //Handle camera position
    event_user(3);
        
    //Make sure the barrier is not active
    if (barrier == 0) 
    &amp;&amp; (instance_number(obj_gotomap) == 0) {
         
        //Prevent the player from going outside the left boundary
        if (obj_playerparent.x &lt; view_xview[0]+5) {
        
            //Snap the player 5 pixels at the left of the boundary
            obj_playerparent.x = view_xview[0]+5;
            
            //Stop Mario's horizontal movement
            if (obj_playerparent.xspeed &lt; 0) {
            
                //Stop horizontal movement
                obj_playerparent.xspeed = 0;
                
                //Stop sliding if necessary
                if (obj_playerparent.sliding) {
                
                    //Stop sliding
                    sliding = false;
                    
                    //Free 'Down' key
                    keyboard_clear(global.downkey);
                }
            }
            
            //End dropdown
            if (instance_exists(obj_dropdown))
                with (obj_dropdown) instance_destroy();
        }
        
        //Otherwise, prevent the player from going outside the right boundary
        else if (obj_playerparent.x &gt; view_xview[0]+view_wview[0]-5) {
        
            //Snap the player 5 pixels at the left of the boundary
            obj_playerparent.x = view_xview[0]+view_wview[0]-5;
            
            //Stop Mario's horizontal movement
            if (obj_playerparent.xspeed &gt; 0) {
            
                //Stop horizontal movement
                obj_playerparent.xspeed = 0;
                
                //Stop sliding if necessary
                if (obj_playerparent.sliding) {
                
                    //Stop sliding
                    sliding = false;
                    
                    //Free 'Down' key
                    keyboard_clear(global.downkey);
                }
            }
                        
            //End dropdown
            if (instance_exists(obj_dropdown))
                with (obj_dropdown) instance_destroy();
        }
    }
}

//Follow rest of player objects
else if (instance_exists(follow)) {

    //Check what object the camera must follow
    event_user(2);

    //If the camera is locked.
    if (camlock) {
    
        //Set the x position of the camera.
        x = follow.x;
    
        //Set the y position of the camera.
        if (view_yview[0] &lt; room_height-216)            
            y = follow.y;
    }
    
    //Otherwise, if it's not locked.
    else {
    
        //Set the x position of the camera.
        x = follow.x;
    
        //Set the y position of the camera.
        y = follow.y;            
    }
}

//Round position
x = round(x);
y = round(y);

//Get a extra life if 100 coins are collected
if (global.coins &gt; 99) {

    //If lives are maxed out, keep them at 99.
    if (lives &gt;= 99)
        global.coins = 99;
        
    //Otherwise, give a extra life and reset the counter.
    else {
    
        //Subtract 100 coins
        global.coins -= 100;
        
        //If there's not spare lifes
        if (obj_persistent.addlives == 0) {
        
            //Play '1up' sound
            audio_play_sound(snd_1up, 0, false);
        
            //Add a life instantly
            lives++;
        }
        else {
        
            //Add a spare life
            with (obj_persistent) {
            
                addlives++;
                alarm[2] = 30;
            }
        }
    }
}

//Allow the player to either drop the reserve item or pause the game.
if (barrier == 0) 
&amp;&amp; (instance_exists(obj_playerparent)) 
&amp;&amp; (obj_playerparent.disablecontrol == false) {

    //If there's a item in reserve and the player presses the reserve key.
    if (keyboard_check_pressed(global.spacekey))
    &amp;&amp; (global.reserve &gt; cs_small)
        event_user(1);
        
    //If the 'Enter' key is pressed and the player controls are not disabled
    if (keyboard_check_pressed(global.enterkey))
    &amp;&amp; (!keyboard_check(vk_alt))
    &amp;&amp; (!instance_exists(obj_pausemenu))
        instance_create(0,0,obj_pausemenu);
}

//Make sure to reset the mount colour
if (global.mount == 0)
&amp;&amp; (global.mountcolour &gt; 0)
    global.mountcolour = 0;

//Deactivate instances outside the view
instance_deactivate_object(obj_deactenemyparent);
instance_deactivate_object(obj_deactivateparent);

//Activate deactivated instances inside the view
instance_activate_region(view_xview[0]-40, view_yview[0]-32, view_wview[0]+40, view_hview[0]+32, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Activate E-Switch events

//If the switch timer end sound is playing, stop it first
if (audio_is_playing(snd_switchtimer_end)) then audio_stop_sound(snd_switchtimer_end);

//Play the switch timer sound
if (!audio_is_playing(snd_switchtimer)) then audio_play_sound(snd_switchtimer, 0, true);

//Activate E-Switch events
with (obj_eblock) event_user(0);
alarm[9] = 720;
alarm[11] = 900; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Activate ?-Switch events

//If the switch timer end sound is playing, stop it first
if (audio_is_playing(snd_switchtimer_end)) then audio_stop_sound(snd_switchtimer_end);

//Play the switch timer sound
if (!audio_is_playing(snd_switchtimer)) then audio_play_sound(snd_switchtimer, 0, true);

//Activate ?-Switch events
alarm[9] = 720;
alarm[10] = 900; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Activate Gray P-Switch events

//If the switch is not turned on yet.
if (!gswitchon) {

    //Turn the switch on.
    gswitchon = true;
    
    //Start the switch song if it's not playing.
    alarm[1] = 1;
    if (!audio_is_playing(bgm_pswitch)) {
    
        audio_play_sound(bgm_pswitch, 1, true);
    }
    
    //Prevent the starman theme from overlapping
    audio_stop_sound(bgm_starman);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Activate P-Switch events

//If the switch is not turned on yet.
if (!switchon) {

    //Turn the switch on.
    switchon = true;
    
    //Change items
    pswitch_activate();
    
    //Start the switch song if it's not playing.
    alarm[1] = 1;
    if (!audio_is_playing(bgm_pswitch)) {
    
        audio_play_sound(bgm_pswitch, 1, true);
    }
    
    //Prevent the starman theme from overlapping
    audio_stop_sound(bgm_starman);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy player objects

with (obj_playerparent) instance_destroy();
with (obj_player_warp) instance_destroy();
with (obj_player_jump) instance_destroy();
with (obj_player_climb) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle camera position

//If the camera is locked.
if (camlock) {

    //Set the x position of the camera.
    x = obj_playerparent.x;
    
    //If the player speed is the maximum possible...
    if (((obj_playerparent.run)
    
    //...and the player has one of the following powerups...
    &amp;&amp; ((global.powerup == cs_leaf)
    || (global.powerup == cs_tanooki)))
    
    //...or the player is riding something that is flying
    || (((instance_exists(obj_yoshi)) &amp;&amp; (obj_yoshi.flying == 1))
    || (instance_exists(obj_kuriboshoe)) &amp;&amp; (obj_kuriboshoe.flying == 1))) {
    
        //Set the y position of the camera
        y = obj_playerparent.y;
        
        //Set the vertical speed of the view
        view_vspeed[0] = 4;
    }
    
    //Otherwise, if the player is climbing up a beanstalk or a fence.
    else if (obj_playerparent.state == 3) {
    
        //Set the y position of the camera
        y = obj_playerparent.y;
        
        //Set the vertical speed of the view
        view_vspeed[0] = 4;                   
    }
    
    //Otherwise, if the player is not doing anything stated above and the view is above the view start position.
    else {
    
        //If the player is colliding with a moving platform
        if (collision_rectangle(obj_playerparent.bbox_left,obj_playerparent.bbox_bottom+1,obj_playerparent.bbox_right,obj_playerparent.bbox_bottom+2,obj_platformparent,0,0)) 
        &amp;&amp; (obj_playerparent.state &lt; 2) {
        
            //Set the y position of the camera
            y = obj_playerparent.y;
            
            //Set the vertical speed of the view
            view_vspeed[0] = 4;
        }
        
        //Otherwise
        else if (view_yview[0] &lt; room_height-216) {
    
            //Set the y position of the camera
            y = obj_playerparent.y;
            
            //Set the vertical speed of the view
            view_vspeed[0] = -1;           
        }
    }        
}

//Otherwise, if the camera is not locked.
else {

    //Set the x position of the camera.
    x = obj_playerparent.x;

    //Set the y position of the camera.
    y = obj_playerparent.y;                
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set the object to follow

//If the main player object exists, ignore other player objects
if (instance_exists(obj_playerparent))
    follow = noone;
    
//Otherwise, check for a existing object
else {

    //Check for 'Warp'
    if (instance_exists(obj_player_warp))
        follow = obj_player_warp;
        
    //Check for 'Jump'
    else if (instance_exists(obj_player_jump))
        follow = obj_player_jump;
                
    //Check for 'Climb'
    else if (instance_exists(obj_player_climb))
        follow = obj_player_climb;
        
    //Check for 'Goal'
    else if (instance_exists(obj_playerparent_clear))
        follow = obj_playerparent_clear;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drop the reserve item

if (global.reserve != cs_small) {

    //Create a reserve item
    with (instance_create(view_xview[0]+view_wview[0]/2, view_yview[0]+12, obj_reserveitem)) {
    
        sprite_index = constant_get_sprite(global.reserve);
    }
        
    //Empty the reserve box
    global.reserve = cs_small;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop all music and fanfares

//Stop music instance
audio_stop_sound(levelmusic);

//Prevent it from playing
musicdisable = 1;

//Stop both pswitch and starman streams
audio_stop_sound(bgm_pswitch);
audio_stop_sound(bgm_starman);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset values

//Stop the following sounds from playing
audio_stop_sound(snd_climb);
audio_stop_sound(snd_pmeter);
audio_stop_sound(snd_skid);
audio_stop_sound(snd_spin);
audio_stop_sound(snd_switchtimer);
audio_stop_sound(snd_switchtimer_end);
audio_stop_sound(snd_timer);
audio_stop_sound(snd_timer_end);

//If the game is not restarting
if (obj_persistent.restart == false) {

    //Remember P-Switch time limit if enabled
    if (switchon)
        global.pswitch = alarm[5];
    
    //Remember G-Switch time limit if enabled
    if (gswitchon) 
        global.gswitch = alarm[6];
}

//Restart level colours
if (global.skin != 0)
    global.skin = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles the Mario Start! text, room warping, music and timer.

//If the music is not the same as the music used in the last room
if (global.levelmusic != levelmusic) {

    //Stop the old music
    audio_stop_sound(global.levelmusic);

    //Set the new music
    global.levelmusic = levelmusic;    
}

//Set up the time for the level.
if (leveltime &gt; 0) { //If the timer has been set.

    //If the global time for the level is equal to 0.
    if (global.time = 0) {
    
        global.time = leveltime;
        alarm[2] = 50;
    }
    
    //Otherwise, if the time has been set before.
    else if (global.time &gt; 0)    
        alarm[2] = 50;
}

//If the player just started the level
if (global.mariostart == 0) {

    //The level has started
    global.mariostart = 1;
    
    //Handles checkpoints
    if (instance_exists(global.checkpoint)) {

        //Destroy all player objects
        event_user(4);
        
        //Create a new Mario at the desired location
        player_retrieve(global.checkpoint.xcoor,global.checkpoint.ycoor);
    }

    //Create the Mario Start! effect
    instance_create(view_xview[0],view_yview[0],obj_mariostart);
}
else {

    //Fade out
    instance_create(0,0,obj_fadeout);
}

//If the player came from another room.
if (global.postchange != -1) {

    //Destroy all player objects
    event_user(4);
    
    //Main
    if (global.postchange == 0)
        player_retrieve(global.postx, global.posty); 
        
    //Warp
    else if (global.postchange = 1)
        with (instance_create(global.postx, global.posty, obj_player_warp)) ready = 1;
        
    //Jump
    else if (global.postchange = 2)
        instance_create(global.postx, global.posty, obj_player_jump);
        
    //Climb
    else if (global.postchange = 3)
        instance_create(global.postx, global.posty, obj_player_climb);
    
    //Make the player able to warp between rooms.
    global.postchange = -1;
}

//If the player was riding a shoe on the previous room, create one.
if (global.mount == 2)
    instance_create(x,y,obj_kuriboshoe);

//Otherwise, if the player was riding a yoshi, create one.
else if (global.mount == 1)
    instance_create(x,y,obj_yoshi);

//If the player carried an item through a pipe in the last room.
else if (global.carrieditem != noone) {

    //Create it
    with (instance_create(x,y,global.carrieditem)) {
    
        //Hold the item
        held = 1;
        
        //Set up the sprite
        if (global.carriedsprite != noone) {
        
            //Change the sprite of the held item
            sprite_index = global.carriedsprite;
            
            //Reset the sprite
            global.carriedsprite = noone;
        }
    }
    
    //Check what item is going to hold the item
    event_user(15);    
    
    //Check if the player exists and make it hold if so.
    if (instance_exists(obj_playerparent)) {
    
        //If the item held was a SMB2 one
        if (object_get_parent(global.carrieditem) == obj_parcarry) {
        
            //If the item held was a blue boomerang
            if (global.carrieditem == obj_boomerang_blue_up)
                obj_playerparent.holding = 3;
            else            
                obj_playerparent.holding = 1;
        }
        
        //Otherwise, if the item held was a SMB3 / SMW one
        else if (object_get_parent(global.carrieditem) == obj_parhold)
            obj_playerparent.holding = 2;
    }
    
    //Otherwise
    else {
    
        if (instance_exists(follow))
            follow.holding = 1;
    }

    //Reset held object
    global.carrieditem = noone;
}

//Turn on P-Switch if it was activated on the previous room.
if (global.pswitch &gt; 0) {

    //Check ticks brought from last room
    if (global.pswitch &lt; 120) {
    
        pwarning = 1;
    }    

    //Turn on the P-Switch
    event_user(5);
    
    //Set the timer
    alarm[5] = max(global.pswitch,30);
    
    //Reset the variable
    global.pswitch = 0;
}

//Turn on gray P-Switch if it was activated on the previous room.
if (global.gswitch &gt; 0) {

    //Check ticks brought from last room
    if (global.gswitch &lt; 120) {
    
        gwarning = 1;
    }    
    
    //Turn on the gray P-Switch
    event_user(6);
    
    //Set the timer
    alarm[6] = max(global.gswitch,30);
    
    //Reset the variable
    global.gswitch = 0;
}

//If a star was active on the previous room.
if (global.starman &gt; 0) {

    //Create a new starman object.
    with (instance_create(0,0,obj_invincibility)) alarm[0] = max(global.starman,30);
    
    //Reset the variable
    global.starman = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deals with parallax backgrounds.

for (var i=0; i&lt;8; i++) {

    //If the background is not set, do not draw
    if (background_index[i] != -1) {
    
        //If the background is not a foreground, do not draw
        if (background_foreground[i] == false) {
        
            //If the background is higher than the height of the room
            if (background_height[i] &lt; room_height)
            &amp;&amp; (background_height[i] &gt; view_hview[0])
                draw_background_tiled_horizontal_ext(background_index[i], view_xview[0]/(1.2+(0.2*i))+(background_x[i]+background_hspeed[i]), background_y[i]+(view_yview[0]*(room_height-background_height[i])/(room_height-view_hview[0])), 1, 1, 0, background_blend[i], background_alpha[i]);
                
            //Otherwise, draw normally        
            else        
                draw_background_tiled_horizontal_ext(background_index[i], view_xview[0]/(1.2+(0.2*i))+(background_x[i]+background_hspeed[i]), background_y[i], 1, 1, 0, background_blend[i], background_alpha[i]);
        }
    }
}

//Draw pit marker
draw_background_ext(bgr_pit, 0, room_height-32, room_width/16, 1, 0, background_blend[0], 0.5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
