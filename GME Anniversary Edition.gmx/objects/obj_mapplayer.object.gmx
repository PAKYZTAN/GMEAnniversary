<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_marker_event</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///It's the player on the map

//Check if the position was modified before
if (ds_map_exists(global.mapscreen,"mapx")) {

    //Place the player in position
    x = ds_map_find_value(global.mapscreen,"mapx");
    y = ds_map_find_value(global.mapscreen,"mapy");
}
else {

    //Set up a map
    ds_map_add(global.mapscreen,"mapx",x);
    ds_map_add(global.mapscreen,"mapy",y);
}

//Do not animate
image_speed = 0;
image_index = 0;
alarm[2] = 1;

//Facing direction
xscale = 1;

//Whether the player can move
ready = 0;

//Whether the player can enter a level
letsgo = 0;

//Current player frame
frame = 0;

//Current arrow frame / alpha
anim = 0;

//Room to go
myroom = noone;

//Open adyacent paths
if (global.clear &gt; 0) {

    alarm[0] = 2;
    if (global.clear == 3) {
    
        //Allow clearance
        global.clear = 0;
    
        //Do not allow movement
        ready = 1;
        
        //Allow movement after a while
        alarm[3] = 90;    
    }
}

//If the player died on the level
if (global.died == 1) {

    //Reset dead variable
    global.died = 2;
    
    //Do not allow movement
    ready = 1
    
    //Allow movement after a while
    alarm[3] = 90;
}

//Reset time
global.time = 0;

//Reset berries
global.berries = 0;

//Reset red coins
global.redcoins = 0;

//Reset starman and pswitch
global.starman = 0;
global.pswitch = 0;
global.gswitch = 0;

//Reset pwing effect
global.pwing = 0;

//Reset Mario Start! text
global.mariostart = false;

//Reset 'Return to map' option
global.levelbeat = 0;

//Reset on/off blocks
global.onoffyellow = 0;
global.onoffgreen = 0;
global.onoffred = 0;
global.onoffblue = 0;

//Reset held variables
global.carrieditem = noone;
global.carriedsprite = noone;

//Reset all door states
ds_map_clear(global.doors);

//Reset ace coins
ds_map_clear(global.acecoins);

//Reset red coin rings
ds_map_clear(global.redrings);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Allow movement after using inventory

ready = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Allow movement or ask to save the current game

//Check for the player object
var panel = collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_maplevel,0,0);

//If the player exists
if (panel) {

    //If the player died in the level
    if (global.died == 0) {

        //If you cannot save with the current panel
        if (panel.saveme == 0) {
        
            //If there's still opener objects around, wait
            if (instance_number(obj_opener) &gt; 0) {
            
                alarm[3] = 1;
                exit;
            }        
            
            //Allow movement
            ready = 0;
            
            //Play music
            obj_mapcontrol.alarm[2] = 1;
        }
            
        //Otherwise, wait
        else if (panel.saveme == 1) &amp;&amp; (global.clear &gt; 0) {
        
            //If there's still opener objects around, wait
            if (instance_number(obj_opener) &gt; 0) {
            
                alarm[3] = 1;
                exit;
            }
            
            //If debug mode is not activated or the player did not used cheats, allow save.
            if (debug_mode == false)
            &amp;&amp; (global.cheats == false)
                instance_create(0,0,obj_savemenu);
                
            //Otherwise, allow movement
            else {
            
                ready = 0;
                obj_mapcontrol.alarm[2] = 1;
            }
        }
    }
    else {
    
        //End die sequence
        global.died = 0;
        
        //Allow movement
        ready = 0;
        
        //Play music
        obj_mapcontrol.alarm[2] = 1;
    }
}

//Reset clear variable
global.clear = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change frame

alarm[2] = 9;
frame = !frame;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go to the destination room

//Stop map stream
obj_mapcontrol.alarm[3] = 1;

//Remember position
event_user(1);

//Create curtain out effect
if (instance_number(obj_curtainout) == 0) {

    with (instance_create(x+8,y+4,obj_curtainout)) 
        target = other.myroom;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Open adyacent paths

//If the level has been cleared with a regular exit
if (global.clear == 1) {

    //Get the ID of the panel where the player is
    var panel = collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_maplevel,0,0);
    
    //If the panel exists
    if (panel) {
    
        //Open regular adyacent paths
        event_user(2);
        
        //Handle panel events
        with (panel) {
        
            //Remember you got the main exit
            if (exitdir != -1)
            &amp;&amp; (exitdir != 10) {
            
                if (!ds_map_exists(global.exits, id))
                    ds_map_replace(global.exits, id, 1);                
            }
        
            //Mark the level as beaten...
            beaten = 1;
            
            //...perform panel events...
            alarm[1] = 45;
            
            //...do not remember checkpoints...
            checkpoint = noone;
            
            //...and make sure the game remembers it
            ds_map_replace(global.mapscreen, id, 2);
        }
    }
    
    //Do not allow movement
    ready = 1;
    
    //Allow movement after a while
    alarm[3] = 90;
}

//Otherwise, if the level has been cleared with a secret exit
else if (global.clear == 2) {

    //Get the ID of the panel where the player is
    var panel = collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_maplevel,0,0);
    
    //If the panel exists
    if (panel) {
    
        //Open secret adyacent paths
        event_user(3);
        
        //Handle panel events
        with (panel) {
        
            //Remember you got the main exit
            if (exitalt != -1)
            &amp;&amp; (exitalt != 10) {
            
                if (!ds_map_exists(global.exits2, id))
                    ds_map_replace(global.exits2, id, 1);                
            }
        
            //Mark the level as beaten...
            beaten = 1;
            
            //...do not remember checkpoints
            checkpoint = noone;
            
            //...and make sure the game remembers it
            ds_map_replace(global.mapscreen, id, 2);
        }
    }
        
    //Do not allow movement
    ready = 1;
    
    //Allow movement after a while
    alarm[3] = 90;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Map player animation

//Stop it if it can't move
if (ready == 1) then speed = 0;

//If the player is about to enter a stage, make him do the victory pose.
if (letsgo == 1) {

    //Do not animate
    image_index = 8;
        
    //Set default facing direction
    xscale = 1;
}

//Otherwise, set default animation
else {

    //If the player is not moving
    if (speed == 0) {
    
        //Do not animate
        image_index = 0;
        
        //Set default facing direction
        xscale = 1;
    }
    
    //Otherwise
    else {
    
        //If the player is moving to the left or the right
        if (direction == 0)
        || (direction == 180) {
        
            //Do not animate
            image_index = 4;
            
            //Set facing direction
            if (hspeed &gt; 0)
                xscale = 1;
            else if (hspeed &lt; 0)
                xscale = -1;
        }
        
        //Otherwise, if the player is moving up or down
        else {
        
            //If the player's horizontal speed is lower or greater than 0
            if (hspeed != 0) {
            
                //Set the frame
                image_index = 4;
                
                //Set the facing direction
                if (hspeed &gt; 0)
                    xscale = 1;
                else if (hspeed &lt; 0)
                    xscale = -1;
            }
            
            //Otherwise, if the player is moving up or down
            else {
            
                //Set the default facing direction
                xscale = 1;
                
                //If the player is climbing
                if (place_meeting(x,y,obj_climb))
                    image_index = 6;
                
                //Otherwise
                else {
                    
                    //If the player is moving up
                    if (direction == 90)
                        image_index = 2
                        
                    //Otherwise, if the player is moving down
                    else if (direction == 270)
                        image_index = 0;
                }
            }
        }
    }
}

//Update animation for arrows
anim += 0.075;

//Reset levelname on manager if moving
if (speed &gt; 0)
&amp;&amp; (obj_mapcontrol.levelname != "") {

    obj_mapcontrol.levelid = "999";
    obj_mapcontrol.levelname = "";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Map player logic

//If the inventory is opened or the player can't move and the paths are opening or the save menu is showing.
if (ready)
|| (letsgo)
|| (obj_mapcontrol.inventory == 1)
|| (instance_number(obj_opener) &gt; 0)
|| (instance_number(obj_savemenu) &gt; 0)
    exit;
    
//Map path opener (It will work only on debug mode)
if (debug_mode)
&amp;&amp; (keyboard_check_pressed(global.controlkey)) {

    //If the player speed is 0 and there' no opener object active
    if (speed == 0)
    &amp;&amp; (instance_number(obj_opener) == 0) {
    
        //Check for a path above
        var mypath_u = collision_rectangle(x+8,y-4,x+8,y-4,obj_mappathparent,0,0);
        if (mypath_u)
        &amp;&amp; (mypath_u.visible == false)
            with (instance_create(x,y,obj_opener)) motion_set(90,2);
                
        //Check for a path below
        var mypath_d = collision_rectangle(x+8,y+20,x+8,y+20,obj_mappathparent,0,0);
        if (mypath_d)
        &amp;&amp; (mypath_d.visible == false)
            with (instance_create(x,y,obj_opener)) motion_set(270,2);
            
        //Check for a path to the left
        var mypath_l = collision_rectangle(x-8,y+8,x-8,y+8,obj_mappathparent,0,0);
        if (mypath_l)
        &amp;&amp; (mypath_l.visible == false)
            with (instance_create(x,y,obj_opener)) motion_set(180,2);
                
        //Check for a path to the right
        var mypath_r = collision_rectangle(x+24,y+8,x+24,y+8,obj_mappathparent,0,0);
        if (mypath_r)
        &amp;&amp; (mypath_r.visible == false)
            with (instance_create(x,y,obj_opener)) motion_set(0,2);
    }
}
    
//If the 'Up' key is pressed
else if (keyboard_check_pressed(global.upkey)) {

    //Check for a path
    var mypath = collision_rectangle(x+8,y-4,x+8,y-4,obj_mappathparent,0,0);
    
    //If there's a path above visible
    if (mypath) {
    
        //If the path is not visible, play 'Bump' sound
        if (mypath.visible == 0)
            audio_play_sound(snd_bump, 0, false);
            
        //Otherwise, move up
        else if (speed == 0)
            vspeed = -1;
    }
    
    //Otherwise
    else if (speed == 0)
        audio_play_sound(snd_bump, 0, false);
}

//Otherwise, if the 'Down' key is pressed
else if (keyboard_check_pressed(global.downkey)) {

    //Check for a path
    var mypath = collision_rectangle(x+8,y+20,x+8,y+20,obj_mappathparent,0,0);
    
    //If there's a path above visible
    if (mypath) {
    
        //If the path is not visible, play 'Bump' sound
        if (mypath.visible == 0)
            audio_play_sound(snd_bump, 0, false);
            
        //Otherwise, move up
        else if (speed == 0)
            vspeed = 1;
    }
    
    //Otherwise
    else if (speed == 0)
        audio_play_sound(snd_bump, 0, false);
}

//Otherwise, if the 'Left' key is pressed
else if (keyboard_check_pressed(global.leftkey)) {

    //Check for a path
    var mypath = collision_rectangle(x-8,y+8,x-8,y+8,obj_mappathparent,0,0);
    
    //If there's a path above visible
    if (mypath) {
    
        //If the path is not visible, play 'Bump' sound
        if (mypath.visible == 0)
            audio_play_sound(snd_bump, 0, false);
            
        //Otherwise, move up
        else if (speed == 0)
            hspeed = -1;
    }
    
    //Otherwise
    else if (speed == 0)
        audio_play_sound(snd_bump, 0, false);    
}

//Otherwise, if the 'Right' key is pressed
else if (keyboard_check_pressed(global.rightkey)) {

    //Check for a path
    var mypath = collision_rectangle(x+24,y+8,x+24,y+8,obj_mappathparent,0,0);
    
    //If there's a path above visible
    if (mypath) {
    
        //If the path is not visible, play 'Bump' sound
        if (mypath.visible == 0)
            audio_play_sound(snd_bump, 0, false);
            
        //Otherwise, move up
        else if (speed == 0)
            hspeed = 1;
    }
    
    //Otherwise
    else if (speed == 0)
        audio_play_sound(snd_bump, 0, false);    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Level panel logic

//Change the level being checked
panel = collision_point(x,y+8,obj_maplevel,0,0);

//If the player is on a panel
if (panel) {
    
    //If 'Shift' is pressed and the panel can be accessed
    if (keyboard_check_pressed(global.shiftkey)) 
    &amp;&amp; (speed == 0)
    &amp;&amp; (letsgo == 0) 
    &amp;&amp; (panel.beaten != 2) {
        
        //Check if the panel is blocked
        if (panel.block == 0) {
        
            //Go where the panel takes you
            with (panel) {
            
                //Check the star coins collected in the level
                event_user(0);
                
                //Check the rooms of the level
                event_user(1);
                
                //Check if the player can exit the room via pausing the game
                global.levelbeat = beaten;
            }
            
            //Go to the level
            alarm[1] = 2;
            
            //Set the victory pose
            letsgo = true;
        }
        
        else {
            
            //Play a sound
            audio_play_sound(snd_wrong,0,0)
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_mappath_emptynode">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop when moving

if (speed &gt; 0)
&amp;&amp; (x == other.x)
&amp;&amp; (y == other.y) {

    //Play 'Move' sound
    audio_play_sound(snd_move, 0, false);
    
    //Stop it
    speed = 0;
    
    //Snap on node
    x = other.x;
    y = other.y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_mappath_levelnode">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop when moving

if (speed &gt; 0)
&amp;&amp; (x == other.x)
&amp;&amp; (y == other.y) {

    //Play 'Move' sound
    audio_play_sound(snd_move, 0, false);
    
    //Stop it
    speed = 0;
    
    //Snap on node
    x = other.x;
    y = other.y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_mappath_downright">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go down if moving left or go right if moving up

//If moving right
if (hspeed &lt; 0) {

    if (x == other.x+8)
        vspeed = 1;
    if ((x == other.x) &amp;&amp; (!place_meeting(x,y,obj_mappath_upleft)))
        hspeed = 0;
}

//If moving down
if (vspeed &lt; 0) {

    if (y == other.y+8) 
        hspeed = 1;
    if ((y == other.y) &amp;&amp; (!place_meeting(x,y,obj_mappath_upleft)))
        vspeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_mappath_downleft">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go down if moving right or go left if moving up

//If moving right
if (hspeed &gt; 0) {

    if (x == other.x-8)
        vspeed = 1;
    if ((x == other.x) &amp;&amp; (!place_meeting(x,y,obj_mappath_upright)))
        hspeed = 0;
}

//If moving down
if (vspeed &lt; 0) {

    if (y == other.y+8)
        hspeed = -1;
    if ((y == other.y) &amp;&amp; (!place_meeting(x,y,obj_mappath_upright)))
        vspeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_mappath_upright">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go up if moving left or go right if moving down

//If moving left
if (hspeed &lt; 0) {

    if (x == other.x+8)
        vspeed = -1;
    if ((x == other.x) &amp;&amp; (!place_meeting(x,y,obj_mappath_downleft)))
        hspeed = 0;
}

//If moving down
if (vspeed &gt; 0) {

    if (y == other.y-8)
        hspeed = 1;
    if ((y == other.y) &amp;&amp; (!place_meeting(x,y,obj_mappath_downleft)))
        vspeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_mappath_upleft">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go up if moving right or go left if moving down

//If moving right
if (hspeed &gt; 0) {

    if (x == other.x-8)
        vspeed = -1;
    if (x == other.x)
        hspeed = 0;
}

//If moving down
if (vspeed &gt; 0) {

    if (y == other.y-8)
        hspeed = -1;
    if (y == other.y)
        vspeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Open secret adyacent paths

//Check direction
switch (panel.exitalt) {

    //Up
    case (0): {
    
        //Check for a path above
        var mypath = collision_rectangle(panel.x+8,panel.y-4,panel.x+8,panel.y-4,obj_mappathparent,0,0);
        if (mypath)
        &amp;&amp; (mypath.visible == false)
            with (instance_create(panel.x,panel.y,obj_opener)) motion_set(90,2);
    } break;
    
    //Down
    case (1): {
    
        //Check for a path below
        var mypath = collision_rectangle(panel.x+8,panel.y+20,panel.x+8,panel.y+20,obj_mappathparent,0,0);
        if (mypath)
        &amp;&amp; (mypath.visible == false)
            with (instance_create(panel.x,panel.y,obj_opener)) motion_set(270,2);
    } break;
    
    //Left
    case (2): {
    
        //Check for a path to the left
        var mypath = collision_rectangle(panel.x-4,panel.y+8,panel.x-4,panel.y+8,obj_mappathparent,0,0);
        if (mypath)
        &amp;&amp; (mypath.visible == false)
            with (instance_create(panel.x,panel.y,obj_opener)) motion_set(180,2);
    } break;
    
    //Right
    case (3): {
    
        //Check for a path to the right
        var mypath = collision_rectangle(panel.x+20,panel.y+8,panel.x+20,panel.y+8,obj_mappathparent,0,0);
        if (mypath)
        &amp;&amp; (mypath.visible == false)
            with (instance_create(panel.x,panel.y,obj_opener)) motion_set(0,2);
    } break;
    
    //Up-Left
    case (4): {
    
        //Check for a path above
        var mypath = collision_rectangle(panel.x+8,panel.y-4,panel.x+8,panel.y-4,obj_mappathparent,0,0);
        if (mypath)
        &amp;&amp; (mypath.visible == false)
            with (instance_create(panel.x,panel.y,obj_opener)) motion_set(90,2);
            
        //Check for a path to the left
        var mypath = collision_rectangle(panel.x-4,panel.y+8,panel.x-4,panel.y+8,obj_mappathparent,0,0);
        if (mypath)
        &amp;&amp; (mypath.visible == false)
            with (instance_create(panel.x,panel.y,obj_opener)) motion_set(180,2);
    } break;            
    
    //Up-Right
    case (5): {
    
        //Check for a path above
        var mypath = collision_rectangle(panel.x+8,panel.y-4,panel.x+8,panel.y-4,obj_mappathparent,0,0);
        if (mypath)
        &amp;&amp; (mypath.visible == false)
            with (instance_create(panel.x,panel.y,obj_opener)) motion_set(90,2);
            
        //Check for a path to the right
        var mypath = collision_rectangle(panel.x+20,panel.y+8,panel.x+20,panel.y+8,obj_mappathparent,0,0);
        if (mypath)
        &amp;&amp; (mypath.visible == false)
            with (instance_create(panel.x,panel.y,obj_opener)) motion_set(0,2);
    } break;            
    
    //Down-Left
    case (6): {
    
        //Check for a path below
        var mypath = collision_rectangle(panel.x+8,panel.y+20,panel.x+8,panel.y+20,obj_mappathparent,0,0);
        if (mypath)
        &amp;&amp; (mypath.visible == false)
            with (instance_create(panel.x,panel.y,obj_opener)) motion_set(270,2);
            
        //Check for a path to the left
        var mypath = collision_rectangle(panel.x-4,panel.y+8,panel.x-4,panel.y+8,obj_mappathparent,0,0);
        if (mypath)
        &amp;&amp; (mypath.visible == false)
            with (instance_create(panel.x,panel.y,obj_opener)) motion_set(180,2);
    } break;
    
    //Down-Right
    case (7): {
    
        //Check for a path below
        var mypath = collision_rectangle(panel.x+8,panel.y+20,panel.x+8,panel.y+20,obj_mappathparent,0,0);
        if (mypath)
        &amp;&amp; (mypath.visible == false)
            with (instance_create(panel.x,panel.y,obj_opener)) motion_set(270,2);
            
        //Check for a path to the right
        var mypath = collision_rectangle(panel.x+20,panel.y+8,panel.x+20,panel.y+8,obj_mappathparent,0,0);
        if (mypath)
        &amp;&amp; (mypath.visible == false)
            with (instance_create(panel.x,panel.y,obj_opener)) motion_set(0,2);
    } break;
    
    //Up-Down
    case (8): {
    
        //Check for a path above
        var mypath = collision_rectangle(panel.x+8,panel.y-4,panel.x+8,panel.y-4,obj_mappathparent,0,0);
        if (mypath)
        &amp;&amp; (mypath.visible == false)
            with (instance_create(panel.x,panel.y,obj_opener)) motion_set(90,2);
            
        //Check for a path below
        var mypath = collision_rectangle(panel.x+8,panel.y+20,panel.x+8,panel.y+20,obj_mappathparent,0,0);
        if (mypath)
        &amp;&amp; (mypath.visible == false)
            with (instance_create(panel.x,panel.y,obj_opener)) motion_set(270,2);  
    } break;
    
    //Left-Right
    case (9): {
    
        //Check for a path to the left
        var mypath = collision_rectangle(panel.x-4,panel.y+8,panel.x-4,panel.y+8,obj_mappathparent,0,0);
        if (mypath)
        &amp;&amp; (mypath.visible == false)
            with (instance_create(panel.x,panel.y,obj_opener)) motion_set(180,2);
            
        //Check for a path to the right
        var mypath = collision_rectangle(panel.x+20,panel.y+8,panel.x+20,panel.y+8,obj_mappathparent,0,0);
        if (mypath)
        &amp;&amp; (mypath.visible == false)
            with (instance_create(panel.x,panel.y,obj_opener)) motion_set(0,2);            
    } break;
    
    //Default (All Directions)
    case (10): {
    
        //Check for a path above
        var mypath = collision_rectangle(panel.x+8,panel.y-4,panel.x+8,panel.y-4,obj_mappathparent,0,0);
        if (mypath)
        &amp;&amp; (mypath.visible == false)
            with (instance_create(panel.x,panel.y,obj_opener)) motion_set(90,2);
    
        //Check for a path below
        var mypath = collision_rectangle(panel.x+8,panel.y+20,panel.x+8,panel.y+20,obj_mappathparent,0,0);
        if (mypath)
        &amp;&amp; (mypath.visible == false)
            with (instance_create(panel.x,panel.y,obj_opener)) motion_set(270,2);
    
        //Check for a path to the left
        var mypath = collision_rectangle(panel.x-4,panel.y+8,panel.x-4,panel.y+8,obj_mappathparent,0,0);
        if (mypath)
        &amp;&amp; (mypath.visible == false)
            with (instance_create(panel.x,panel.y,obj_opener)) motion_set(180,2);
    
        //Check for a path to the right
        var mypath = collision_rectangle(panel.x+20,panel.y+8,panel.x+20,panel.y+8,obj_mappathparent,0,0);
        if (mypath)
        &amp;&amp; (mypath.visible == false)
            with (instance_create(panel.x,panel.y,obj_opener)) motion_set(0,2);
    } break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Open adyacent paths

//Check direction
switch (panel.exitdir) {

    //Up
    case (0): {
    
        //Check for a path above
        var mypath = collision_rectangle(panel.x+8,panel.y-4,panel.x+8,panel.y-4,obj_mappathparent,0,0);
        if (mypath)
        &amp;&amp; (mypath.visible == false)
            with (instance_create(panel.x,panel.y,obj_opener)) motion_set(90,2);
    } break;
    
    //Down
    case (1): {
    
        //Check for a path below
        var mypath = collision_rectangle(panel.x+8,panel.y+20,panel.x+8,panel.y+20,obj_mappathparent,0,0);
        if (mypath)
        &amp;&amp; (mypath.visible == false)
            with (instance_create(panel.x,panel.y,obj_opener)) motion_set(270,2);
    } break;
    
    //Left
    case (2): {
    
        //Check for a path to the left
        var mypath = collision_rectangle(panel.x-4,panel.y+8,panel.x-4,panel.y+8,obj_mappathparent,0,0);
        if (mypath)
        &amp;&amp; (mypath.visible == false)
            with (instance_create(panel.x,panel.y,obj_opener)) motion_set(180,2);
    } break;
    
    //Right
    case (3): {
    
        //Check for a path to the right
        var mypath = collision_rectangle(panel.x+20,panel.y+8,panel.x+20,panel.y+8,obj_mappathparent,0,0);
        if (mypath)
        &amp;&amp; (mypath.visible == false)
            with (instance_create(panel.x,panel.y,obj_opener)) motion_set(0,2);
    } break;
    
    //Up-Left
    case (4): {
    
        //Check for a path above
        var mypath = collision_rectangle(panel.x+8,panel.y-4,panel.x+8,panel.y-4,obj_mappathparent,0,0);
        if (mypath)
        &amp;&amp; (mypath.visible == false)
            with (instance_create(panel.x,panel.y,obj_opener)) motion_set(90,2);
            
        //Check for a path to the left
        var mypath = collision_rectangle(panel.x-4,panel.y+8,panel.x-4,panel.y+8,obj_mappathparent,0,0);
        if (mypath)
        &amp;&amp; (mypath.visible == false)
            with (instance_create(panel.x,panel.y,obj_opener)) motion_set(180,2);
    } break;            
    
    //Up-Right
    case (5): {
    
        //Check for a path above
        var mypath = collision_rectangle(panel.x+8,panel.y-4,panel.x+8,panel.y-4,obj_mappathparent,0,0);
        if (mypath)
        &amp;&amp; (mypath.visible == false)
            with (instance_create(panel.x,panel.y,obj_opener)) motion_set(90,2);
            
        //Check for a path to the right
        var mypath = collision_rectangle(panel.x+20,panel.y+8,panel.x+20,panel.y+8,obj_mappathparent,0,0);
        if (mypath)
        &amp;&amp; (mypath.visible == false)
            with (instance_create(panel.x,panel.y,obj_opener)) motion_set(0,2);
    } break;            
    
    //Down-Left
    case (6): {
    
        //Check for a path below
        var mypath = collision_rectangle(panel.x+8,panel.y+20,panel.x+8,panel.y+20,obj_mappathparent,0,0);
        if (mypath)
        &amp;&amp; (mypath.visible == false)
            with (instance_create(panel.x,panel.y,obj_opener)) motion_set(270,2);
            
        //Check for a path to the left
        var mypath = collision_rectangle(panel.x-4,panel.y+8,panel.x-4,panel.y+8,obj_mappathparent,0,0);
        if (mypath)
        &amp;&amp; (mypath.visible == false)
            with (instance_create(panel.x,panel.y,obj_opener)) motion_set(180,2);
    } break;
    
    //Down-Right
    case (7): {
    
        //Check for a path below
        var mypath = collision_rectangle(panel.x+8,panel.y+20,panel.x+8,panel.y+20,obj_mappathparent,0,0);
        if (mypath)
        &amp;&amp; (mypath.visible == false)
            with (instance_create(panel.x,panel.y,obj_opener)) motion_set(270,2);
            
        //Check for a path to the right
        var mypath = collision_rectangle(panel.x+20,panel.y+8,panel.x+20,panel.y+8,obj_mappathparent,0,0);
        if (mypath)
        &amp;&amp; (mypath.visible == false)
            with (instance_create(panel.x,panel.y,obj_opener)) motion_set(0,2);
    } break;
    
    //Up-Down
    case (8): {
    
        //Check for a path above
        var mypath = collision_rectangle(panel.x+8,panel.y-4,panel.x+8,panel.y-4,obj_mappathparent,0,0);
        if (mypath)
        &amp;&amp; (mypath.visible == false)
            with (instance_create(panel.x,panel.y,obj_opener)) motion_set(90,2);
            
        //Check for a path below
        var mypath = collision_rectangle(panel.x+8,panel.y+20,panel.x+8,panel.y+20,obj_mappathparent,0,0);
        if (mypath)
        &amp;&amp; (mypath.visible == false)
            with (instance_create(panel.x,panel.y,obj_opener)) motion_set(270,2);  
    } break;
    
    //Left-Right
    case (9): {
    
        //Check for a path to the left
        var mypath = collision_rectangle(panel.x-4,panel.y+8,panel.x-4,panel.y+8,obj_mappathparent,0,0);
        if (mypath)
        &amp;&amp; (mypath.visible == false)
            with (instance_create(panel.x,panel.y,obj_opener)) motion_set(180,2);
            
        //Check for a path to the right
        var mypath = collision_rectangle(panel.x+20,panel.y+8,panel.x+20,panel.y+8,obj_mappathparent,0,0);
        if (mypath)
        &amp;&amp; (mypath.visible == false)
            with (instance_create(panel.x,panel.y,obj_opener)) motion_set(0,2);            
    } break;
    
    //Default (All Directions)
    case (10): {
    
        //Check for a path above
        var mypath = collision_rectangle(panel.x+8,panel.y-4,panel.x+8,panel.y-4,obj_mappathparent,0,0);
        if (mypath)
        &amp;&amp; (mypath.visible == false)
            with (instance_create(panel.x,panel.y,obj_opener)) motion_set(90,2);
    
        //Check for a path below
        var mypath = collision_rectangle(panel.x+8,panel.y+20,panel.x+8,panel.y+20,obj_mappathparent,0,0);
        if (mypath)
        &amp;&amp; (mypath.visible == false)
            with (instance_create(panel.x,panel.y,obj_opener)) motion_set(270,2);
    
        //Check for a path to the left
        var mypath = collision_rectangle(panel.x-4,panel.y+8,panel.x-4,panel.y+8,obj_mappathparent,0,0);
        if (mypath)
        &amp;&amp; (mypath.visible == false)
            with (instance_create(panel.x,panel.y,obj_opener)) motion_set(180,2);
    
        //Check for a path to the right
        var mypath = collision_rectangle(panel.x+20,panel.y+8,panel.x+20,panel.y+8,obj_mappathparent,0,0);
        if (mypath)
        &amp;&amp; (mypath.visible == false)
            with (instance_create(panel.x,panel.y,obj_opener)) motion_set(0,2);
    } break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Remember the player's last position in the map

//If the map position is going to be changed
if (global.pipetype == 2) {

    //Replace maps
    ds_map_replace(global.mapscreen,"mapx", global.pipex);
    ds_map_replace(global.mapscreen,"mapy", global.pipey);
    
    //Reset pipetype variable
    global.pipetype = 0;
}

//Otherwise, stay in place
else {
    
    ds_map_replace(global.mapscreen,"mapx", x);
    ds_map_replace(global.mapscreen,"mapy", y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the player display some arrows

//Check for a panel
temp = collision_point(x,y+8,obj_maplevel,0,0);

//Check for a path above
var mypath_u = collision_rectangle(x+8,y-4,x+8,y-4,obj_mappathparent,0,0);
if (mypath_u)
&amp;&amp; (mypath_u.visible) {

    //Draw secret path if it exists
    if (temp)
    &amp;&amp; (temp.exitalt == 0)
        draw_sprite_ext(spr_mapmario_arrows_secret,anim,x+8,y-12,1,1,90,c_white,1);
    else
        draw_sprite_ext(spr_mapmario_arrows,anim,x+8,y-12,1,1,90,c_white,1);
}
        
//Check for a path below
var mypath_d = collision_rectangle(x+8,y+20,x+8,y+20,obj_mappathparent,0,0);
if (mypath_d)
&amp;&amp; (mypath_d.visible) {

    //Draw secret path if it exists
    if (temp)
    &amp;&amp; (temp.exitalt == 1)
        draw_sprite_ext(spr_mapmario_arrows_secret,anim,x+8,y+20,1,1,270,c_white,1);
    else
        draw_sprite_ext(spr_mapmario_arrows,anim,x+8,y+20,1,1,270,c_white,1);
}
    
//Check for a path to the left
var mypath_l = collision_rectangle(x-8,y+8,x-8,y+8,obj_mappathparent,0,0);
if (mypath_l)
&amp;&amp; (mypath_l.visible) {

    //Draw secret path if it exists
    if (temp)
    &amp;&amp; (temp.exitalt == 2)
        draw_sprite_ext(spr_mapmario_arrows_secret,anim,x-8,y+4,1,1,180,c_white,1);
    else
        draw_sprite_ext(spr_mapmario_arrows,anim,x-8,y+4,1,1,180,c_white,1);
}
        
//Check for a path to the right
var mypath_r = collision_rectangle(x+24,y+8,x+24,y+8,obj_mappathparent,0,0);
if (mypath_r)
&amp;&amp; (mypath_r.visible) {

    //Draw secret path if it exists
    if (temp)
    &amp;&amp; (temp.exitalt == 3)
        draw_sprite_ext(spr_mapmario_arrows_secret,anim,x+24,y+4,1,1,0,c_white,1);
    else
        draw_sprite_ext(spr_mapmario_arrows,anim,x+24,y+4,1,1,0,c_white,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Manage Star Coins

//Save star coins if the level has been beaten
if (global.clear &gt; 0) {

    for (var i = 0; i &lt; 3; i++) {
    
        if (ds_map_find_value(global.sc[i],global.level) &gt; 0) 
        &amp;&amp; (ds_map_find_value(global.sc[i],global.level) &lt; 3) {
        
            //Save it forever
            ds_map_replace(global.sc[i],global.level,3);
            
            //Increment star counter
            global.starcoins++;
        }
    }
}

//Otherwise, do not save them unless a checkpoint was reached.
else {

    for (var i = 0; i &lt; 3; i++) {
    
        if (ds_map_find_value(global.sc[i],global.level) &gt; 0) 
        &amp;&amp; (ds_map_find_value(global.sc[i],global.level) &lt; 2) //This line will check if a checkpoint was hit.
            ds_map_replace(global.sc[i],global.level,0);
    }
}

//Delete all cards
if (global.card[0] != -1) 
&amp;&amp; (global.card[1] != -1) 
&amp;&amp; (global.card[2] != -1) {

    for (var j = 0; j &lt; 3; j++)
        global.card[j] = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the player

//Show arrows if stopped
if (speed == 0) 
&amp;&amp; (ready == 0)
&amp;&amp; (letsgo == 0)
    event_user(0);
    
//If the player completed a level or died in the map...
if (ready &gt; 0)
    draw_sprite_ext(spr_mapmario_events,0,round(x)+8,round(y)-4,1,1,0,c_white,1);
    
//Otherwise
else {
    
    //If the player is riding a yoshi
    if (global.mount == 1) {
    
        //Set the palette for yoshi
        pal_swap_set(spr_palette_yoshi, global.mountcolour);
        
        //If the player decided the level
        if (image_index == 8) {
        
            if (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_swim,0,0))    
                draw_sprite_ext(spr_mapmario_yoshi_water,8,round(x)+8,round(y),xscale,1,0,c_white,1);
            else
                draw_sprite_ext(spr_mapmario_yoshi,8,round(x)+8,round(y)-4,xscale,1,0,c_white,1);
        }
    
        //If the player is climbing
        else if (image_index == 6)
            draw_sprite_ext(spr_mapmario_yoshi,image_index+frame,round(x)+8,round(y)-4,xscale,1,0,c_white,1);
        
        //Otherwise
        else {
        
            //If the player is in contact with water, draw him inside water
            if (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_swim,0,0))
                draw_sprite_ext(spr_mapmario_yoshi_water,image_index+frame,round(x)+8,round(y),xscale,1,0,c_white,1);
            
            //Otherwise
            else
                draw_sprite_ext(spr_mapmario_yoshi,image_index+frame,round(x)+8,round(y)-4,xscale,1,0,c_white,1);
        }
        
        //Reset palette
        pal_swap_reset();
    }
    
    //Otherwise, if the player is not riding a yoshi
    else {
        
        //If the player decided the level
        if (image_index == 8) {
        
            if (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_swim,0,0))    
                draw_sprite_ext(spr_mapmario_water,8,round(x)+8,round(y),xscale,1,0,c_white,1);
            else
                draw_sprite_ext(spr_mapmario,8,round(x)+8,round(y)-4,xscale,1,0,c_white,1);
        }
    
        //If the player is climbing
        else if (image_index == 6)
            draw_sprite_ext(spr_mapmario,image_index+frame,round(x)+8,round(y)-4,xscale,1,0,c_white,1);
        
        //Otherwise
        else {
        
            //If the player is in contact with water, draw him inside water
            if (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_swim,0,0))
                draw_sprite_ext(spr_mapmario_water,image_index+frame,round(x)+8,round(y),xscale,1,0,c_white,1);
            
            //Otherwise
            else
                draw_sprite_ext(spr_mapmario,image_index+frame,round(x)+8,round(y)-4,xscale,1,0,c_white,1);
        }    
    }
    
    //Show if the player has the p-meter
    if (global.pwing)
    &amp;&amp; (speed == 0)
        draw_sprite_ext(spr_mapmario_p, 0, x+8, y-12, 1, 1, 0, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
