<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_marker_event</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Gatete Mario Engine: Anniversary Edition Persistent Object

/*
//      IMPORTANT NOTE:
//      If the game detects more than one instance of this object, the game will return an error and it will become unplayable.
//      
//      Please, double check every level before releasing your game.
*/

//Initialize palette system
pal_swap_init_system(shd_palette_swapper);

//Turn enemies into coins? (0: Disabled / 1: Enabled)
global.enemy_to_coin = 1;

//Flight time (In seconds, how much the player should be able to fly.)
global.flighttime = 4;

//Health Mode (0: Disabled / 1: Enabled)
global.healthmode = 0;

//Cat climb time (In seconds, how much the player should be able to climb up a wall.)
global.cattime = 3;

//Current file
global.file = 0;

//Game width
global.gw = 384;

//Game height
global.gh = 216;

//Initialize global variables
init_globals();
got = 0;
total = 0;

//Lives to give
addlives = 0;

//Screenshot of the game, if it exists
back = -1;

//Screen shaking
port_x = 0;
port_y = 0;

//Is the game being restarted
restart = 0;

//Show the FPS?
showfps = false;

//Gamepad variables
gamepad_check = 0;
message = "";

//Gamepad left stick
leftstick[0] = 0;
leftstick[1] = 0;
leftstick[2] = 0;
leftstick[3] = 0;

//Epsilon value for floating point numbers
math_set_epsilon(0.00001);

//Data structure for picked up 3up moons
global.moons = ds_map_create();

//Regular Numbers
global.numbers_w = font_add_sprite_ext(spr_numbers,"0123456789",0,-1);

//Regular Gold Numbers
global.numbers_g = font_add_sprite_ext(spr_numbersgold,"0123456789",0,-1);

//Regular Black Numbers
global.numbers_b = font_add_sprite_ext(spr_numbersblack,"0123456789",0,-1);

//Message Font
global.font_message = font_add_sprite(spr_hud_font,ord('!'),0,0);

//Interface font
global.font_interface = font_add_sprite(spr_hud_font_interface,ord('!'),0,0);

//Disable application surface automatic drawing
application_surface_draw_enable(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the screen shake when certain sounds are playing.

if (audio_is_playing(snd_thwomp)) {
    
    //Repeat
    alarm[11] = 1;    
    
    //Shake the screen...    
    port_x = random_range(4,-4);
    port_y = random_range(4,-4);
}
else {

    port_x = 0;
    port_y = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop displaying message

message = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Give spare lives left

if (addlives &gt; 0) {

    //If lives are maxed out, do not give more
    if (lives == 99) {
    
        addlives = 0;
        exit;
    }
    else {
    
        //Play '1up' sound
        audio_stop_sound(snd_1up);
        audio_play_sound(snd_1up, 0, false);
    
        //Add a life
        lives++;
        
        //Subtract a spare life
        addlives--;
        
        //Continue
        alarm[2] = 30;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delay applying settings

//Apply fullscreen
window_set_fullscreen(fullscreen);

//Apply filtering and VSync
event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Center the window

window_center();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle gamepad key actions

//If the gamepad variable exists
if (variable_global_exists("gamepad")) {

    //If there's a gamepad active
    if (global.gamepad) {
    
        //Left Stick - Up
        if (leftstick[0] = 0)
        &amp;&amp; (gamepad_axis_value(gamepad_input, gp_axislv) &lt;= -0.5) {
        
            leftstick[0] = 1;
            keyboard_key_press(global.upkey);
        }
        else if (leftstick[0] == 1)
        &amp;&amp; (gamepad_axis_value(gamepad_input, gp_axislv) &gt; -0.5) {
        
            leftstick[0] = 0;
            keyboard_key_release(global.upkey);
        }
        
        //Left Stick - Down
        if (leftstick[1] = 0)
        &amp;&amp; (gamepad_axis_value(gamepad_input, gp_axislv) &gt;= 0.5) {
        
            leftstick[1] = 1;
            keyboard_key_press(global.downkey);
        }
        else if (leftstick[1] == 1)
        &amp;&amp; (gamepad_axis_value(gamepad_input, gp_axislv) &lt; 0.5) {
        
            leftstick[1] = 0;
            keyboard_key_release(global.downkey);
        }
        
        //Left Stick - Left
        if (leftstick[2] = 0)
        &amp;&amp; (gamepad_axis_value(gamepad_input, gp_axislh) &lt;= -0.5) {
        
            leftstick[2] = 1;
            keyboard_key_press(global.leftkey);
        }
        else if (leftstick[2] == 1)
        &amp;&amp; (gamepad_axis_value(gamepad_input, gp_axislh) &gt; -0.5) {
        
            leftstick[2] = 0;
            keyboard_key_release(global.leftkey);
        }
        
        //Left Stick - Right
        if (leftstick[3] = 0)
        &amp;&amp; (gamepad_axis_value(gamepad_input, gp_axislh) &gt;= 0.5) {
        
            leftstick[3] = 1;
            keyboard_key_press(global.rightkey);
        }
        else if (leftstick[3] == 1)
        &amp;&amp; (gamepad_axis_value(gamepad_input, gp_axislh) &lt; 0.5) {
        
            leftstick[3] = 0;
            keyboard_key_release(global.rightkey);
        }
        
        //Up on d-pad
        if (gamepad_button_check_pressed(gamepad_input, gp_padu))
            keyboard_key_press(global.upkey);
        else if (gamepad_button_check_released(gamepad_input, gp_padu))
            keyboard_key_release(global.upkey);
    
        //Down on d-pad
        if (gamepad_button_check_pressed(gamepad_input, gp_padd))
            keyboard_key_press(global.downkey);
        else if (gamepad_button_check_released(gamepad_input, gp_padd))
            keyboard_key_release(global.downkey);
    
        //Left on d-pad
        if (gamepad_button_check_pressed(gamepad_input, gp_padl))
            keyboard_key_press(global.leftkey);
        else if (gamepad_button_check_released(gamepad_input, gp_padl))
            keyboard_key_release(global.leftkey);
    
        //Right on d-pad
        if (gamepad_button_check_pressed(gamepad_input, gp_padr))
            keyboard_key_press(global.rightkey);
        else if (gamepad_button_check_released(gamepad_input, gp_padr))
            keyboard_key_release(global.rightkey);
            
        //A Button / B Button
        //X Button / O Button (Shift)
        if ((gamepad_button_check(gamepad_input, gp_face1)) || (gamepad_button_check(gamepad_input, gp_face2)))
            keyboard_key_press(global.shiftkey);
        else 
            keyboard_key_release(global.shiftkey);
        
        //X Button / Y Button 
        //Square Button / Triangle Button (Control)
        if ((gamepad_button_check(gamepad_input, gp_face3)) || (gamepad_button_check(gamepad_input, gp_face4)))
            keyboard_key_press(global.controlkey);
        else
            keyboard_key_release(global.controlkey);
        
        //Start Key
        if (gamepad_button_check(gamepad_input, gp_start))
            keyboard_key_press(global.enterkey);
        else
            keyboard_key_release(global.enterkey);
        
        //Select Key
        if (gamepad_button_check(gamepad_input, gp_select)) 
            keyboard_key_press(global.spacekey);
        else 
            keyboard_key_release(global.spacekey);     
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle various in-game variables

//Calculate percentage
got = (ds_map_size(global.exits) + ds_map_size(global.exits2)) + global.starcoins + (global.palaceyellow + global.palacegreen + global.palacered + global.palaceblue);
total = cs_exitstotal + global.levelmax*3 + (1 + 1 + 1 + 1);
global.gameclear = floor(got/total*100);

//Make sure lives don't go over 99
if (lives &gt; 99) 
    lives = 99;

//Make sure score don't go over 9999999990
if (score &gt; 999999990) 
    score = 999999990;
    
//Make the screen shake when the 'Thwomp' sound plays
if (!audio_is_playing(snd_thwomp))
    alarm[11] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle all of the hot keys

//Quit the game when ALT+F4 are pressed.
if (keyboard_check_pressed(vk_f4))
    game_end();
    
//Restart the game when ALT+R are pressed.
else if (keyboard_check_pressed(ord('R'))) {
    
    //Reset all global variables
    init_globals();    
    
    //Restart?
    restart = 1;
    
    //Stop all audio
    audio_stop_all();
    
    //Go to disclaimer screen
    if (instance_number(obj_fadein) == 0)    
        with (instance_create(0,0,obj_fadein)) target = rm_disclaimer;
}

//Change window size
else if (keyboard_check_pressed(ord('W'))) {

    //If the window is not set to fullscreen
    if (fullscreen == false) {

        //Change filter
        filter++;
        
        //Check if the filter is the second one
        if (filter == 3) {
        
            //Set default filter
            filter = 0;
            
            //Set fullscreen variable
            fullscreen = true;
            
            //Set fullscreen mode
            window_set_fullscreen(true);                                                             
        }
    }
    
    //Otherwise, set it to windowed mode
    else {
    
        //Change fullscreen variable
        fullscreen = false;
    
        //Set windowed mode
        window_set_fullscreen(false);             
    }
    
    //Apply settings
    event_user(0);       
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if the gamepad is connected / disconnected

//Gamepad type
gamepad_input = 0;

//Check first if the variable exists
if (variable_global_exists("gamepad")) {
    
    //Update gamepad state
    global.gamepad = gamepad_is_connected(gamepad_input);
    
    //Show a temporary message if the gamepad has been connected
    if (gamepad_check == 0) {
    
        //If a gamepad is connected
        if (global.gamepad == 1) {
        
            //Show message
            message = "Gamepad Connected";
            
            //Hide it
            alarm[3] = 30;
            
            //Let the game know it
            gamepad_check = 1;
        }
    }
    
    //Otherwise
    else {
    
        //If a gamepad is connected
        if (global.gamepad == 0) {
        
            //Show message
            message = "Gamepad Disconnected";
            
            //Hide it
            alarm[3] = 30;
            
            //Let the game know it
            gamepad_check = 0;
        }    
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up the screen to be displayed

//Temporary variable
var s;

//Normal
if (filter = 0)
    s = 1;

//HQ2X
else if (filter = 1)
    s = 2;

//HQ4X
else if (filter = 2)
    s = 3;

//Reset display
display_reset(0,vsync);

//Set up the window
window_set_size(global.gw*s,global.gh*s);

//Set up the display
display_set_gui_size(global.gw*s,global.gh*s);

//Center the window
alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///If the game is givin' out extra lives, give them at once after exiting a room

if (addlives &gt; 0) {

    lives += addlives;
    addlives = 0;
    alarm[2] = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set view parameters

//Make view 0 visible if not visible
view_visible[0] = true;

//Enable views if not enabled
view_enabled = true;

//Update wport
view_wport[0] = global.gw;

//Update hport
view_hport[0] = global.gh;

//Update wview
view_wview[0] = global.gw;

//Update hview
view_hview[0] = global.gh; 

//Update vborder
view_vborder[0] = global.gh/2;

//Update hborder
if (instance_exists(obj_levelcontrol)) 
    view_hborder[0] = (global.gw/2)-8;
else 
    view_hborder[0] = global.gw/2;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check various in-game values

//Make sure to give the player the big state if health is greater than 1
if (global.healthmode) {

    if (health &gt; 1)
    &amp;&amp; (global.powerup = cs_small)
        global.powerup = cs_big;
}

//Allow restart
restart = 0;

//Check if all coins have been collected
if (global.starcoins == (global.levelmax*3))
    global.gameclear = 1;
else
    global.gameclear = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save Keys + Fullscreen + Window size + VSync Settings

keyboard_key_release(vk_control)
keyboard_key_release(global.controlkey)

//Open the file
var file = file_text_open_write("settings.dat");

//Save fullscreen settings
file_text_write_string(file,string(fullscreen));
file_text_writeln(file);

//Save filtering settings
file_text_write_string(file,string(filter));
file_text_writeln(file);

//Save vsync settings
file_text_write_string(file,string(vsync));
file_text_writeln(file);

//Save reserve item setting
file_text_write_string(file,string(global.reservedrop))
file_text_writeln(file);

//Save control key
file_text_write_string(file,string(real(global.controlkey)));
file_text_writeln(file);

//Save shift key
file_text_write_string(file,string(real(global.shiftkey)));
file_text_writeln(file);

//Save space key
file_text_write_string(file,string(real(global.spacekey)));
file_text_writeln(file);

//Save enter key
file_text_write_string(file,string(real(global.enterkey)));
file_text_writeln(file);

//Save up key
file_text_write_string(file,string(real(global.upkey)));
file_text_writeln(file);

//Save down key
file_text_write_string(file,string(real(global.downkey)));
file_text_writeln(file);

//Save left key
file_text_write_string(file,string(real(global.leftkey)));
file_text_writeln(file);

//Save right key
file_text_write_string(file,string(real(global.rightkey)));

//Close the file
file_text_close(file);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load Keys + Fullscreen + Window size + VSync Settings

//If the 'settings.dat' file exist.
if (file_exists("settings.dat")) {

    //Open the file
    var file = file_text_open_read("settings.dat");

    //Set fullscreen mode based on the read value
    fullscreen = real(file_text_read_string(file));
    file_text_readln(file);

    //Set filtering mode based on the read value
    filter = real(file_text_read_string(file));
    file_text_readln(file);

    //Set vsync based on the read value
    vsync = real(file_text_read_string(file));
    file_text_readln(file);
    
    //Set reserve auto-drop based on the read value
    global.reservedrop = real(file_text_read_string(file))
    file_text_readln(file);
    
    //Set key assigned to 'Control'
    global.controlkey = real(file_text_read_string(file));
    file_text_readln(file);

    //Set key assigned to 'Shift'
    global.shiftkey = real(file_text_read_string(file));
    file_text_readln(file);

    //Set key assigned to 'Space'
    global.spacekey = real(file_text_read_string(file));
    file_text_readln(file);
    
    //Set key assigned to 'Enter'
    global.enterkey = real(file_text_read_string(file));
    file_text_readln(file);
    
    //Set key assigned to 'Up'
    global.upkey = real(file_text_read_string(file));
    file_text_readln(file);
    
    //Set key assigned to 'Down'
    global.downkey = real(file_text_read_string(file));
    file_text_readln(file);
    
    //Set key assigned to 'Left'
    global.leftkey = real(file_text_read_string(file));
    file_text_readln(file);
    
    //Set key assigned to 'Right'
    global.rightkey = real(file_text_read_string(file));

    //Close the file
    file_text_close(file);
}
else {

    //Fullscreen is off by default
    fullscreen = 0;

    //Set the window to double of it's original size
    filter = 2;

    //VSync is off by default
    vsync = 0;
    
    //Control key
    global.controlkey = vk_control;
    
    //Shift key
    global.shiftkey = vk_shift;
    
    //Space key
    global.spacekey = vk_space;
    
    //Enter key
    global.enterkey = vk_enter;
    
    //Up key
    global.upkey = vk_up;
    
    //Down key
    global.downkey = vk_down;
    
    //Left key
    global.leftkey = vk_left;
    
    //Right key
    global.rightkey = vk_right;
}

//Apply loaded settings
alarm[1] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deals with the application surface, window size, and fading.

//Disable alpha blending
draw_enable_alphablend(0);

//Draw a rectangle
draw_rectangle_colour(0, 0, global.gw*(filter+1), global.gh*(filter+1), c_black, c_black, c_black, c_black, 0);

//Draw the application surface
draw_surface_stretched(application_surface, port_x*(filter+1), port_y*(filter+1),global.gw*(filter+1), global.gh*(filter+1));

//Enable alpha blending
draw_enable_alphablend(1);

//Set 'Interface' font
draw_set_font(global.font_interface);

//Draw 'FPS' if below 60 and FPS showing is on
if (showfps == true)
    draw_text_colour(2, 2, string("FPS: ") + string(fps), c_white, c_white, c_white, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw background if the window has not focus

//If the background exists
if (background_exists(back)) {

    //Disable alpha blending.
    draw_enable_alphablend(0);
    
    //Draw the screenshot
    draw_background(back, view_xview[0], view_yview[0]);
    
    //Enable alpha blending.
    draw_enable_alphablend(1);
}

//Display message
if (message != "")
    draw_text(2, 2, string(message));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Close the game

game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
