<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_warpmask</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_warpmask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The player when it's running on walls or ceilings

//Destroy spinner object
with (obj_spinner) instance_destroy();

//Make player invisible
with (obj_playerparent) {

    visible = false;
    disablecontrol = true;
}

//Sprite
sprite_index = scr_mario_run();

//Angle
angle = 0;

//Speed
speed = obj_playerparent.walkspeed+0.4;

//Direction
direction = 90;

//Whether the player can turn
ready = false;

//Set angle
alarm[0] = 4;

//Allow turn
alarm[1] = 16;

//Default direction
//-1: Counter clockwise
//1: Clockwise
xscale = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Prepare the player to stop wallrunning

///Make the player visible and enable it's controls
with (obj_playerparent) {

    visible = 1;
    disablecontrol = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Allow turning

ready = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set angle

angle = direction;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wallrunner logic

//If the player does not exist...
if (!instance_exists(obj_playerparent))

//...or the player is transforming
|| (instance_exists(obj_player_transform)) {

    //Destroy
    instance_destroy();
    
    //Exit
    exit;
}

//Update sprite
sprite_index = scr_mario_run();

//Animation
image_speed = 0.4;

//Snap player
obj_playerparent.xspeed = 0;
obj_playerparent.yspeed = 0;
obj_playerparent.x = x;
obj_playerparent.y = y;

//Jumping
if (keyboard_check_pressed(global.shiftkey)) {

    //Play 'Jump' sound
    audio_play_sound(snd_jump, 0, false);
    
    //If the player is running up a wall, jump off the wall
    if (direction == 90) {

        with (obj_playerparent) {
        
            yspeed = other.vspeed;
            xspeed = -3*other.xscale;
            xscale = -xscale;
            angle = 45;
            alarm[4] = 8;
        }
    }
    
    //If the player is running down a wall, jump off the wall
    else if (direction == 270) {
    
        with (obj_playerparent) {
        
            yspeed = other.vspeed;
            xspeed = 3*other.xscale;
            xscale = -xscale;
            angle = 315;
            alarm[4] = 8;
        }
    }
    
    //If the player is running on the ceiling, jump off
    else {
    
        with (obj_playerparent) {
        
            xspeed = other.hspeed;
            yspeed = 3;
            angle = 180-(45*other.xscale);
            alarm[4] = 8;
        }
    }
    
    //Destroy
    instance_destroy();
}

//If the player is running in a clockwise movement
else if (xscale &gt; 0) {

    //If both 'Control' and 'Right' are held
    if ((keyboard_check(global.controlkey)) &amp;&amp; (keyboard_check(vk_right)))
        speed += .1;
    else
        speed -= .05;
        
    //If the player is running upwards
    if (direction == 90) {
    
        //If the player can turn and there's not a wall at the right
        if (ready)
        &amp;&amp; (!collision_rectangle(bbox_right+4,bbox_top,bbox_right+8,bbox_bottom,obj_solid,0,0)) {
        
            //With the player
            with (obj_playerparent) {
            
                xspeed = other.speed;
                angle = 45;
                alarm[4] = 4;
            }
            
            //Destroy
            instance_destroy();
        }
    }
    
    //Otherwise, if the player is running on a ceiling
    else if (direction == 180) {
    
        //If the player can turn and there's not a ceiling in place
        if (ready)
        &amp;&amp; (!collision_rectangle(bbox_left-8,bbox_top,bbox_left-4,bbox_bottom,obj_solid,0,0)) {
        
            //With the player
            with (obj_playerparent) {
            
                xspeed = other.speed*-1;
                angle = 135;
                alarm[4] = 4;
            }
            
            //Destroy
            instance_destroy();
        }
        
        //Check for a inverted right wall triangle
        var col = collision_line(bbox_left,y-20,bbox_right,y-16,obj_walltriangle_ir,0,0);
        if (col) {
        
            //Snap on triangle
            x = col.x-15;
            y = col.y+15;
            
            //Direction
            direction = 90;
            
            //Disallow turn
            ready = 0;
            
            //Angle
            angle = 135;
            
            //Set angle
            alarm[0] = 4;
            
            //Allow turn
            alarm[1] = 16;
        }
    }
    
    //If the player is running downwards
    else if (direction == 270) {
    
        //If the player can turn and there's no wall in place
        if (ready)
        &amp;&amp; (!collision_rectangle(bbox_left-8,bbox_top,bbox_left-4,bbox_bottom,obj_solid,0,0)) {
        
            //With the player
            with (obj_playerparent) {
            
                xspeed = other.speed*-1;
                angle = 315;
                alarm[4] = 4;
            }
            
            //Destroy
            instance_destroy();
        }
        
        //Check for a inverted left wall triangle
        var col = collision_line(x-20,y,x-16,y,obj_walltriangle_il,0,0);
        if (col) {
        
            //Snap on triangle
            x = col.x+31;
            y = col.y+31;
            
            //Direction
            direction = 180;
            
            //Disallow turn
            ready = false;
            
            //Angle
            angle = 225;
            
            //Set angle
            alarm[0] = 4;
            
            //Allow turn
            alarm[1] = 24;
        }
        
        //Check for a left wall triangle
        var col = collision_rectangle(x-16,y,x,y,obj_walltriangle_l,0,0);
        if (col)
        &amp;&amp; (ready) {
    
            //Snap onto triangle
            x = col.xstart+15;
            y = col.ystart;
        
            //With the player
            with (obj_playerparent) {
            
                xspeed = other.speed;
                angle = 315;
                alarm[4] = 4;
            }
            
            //Destroy
            instance_destroy();        
        }
    }
}

//If the player is running on a counter-clockwise movement
else if (xscale &lt; 0) {

    //If both 'Control' and 'Left' are held
    if ((keyboard_check(global.controlkey)) &amp;&amp; (keyboard_check(global.leftkey)))
        speed += .1;
    else
        speed -= .05;
        
    //If the player is running upwards
    if (direction == 90) {
    
        //If the player can turn and there's not a wall at the right
        if (ready)
        &amp;&amp; (!collision_rectangle(bbox_left-8,bbox_top,bbox_left-4,bbox_bottom,obj_solid,0,0)) {
        
            //With the player
            with (obj_playerparent) {

                xspeed = other.speed*-1;
                angle = 315;
                alarm[4] = 4;
            }
            
            //Destroy
            instance_destroy();
        }
    }
    
    //Otherwise, if the player is running on a ceiling
    else if (direction == 0) {
    
        //If the player can turn and there's not a ceiling in place
        if (ready)
        &amp;&amp; (!collision_rectangle(bbox_left,bbox_top-5,bbox_right,bbox_top-1,obj_solid,0,0)) {
        
            //With the player
            with (obj_playerparent) {
            
                xspeed = other.speed;
                angle = 45;
                alarm[4] = 4;
            }
            
            //Destroy
            instance_destroy();
        }
        
        //Check for a inverted right wall triangle
        var col = collision_line(x,y-20,x,y-16,obj_walltriangle_il,0,0);
        if (col) {
        
            //Snap on triangle
            x = col.x+31;
            y = col.y;
            
            //Direction
            direction = 90;
            
            //Disallow turn
            ready = 0;
            
            //Angle
            angle = 45;
            
            //Set angle
            alarm[0] = 4;
            
            //Allow turn
            alarm[1] = 16;
        }
    }
    
    //If the player is running downwards
    else if (direction == 270) {
    
        //If the player can turn and there's no wall in place
        if (ready)
        &amp;&amp; (!collision_rectangle(bbox_right+4,bbox_top,bbox_right+8,bbox_bottom,obj_solid,0,0)) {
        
            //With the player
            with (obj_playerparent) {
            
                xspeed = other.speed;
                angle = 135;
                alarm[4] = 4;
            }
            
            //Destroy
            instance_destroy();
        }
        
        //Check for a inverted left wall triangle
        var col = collision_line(x+16,y,x+20,y,obj_walltriangle_ir,0,0);
        if (col) {
        
            //Snap on triangle
            x = col.x-15;
            y = col.y+31;
            
            //Direction
            direction = 0;
            
            //Disallow turn
            ready = false;

            //Angle
            angle = 315;
            
            //Set angle
            alarm[0] = 4;
            
            //Allow turn
            alarm[1] = 24;
        }
        
        //Check for a right wall triangle
        var col = collision_line(x,y,x+16,y,obj_walltriangle_r,0,0);
        if (col) 
        &amp;&amp; (ready) {
        
            //Snap onto the triangle
            x = col.xstart;
            y = col.ystart;
            
            //With the player
            with (obj_playerparent) {
            
                xspeed = other.speed*-1;
                angle = 225;
                alarm[4] = 4;
            }
        
            //Destroy
            instance_destroy();
        }
    }    
}

//If the player slowsdown or makes contact with a solid
if (speed &lt; (obj_playerparent.walkspeed+0.3)) 
|| ((ready) &amp;&amp; (position_meeting(x,y,obj_solid))) {

    //With the player
    with (obj_playerparent) {
    
        xspeed = other.hspeed;
        yspeed = other.vspeed;
        angle = other.direction-45;
        alarm[4] = 4;
    }
    
    //Destroy
    instance_destroy();
}

//Cap maximum speed
if (speed &gt; obj_playerparent.runspeed)
    speed = obj_playerparent.runspeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_walltriangle_il">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the player turn

//If the player can turn
if (ready) {
    
    //If the player is facing right and it's moving up
    if ((xscale &gt; 0) &amp;&amp; (direction == 180)) {
    
        //Snap onto the triangle
        x = other.xstart+15;
        y = other.ystart+15;
                
        //Direction
        direction = 270;
        
        //Disallow turn
        ready = false;
        
        //Angle
        angle = 225;
        
        //Set angle
        alarm[0] = 4;
        
        //Allow turning
        alarm[1] = 24;     
    }
    
    //Otherwise, if the player is facing left and it's moving to the right.
    else if ((xscale &lt; 0) &amp;&amp; (direction == 90)) {
    
        //Snap onto the triangle
        x = other.xstart+15;
        y = other.ystart+15;
                
        //Direction
        direction = 0;
        
        //Disallow turn
        ready = false;
        
        //Angle
        angle = 315;
        
        //Set angle
        alarm[0] = 4;
        
        //Allow turning
        alarm[1] = 24;     
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_walltriangle_ir">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the player turn

//If the player can turn
if (ready) {

    //If the player is facing right and it's moving up
    if ((xscale &gt; 0) &amp;&amp; (direction == 90)) {
    
        //Snap onto the triangle
        x = other.xstart;
        y = other.ystart+15;
                
        //Direction
        direction = 180;
        
        //Disallow turn
        ready = false;
        
        //Angle
        angle = 135;
        
        //Set angle
        alarm[0] = 4;
        
        //Allow turning
        alarm[1] = 24;        
    }
    
    //Otherwise, if the player is facing left and it's moving to the right.
    else if ((xscale &lt; 0) &amp;&amp; (direction == 0)) {
    
        //Snap onto the triangle
        x = other.xstart;
        y = other.ystart+15;
                
        //Direction
        direction = 270;
        
        //Disallow turn
        ready = false;
        
        //Angle
        angle = 225;
        
        //Set angle
        alarm[0] = 4;
        
        //Allow turning
        alarm[1] = 24;        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the player

//Set the shader
pal_swap_set(spr_palette_mario,obj_playerparent.isflashing);

//Draw player
draw_sprite_ext(sprite_index,-1,round(x),round(y),1,xscale,angle,c_white,obj_playerparent.image_alpha);

//Reset shader
pal_swap_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
