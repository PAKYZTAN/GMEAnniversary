<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_charginchuck</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_deactenemyparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Chargin' Chuck

//How vulnerable is this enemy to various items?
vulnerable = 2;

//How vulnerable is this enemy to the player?
stomp = 4;

//How vulnerable is this enemy to yoshi?
edible = 2;

//Facing direction
xscale = 1;

//Whether the object is swimming
swimming = false;

//Hitpoints
hp = 3;

//Animate
image_speed = 0;

//Make noise when charging
alarm[0] = 6;

//Start moving
alarm[10] = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start moving

//Set the running sprite
sprite_index = spr_charginchuck_walk;

//Animate
image_speed = 0.5;

//Disable friction
friction = 0;

//Play sound
alarm[0] = 6;

//Move towards the player
if (!instance_exists(obj_playerparent))
|| (obj_playerparent.x &lt; x)
    hspeed = -1.75;
else
    hspeed = 1.75;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make noise when charging

//Repeat the process
alarm[0] = 6;

//If chargin, play 'Bump' sound
if (sprite_index == spr_charginchuck_walk)
    audio_play_sound(snd_bump, 0, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Chargin' Chuck logic

//If running or jumping
if (sprite_index == spr_charginchuck_walk) 
|| (sprite_index == spr_charginchuck_jump) {

    //Jump when a wall is reached
    if ((hspeed &lt; 0) &amp;&amp; (collision_rectangle(bbox_left+hspeed*2,bbox_top+4,bbox_left+hspeed*2,bbox_bottom-1,obj_solid,0,0)))
    || ((hspeed &gt; 0) &amp;&amp; (collision_rectangle(bbox_right+hspeed*2,bbox_top+4,bbox_right+hspeed*2,bbox_bottom-1,obj_solid,0,0))) {
    
        //If there's no gravity, hop
        if (gravity == 0) {
        
            //Set the jumping sprite
            sprite_index = spr_charginchuck_jump;
            
            //Do not animate
            image_speed = 0;
            image_index = 0;
            
            //Set the vertical speed
            vspeed = -4.5;
            
            //Boost jump
            y--;
        }
    }
    
    //Move away from walls
    if ((hspeed &lt; 0) &amp;&amp; (collision_rectangle(bbox_left+hspeed,bbox_top+4,bbox_left+hspeed,bbox_bottom-1,obj_solid,0,0)))
        x += 1.75;
    if ((hspeed &gt; 0) &amp;&amp; (collision_rectangle(bbox_right+hspeed,bbox_top+4,bbox_right+hspeed,bbox_bottom-1,obj_solid,0,0)))
        x -= 1.75;    
}

//Floor collision
event_user(4);

//Facing direction
event_user(8);

//Update animation
if (gravity == 0) {

    //If jumping...
    if (sprite_index == spr_charginchuck_jump) {
    
        //Set the running sprite
        sprite_index = spr_charginchuck_walk;
        
        //Animate
        image_speed = 0.5;
        image_index = 1;
    }
    
    //Always charge at the player
    if (instance_exists(obj_playerparent)) {
    
        //If the player managed to get away...
        if (hspeed &lt; 0) &amp;&amp; (obj_playerparent.x &gt; x+32)
        || (hspeed &gt; 0) &amp;&amp; (obj_playerparent.x &lt; x-32) {
        
            //Stop animation
            sprite_index = spr_charginchuck;
            
            //Stop horizontal speed
            hspeed = 0;
            
            //Charge at the player again
            alarm[10] = 32;
        }
    }
}

//Check for a water object
var water = collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_swim,0,0);

//If the object is not underwater and makes contact with water
if (water) 
&amp;&amp; (!swimming) {

    //Make the object go underwater
    swimming = true;
    
    //Stop vertical movement
    gravity = 0;
    if (vspeed &gt; 0)
        vspeed = 0;
}

//Otherwise, if the object is underwater and it's not underwater, end swimming.
else if (!water) 
&amp;&amp; (swimming)
    swimming = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update facing direction

//If not moving
if (hspeed == 0) {

    //If the player does not exist or it's at the left
    if (!instance_exists(obj_playerparent))
    || (obj_playerparent.x &lt; x)
        xscale = -1;
    else
        xscale = 1;    
}

//Otherwise if moving, face towards direction
else
    xscale = 1*sign(hspeed);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Chargin' Chuck stomp event

if (sprite_index != spr_charginchuck_damage) {

    //If the chargin chuck has hp left
    if (hp &gt; 1) {

        //Play 'Hurt' sound
        audio_play_sound(snd_hurt, 0, false);
        
        //Set the damage frame
        sprite_index = spr_charginchuck_damage;
        
        //Animate
        image_speed = 0.15;
        image_index = 0;
        
        //Stop
        hspeed = 0;
        
        //Decrement health
        hp--;
        
        //Deny movement
        alarm[10] = -1;
    }
    
    //Otherwise, get 2000 points and kill
    else {
    
        //Get 2000 points
        with (instance_create((bbox_left+bbox_right)/2-8,y,obj_score)) event_user(6);
        
        //Perform default kill event
        event_inherited();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update animation

//If damaged...
if (sprite_index == spr_charginchuck_damage) {

    //Return to normal
    sprite_index = spr_charginchuck;

    //Stop animation
    image_speed = 0;
    
    //Charge at the player again
    alarm[10] = 60;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
