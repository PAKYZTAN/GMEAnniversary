<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_marker_event</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SMW Balance Lift

//Make it solid
instance_create(xstart,ystart,obj_solid);

//Chainlength
chainlength = 5;

//Direction
direction = 90;

//Speed
dirspd = 0;

//Create the platform
platform = instance_create(x,y,obj_balanceplatform_platform)
platform.creator = id;

//Platform variables
over_y = false;
dx = 0;
dy = 0;
new_x = 0;
new_y = 0;
old_x = 0;
old_y = 0;
    
//Center it
x = xstart+8;
y = ystart+8;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Balance lift logic.

//If there is a passenger on the platform, speed up turning.
if (platform.passenger) {

    //Clockwise
    if (platform.x &lt; self.x) {
    
        //Turn above origin
        if (!over_y) {
        
            //If speed is greater or equal to 0.
            if (dirspd &gt;= 0) {
            
                direct = 1;
                dirspd += 0.03;
            }
            
            //Otherwise, speed it up.
            else if (direct == -1)
                dirspd += 0.015;
        }
        
        //Otherwise, turn below origin.
        else
            dirspd += 0.03;
    }
    
    //Counter Clockwise
    else if (platform.x &gt;= self.x) {
    
        //Turn above origin
        if (!over_y) {
        
            //If speed is lower or equal to 0.
            if (dirspd &lt;= 0) {
            
                direct = -1;
                dirspd -= 0.03;
            }
            
            //Otherwise, speed it up.
            else if (direct == 1)
                dirspd -= 0.015;
        }
        
        //Otherwise, turn below origin.
        else
            dirspd -= 0.03;
    }
    
    //Turn smooth
    if (abs(dirspd) &gt; 3)
        dirspd /= 1.5;
}

else { //if there is NOT a passenger on the platform, slow down turning

    //Slow down until it stops
    dirspd = max(0,abs(dirspd)-0.015)*sign(dirspd);
    if ((dirspd &lt; 0.015) &amp;&amp; (dirspd &gt; -0.015))
        dirspd = 0;
    
    //Turn smooth
    if (abs(dirspd) &gt; 3.875)
        dirspd /= 1.9375;
        
    //Set position
    if ((direction &lt; 90) &amp;&amp; (direction &gt; 270))
        direct = 1; //right side
    else
        direct = -1; //left side

    //Less the 360 degree turn limit if it's low
    if (platform.y &gt; self.y+8)
        over_y = 1;
}

//Direction.
direction += dirspd;

//Return to default.
if (bbox_right &lt; view_xview[0] - 160)
|| (bbox_left &gt; view_xview[0] + view_wview[0] + 160)
|| (bbox_bottom &lt; view_yview[0] - 160)
|| (bbox_top &gt; view_yview[0] + view_hview[0] + 160)
    event_user(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset to default

//Direction
direction = 90;

//Speed
dirspd = 0;

//Platform variables
over_y = false;
dx = 0;
dy = 0;
new_x = 0;
new_y = 0;
old_x = 0;
old_y = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle platform position

//Set platform position
new_x = x+lengthdir_x(chainlength*16,direction);
new_y = y+lengthdir_y(chainlength*16,direction)-18;

//Let platform stay
platform.x = new_x;
platform.y = new_y;

//Set speed of platform
platform.hspeed = new_x-old_x;
platform.vspeed = new_y-old_y;

//Set latest speed of the platform
old_x = new_x;
old_y = new_y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw chains

for (var i=1; i&lt;=chainlength; i++;) {

    dx = x+lengthdir_x(i*16,direction)
    dy = y+lengthdir_y(i*16,direction)
    draw_sprite(spr_balanceplatform_segment,0,dx,dy)
}

//Handle platform variables
event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
