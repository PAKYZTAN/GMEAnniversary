<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cannon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>9</depth>
  <persistent>0</persistent>
  <parentName>obj_deactivateparent</parentName>
  <maskName>spr_square</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Diagonal cannon

/*
**  This item uses creation code!
**
**  direct = Direction of the cannon balls
**      0: Right
**      45: Right-Up
**      90: Up
**      135: Up-Left
**      180: Left
**      225: Down-Left
**      270: Down
**      315: Down-Right
*/

//Default values:
direct = 0;

//Start shooting
alarm[0] = 90;

//Base variables
u = 0;
d = 0;
l = 0;
r = 0;
event_user(0);

//Make this object solid
instance_create(x,y,obj_solid);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shoot a cannonball

//If the player does not exist
if (!instance_exists(obj_playerparent)) {

    alarm[0] = 1;
    exit;
}

//If the gray p-switch is active
if (obj_levelcontrol.gswitchon == true) {

    alarm[0] = 1;
    exit;
}

//Play 'Cannon' sound
audio_play_sound(snd_explode, 0, false);

//Create cannon ball
with (instance_create(x+8+lengthdir_x(8,direct),y+8+lengthdir_y(8,direct),obj_cannonball)) {

    motion_set(other.direct,1.5);
}

//Repeat after 3 seconds
alarm[0] = 180;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get base variables

//Check if there's ground below
if (place_meeting(x,y+1,obj_semisolid))
    d = 1;
    
//Check if there's a ceiling above
if (place_meeting(x,y-1,obj_solid))
    u = 1;
    
//If there's not ground or a ceiling, hang on wall
if (d == 0)
&amp;&amp; (u == 0) {
    
    //Check if there's a wall to the left
    if (place_meeting(x-1,y,obj_solid))
        l = 1;
        
    //Check if there's a wall to the right
    if (place_meeting(x+1,y,obj_solid))
        r = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw cannon

//Cannon
draw_sprite_ext(sprite_index, direct/45, x, y, 1, 1, 0, c_white, 1);

//Base
if (d == 1)
    draw_sprite(sprite_index, 8, x, y);
else if (u == 1)
    draw_sprite(sprite_index, 9, x, y);
else if (r == 1)
    draw_sprite(sprite_index, 10, x, y);
else if (l == 1)
    draw_sprite(sprite_index, 11, x, y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
