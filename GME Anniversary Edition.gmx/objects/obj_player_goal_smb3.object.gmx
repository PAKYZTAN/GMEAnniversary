<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mario_big_walk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>obj_playerparent_clear</parentName>
  <maskName>spr_bigmask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The player has cleared the level by collecting a card

//Current goal
mygoal = -1;

//Do not animate
image_speed = 0;

//Set gravity
gravity = 0.25;

//Anim
anim = 0;

//Move
ready = 0;

//Take time
ready2 = 0;

//Do not flash
isflashing = 0;

//Whether the object is swimming
swimming = false;

//Kill every enemy on screen
with (instance_create(view_xview[0],view_yview[0],obj_powkiller)) 
    killtype = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Return to the map if no music is playing

if (audio_is_playing(mygoal.stream))
    alarm[1] = 1;
else
    endlevel();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Take points off the time, and add to the score

//If there is no time left
if (global.time == 0) 
    alarm[1] = 120;

//Otherwise
else {

    //If the time is greater than 4, decrement 5 seconds from timer
    if (global.time &gt; 4) {
    
        //Repeat the process
        alarm[0] = 2;
    
        //Get 250 points
        score += 250;
        
        //Decrement 5 seconds
        global.time -= 5;
    }
    
    //Otherwise, decrement timer by 1 second
    else if ((global.time &lt; 5) &amp;&amp; (global.time &gt; 0)) {
    
        //Repeat the process
        alarm[0] = 2;
    
        //Get 50 points
        score += 50;
        
        //Decrement 1 second
        global.time--;
    }

    //Play 'Count' sounds
    if (ready2 == 0) {
    
        //If the timer is greater than 0
        if (global.time &gt; 0) {
        
            ready2 = 1;
            audio_play_sound(snd_count, 0, false);
            audio_play_sound(snd_count2, 0, true);
        }
        else {
        
            ready2 = 2;
            audio_play_sound(snd_countend, 0, false);
        }
    }
    else if ((global.time &lt; 1) &amp;&amp; (ready2 == 1)) {
    
        ready2 = 2;
        audio_stop_sound(snd_count2);
        audio_play_sound(snd_countend, 0, false);
    }    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up the player's sprite

//If the player is moving vertically
if (vspeed != 0) {

    //Set the jumping sprite
    sprite_index = scr_mario_jump();
    
    //Animate
    image_speed = 0;
    if (vspeed &lt; 0)
        image_index = 0;
    else
        image_index = 1;
}

//Otherwise, if the player is not moving vertically
else {

    //Set the jumping sprite
    sprite_index = scr_mario_walk();
    
    //Animate
    image_speed = 0.2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player logic

//Inherit step event
event_inherited();

//Update yoshi
anim += 0.2;

//Make it move when landed
if (gravity == 0)
    hspeed = 1.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize time bonus

//If the player did not exit the view
if (ready == 0)
&amp;&amp; (x &gt; room_width+32)
&amp;&amp; (audio_is_playing(mygoal.stream) == false) {

    //The player exited the view
    ready = 1;
    
    //Stop him
    hspeed = 0;
    
    //Take points out off time and add it to score
    event_user(15);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Begin countdown state

//Start the countdown if there is a time limit
if (global.time &gt; 0)
    alarm[0] = 1;
else
    alarm[1] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the player

//If the player is riding a yoshi
if (global.mount == 1) {
        
    //If the player is jumping
    if (vspeed != 0) {
    
        //Set Yoshi palette
        pal_swap_set(spr_palette_yoshi, obj_yoshi.colour);
        
        //If moving up, draw yoshi jumping
        if (vspeed &lt; 0)
            draw_sprite_ext(spr_yoshi_jump, 0, round(x),round(y)+1,image_xscale,1,0,c_white,image_alpha);

        //Otherwise, draw yoshi falling
        else
            draw_sprite_ext(spr_yoshi_jump, 1, round(x),round(y)+1,image_xscale,1,0,c_white,image_alpha);        
            
        //Reset palette
        pal_swap_reset();
        
        //Draw the player
        player_draw_yoshi(scr_mario_ride(), 0, x, y+obj_yoshi.myy, image_xscale);
    }
    
    //Otherwise, if the player is not jumping
    else {
    
        //If the player is not moving horizontally
        if (hspeed == 0) {
            
            //Draw the player first
            player_draw_yoshi(scr_mario_clear(), 0, x, y-9+obj_yoshi.myy, image_xscale);               
            
            //Set Yoshi palette
            pal_swap_set(spr_palette_yoshi, obj_yoshi.colour);
            
            //Draw Yoshi
            if (obj_yoshi.mouthholder != noone)
                draw_sprite_ext(spr_yoshi_warp, 1, round(x),round(y)+1,image_xscale,1,0,c_white,image_alpha);
            else
                draw_sprite_ext(spr_yoshi_warp, 0, round(x),round(y)+1,image_xscale,1,0,c_white,image_alpha);
                
            //Reset palette
            pal_swap_reset();       
        }
    
        //Otherwise, if the player is moving horizontally
        else {
    
            //Set Yoshi palette
            pal_swap_set(spr_palette_yoshi, obj_yoshi.colour);
            
            //Draw Yoshi
            draw_sprite_ext(spr_yoshi, anim, round(x), round(y)+1, image_xscale, 1, 0, c_white, image_alpha);
                
            //Reset palette
            pal_swap_reset();
            
            //Draw the player
            player_draw_yoshi(scr_mario_ride(), 0, x, y+obj_yoshi.myy, image_xscale);
        }
    }
}

//Otherwise, draw normally
else
    draw_sprite_ext(sprite_index,-1,round(x),round(y)+1,image_xscale,1,0,c_white,image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
