<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_redring</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///A red coin ring

/*
**  This item uses creation code!
**
**  sprout = Pick from below:
**      cs_fire
**      cs_ice
**      cs_carrot
**      cs_leaf
**      cs_frog
**      cs_tanooki
**      cs_hammer
**      cs_boomerang
**      cs_super
**      cs_bomb
**      cs_shell
**      cs_bee
**      cs_lightning
**      cs_penguin
**      cs_propeller
**      cs_cat
**
**  ringid = A number id to spawn the red coins.
*/

//Default variables:
ringid = 0;
sprout = cs_fire;

//Destroy if this ring has been touched before
if (ds_map_find_value(global.redrings,id)) {

    instance_destroy();
    exit;
}

//Animate
image_speed = 0.3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset up the red coins variable

global.redcoins = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy ring and all active coins

//Destroy red coins
with (obj_coin_r) {

    //If the ring id is the same as the coins
    if (ringid == other.ringid)
        instance_destroy();
}

//Destroy the ring
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Warn the player that the coins are going to be destroyed.

audio_play_sound(snd_timer_end, 0, false);
audio_stop_sound(snd_timer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if the player collected all coins and give him a prize for doing so.

//If the ring is active.
if (sprite_index == spr_redring_active) {

    //If there's not red coins.
    if (instance_number(obj_coin_r) == 0) {
    
        //Play 'Drop' sound
        audio_play_sound(snd_drop, 0, false);
        
        //Stop 'Timer' sounds
        audio_stop_sound(snd_timer_end);
        audio_stop_sound(snd_timer);
        
        //Create prize
        with (instance_create(0,0,obj_powerupprize)) {
        
            //If the player is small
            if (global.powerup == cs_small)            
                sprite_index = spr_mushroom;
            
            //Otherwise, if the player is big
            else if (global.powerup == cs_big)            
                sprite_index = constant_get_sprite(other.sprout);
            
            //Otherwise, get a life.
            else
                sprite_index = spr_1up;
        }
        
        //Destroy the ring
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_playerparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Activate the coins

//If the ring has not been activated.
if (sprite_index != spr_redring_active) {

    //Play 'Ring' and 'Timer' sound
    audio_play_sound(snd_ring, 0, false);
    audio_play_sound(snd_timer, 0, true);
    
    //Restart red coins
    global.redcoins = 0;

    //Make the coins visible            
    with (obj_coin_r) {
    
        //Check if the ring id's match
        if (ringid == other.ringid) {
        
            visible = true;    
        }
    }
    
    //Countdown
    alarm[0] = 720;
    
    //Destroy all not collected coins
    alarm[1] = 900;
    
    //Change the sprite
    sprite_index = spr_redring_active;
    image_index = 0;
    
    //Prevent the coins from re-appearing
    ds_map_add(global.redrings,id,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make it invisible if active

if ((sprite_index == spr_redring_active) &amp;&amp; (visible)) {

    //Do not animate
    image_speed = 0;
    image_index = 6;
    
    //Create slow spark effects
    var a = 0;
    repeat (8) {
    
        with (instance_create(x,y+16,obj_smoke)) {
        
            //Set the sprite
            sprite_index = spr_notespark;
            
            //Animate
            image_speed = 0.1;
            
            //Motion
            motion_set(a,0.5);
        }
        a += 45;
    }
    
    //Create fast spark effects
    var b = 22.5;
    repeat (8) {
    
        with (instance_create(x,y+16,obj_smoke)) {
        
            //Set the sprite
            sprite_index = spr_notespark;
            
            //Animate
            image_speed = 0.1;
            
            //Motion
            motion_set(b,1);
        }
        b += 45;
    }
    
    //Make it invisible
    visible = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
