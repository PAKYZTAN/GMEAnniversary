<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hawkmouth</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hawkmouth, clear the level by entering it's mouth

//Make it solid on top
mytop = instance_create(x+8,bbox_top,obj_slopeparent)
with (mytop) {

    sprite_index = spr_hawkmouth_mask;
}
    
//Do not animate
image_speed = 0;
image_index = 0;

//Move 8 pixels to the right
x += 8;

//Y position of the jaw
myy = 0;

//Whether the hawk is opening
ready = 0;

//Facing direction
xscale = 1;
if (collision_point(x-9,y,obj_solid,0,0))
    xscale = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Open hawkmouth's mouth

//Play 'Hawkmouth' sound
audio_play_sound(snd_hawkmouth, 0, false);

//Destroy mytop
with (mytop) instance_destroy();

//Open
ready = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Play fanfare and stop music

//Play 'Crystal' sound
audio_play_sound(snd_crystal, 0, false);

//Reset level music
global.levelmusic = noone;

//Stop level music
with (obj_levelcontrol) {
    
    //Play the music
    alarm[0] = room_speed * round(audio_sound_length(snd_crystal));
    
    //Stop the music
    alarm[1] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hawkmouth logic

//Set the scale of the mask
if (instance_exists(mytop))
    mytop.image_xscale = xscale;

//If the mouth is opening
if (ready == 2) {

    //Open it
    myy += 0.3;
    
    //If the mouth is opened enough, wait for the player
    if (myy &gt; 12) {
    
        //Keep it open
        myy = 12;
        
        //Wait until the player enters
        ready = 3;
    }
}

//Otherwise, if the mouth is closing
else if (ready == 4) {

    //Close it
    myy -= 0.3;
    
    //If the mouth is closed enough, clear the level
    if (myy &lt; 0) {
    
        //Keep it closed
        myy = 0;
        
        //Clear the level
        ready = 5;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_playerparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the player enter the hawkmouth

//If the hawk's mouth is fully opened
if (ready == 3) {

    //If the following conditions are met, enter the hawk
    if ((xscale == 1) &amp;&amp; (other.x &gt; x))
    || ((xscale == -1) &amp;&amp; (other.x &lt; x)) 
    &amp;&amp; ((other.state &lt; 2) || (other.delay == 0)) {
    
        //Play 'Hawkmouth Close' sound
        audio_play_sound(snd_hawkmouth_close, 0, false);
        
        //Create hawk player object
        with (instance_create(x,y+28,obj_player_goal_smb2)) {
        
            //If the hawk is facing left
            if (other.xscale == 1) {
            
                motion_set(25, 0.5);
                image_xscale = 1;
            }
            
            //Otherwise, if the hawk is facing right
            else if (other.xscale == -1) {
            
                motion_set(155, 0.5);
                image_xscale = -1;
            }
            
            //Set this hawk as the hawk id
            myhawk = other.id;
        }
        
        //Close the mouth
        ready = 4;
        
        //Destroy the player
        with (obj_playerparent) instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Hawkmouth

//If the hawkmouth is not opening or closing it's mouth
if (ready == 0)
|| (ready == 1)
|| (ready == 5) {

    //If the mouth is not opened
    if (ready == 0)
        draw_sprite_ext(sprite_index, 0, round(x), round(y), xscale, 1, 0, c_white, 1);
        
    //Otherwise, if the mouth is a bit opened
    else
        draw_sprite_ext(sprite_index, 1, round(x), round(y), xscale, 1, 0, c_white, 1);
}

//Otherwise, if the hawkmouth is opening or closing it's mouth
else {

    //Draw the inside frame
    draw_sprite_ext(sprite_index, 4, round(x), round(y), xscale, 1, 0, c_white, 1);
    
    //Draw top
    draw_sprite_ext(sprite_index, 2, round(x), round(y)-myy, xscale, 1, 0, c_white, 1);
    
    //Draw bottom
    draw_sprite_ext(sprite_index, 3, round(x), round(y)+myy, xscale, 1, 0, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
