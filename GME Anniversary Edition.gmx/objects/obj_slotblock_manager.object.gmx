<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_marker_event</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Slot Blocks Manager

//Spawn the blocks
for (var i=0; i&lt;4; i++) {

    //Create a block
    var b = instance_create(80+(64*i),96,obj_slotblock);
    
    //Assign the block to a id
    myblock[i] = b;
        b.numb = i+1;
        b.parent = id;
}

//Check if all 4 block are hit
ready = 0;

//Check the blocks
check = 0;

//Number of lives to award
award = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Give out prizes

//If the game is not ready to end
if (ready == 1) {

    //Consolation prize
    if (award == -1) {
    
        //Play 'Scatter' sound
        audio_play_sound(snd_scatter, 0, false);
        
        //Create smoke
        instance_create(184,160,obj_smoke);
    
        //Create 10 coins
        repeat (10) {
        
            with (instance_create(192,158,obj_blockcoin2)) {
            
                hspeed = random_range(1,-1);
                vspeed = random_range(-2,-6)
            }
        }
        
        //Allow exit
        ready = 2;
        
        //Check up for items
        alarm[0] = 120;
    }
    
    //Award extra lives
    else {
    
        //Check for awards
        if (award &gt; 0) {
    
            //Play 'Sprout' sound
            audio_play_sound(snd_sprout, 0, false);
            
            //Create smoke
            instance_create(184,168,obj_smoke);
            
            //Create 1-UP
            with (instance_create(192,168,obj_1up)) {
            
                permission = 1;
                vspeed = -6;
            }
            
            //Decrement awards
            award--;
            
            //Repeat the process
            alarm[0] = 60;
        }
        else {
        
            //Allow exit
            ready = 2;
            
            //Check up for items
            alarm[0] = 120;
        }
    }
}

//Otherwise, if the game is ready to end wait until all items are obtained
else if (ready == 2) {

    //Check for both items
    if (instance_number(obj_1up) == 0)
    &amp;&amp; (instance_number(obj_blockcoin2) == 0) {
    
        //Exit this area
        with (obj_toad_slot) alarm[2] = 120;
        
        //Prevent alarm
        ready = 3;
    }
    else
        alarm[0] = 2;
}   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Slot Block Manager logic

//Check if all 4 blocks were hit
if (ready == 0) {

    if (myblock[0].ready) &amp;&amp; (myblock[1].ready) 
    &amp;&amp; (myblock[2].ready) &amp;&amp; (myblock[3].ready)
        ready = 1;
}

//If all the 4 blocks were hit check the images from each one.
else {

    //Check first and second block
    if (myblock[1].image_index == myblock[0].image_index)
    &amp;&amp; (myblock[2].image_index != myblock[0].image_index) {
    
        //If the manager didn't do the first check
        if (check == 0) {
        
            //Play 'Correct' sound
            audio_play_sound(snd_correct, 0, false);
    
            //Increment lives to award
            award++;
            
            //Increment check
            check = 1;
        }
        
        //If the manager did the first check, do the second one
        else if (check == 1) {
        
            //Check if the second and third one are equal
            if (myblock[2].image_index == myblock[3].image_index) {
            
                //Play 'Correct' sound
                audio_play_sound(snd_correct, 0, false);
            
                //Increment lives to award
                award++
                
                //Increment check
                check = 2
                
                //Give out prizes
                alarm[0] = 60;
            }
            
            //If they are not equal... give out prizes
            else {
            
                //Increment check
                check = 2;
            
                //Give out prizes
                alarm[0] = 60;
            }
        }
    }
    
    //Check first, second and third block
    else if (myblock[1].image_index == myblock[0].image_index)
    &amp;&amp; (myblock[2].image_index == myblock[0].image_index)
    &amp;&amp; (myblock[3].image_index != myblock[0].image_index) 
    &amp;&amp; (check == 0) {
    
        //Play 'Correct' sound
        audio_play_sound(snd_correct, 0, false);
         
        //Increment lives to award
        award += 3;
        
        //Increment check
        check = 1;
                        
        //Give out prizes
        alarm[0] = 60;
    }
    
    //Check first, second and third block
    else if (myblock[1].image_index == myblock[0].image_index)
    &amp;&amp; (myblock[2].image_index == myblock[0].image_index) 
    &amp;&amp; (myblock[3].image_index == myblock[0].image_index) 
    &amp;&amp; (check == 0) {
    
        //Play 'Correct' sound
        audio_play_sound(snd_correct, 0, false);
         
        //Increment lives to award
        award += 5;
        
        //Increment check
        check = 1;
                                
        //Give out prizes
        alarm[0] = 60;
    }
    
    //Otherwise if no combinations were made, get consolation prize.
    else if (check == 0) {
    
        //Play 'Wrong' sound
        audio_play_sound(snd_wrong, 0, false);
    
        //Do not give lives
        award = -1;
        
        //Increment check
        check = 1;
        
        //Give out prizes
        alarm[0] = 60;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
