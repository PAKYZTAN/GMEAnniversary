<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_stoneblock</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>obj_platformparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///A stone block

///Start moving
alarm[0] = 120;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start moving

//Check if overlapping with a arrow modifier and make it move in the direction where the modifier is pointing
if (collision_point(x,y,obj_up,0,0)) {
        
    //Set the direction
    direction = 90;
    
    //Set the speed
    speed = 1;
}
else if (collision_point(x,y,obj_down,0,0)) {
        
    //Set the direction
    direction = 270;
    
    //Set the speed
    speed = 1;
}
else if (collision_point(x,y,obj_left,0,0)) {
        
    //Set the direction
    direction = 180;
    
    //Set the speed
    speed = 1;
}
else if (collision_point(x,y,obj_right,0,0)) {
        
    //Set the direction
    direction = 0;
    
    //Set the speed
    speed = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stone block logic

//If the player is on this moving platform
if ((collision_rectangle(bbox_left,bbox_top-5,bbox_right,bbox_top+4,obj_playerparent,0,0))
&amp;&amp; (obj_playerparent.bbox_bottom &lt; yprevious+5)
&amp;&amp; (obj_playerparent.state &lt; 2)) {

    //Check for a moving platform or quicksand
    var check = collision_rectangle(obj_playerparent.bbox_left,obj_playerparent.bbox_bottom-1,obj_playerparent.bbox_right,obj_playerparent.bbox_bottom,obj_semisolid,0,1);
    if (check)
    || (collision_rectangle(obj_playerparent.bbox_left,obj_playerparent.bbox_bottom-1,obj_playerparent.bbox_right,obj_playerparent.bbox_bottom+1,obj_quicksand,0,0))
        exit;

    //Snap the player vertically
    obj_playerparent.y = ceil(bbox_top-15);

    //Snap the player horizontally and prevent it from getting embed on a solid.
    obj_playerparent.x += x-xprevious;
    if (collision_rectangle(obj_playerparent.bbox_right,obj_playerparent.bbox_top+4,obj_playerparent.bbox_right+1,obj_playerparent.bbox_bottom-1,obj_solid,0,0))
        with (obj_playerparent) x--;
    else if (collision_rectangle(obj_playerparent.bbox_left-1,obj_playerparent.bbox_top+4,obj_playerparent.bbox_left,obj_playerparent.bbox_bottom-1,obj_solid,0,0))
        with (obj_playerparent) x++;    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Push the player

//Make sure the player exists
if (instance_exists(obj_playerparent)) {

    with (obj_playerparent) {
    
        //If the player is moving to the right and there's a wall on the way.
        if (xspeed &gt; 0) 
        &amp;&amp; (collision_rectangle(bbox_right,bbox_top+4,bbox_right+1,bbox_bottom-4,other.id,0,0)) {
        
            //Stop horizontal speed
            xspeed = 0;
            
            //Prevent the player from getting embed on the wall
            while (collision_rectangle(bbox_right,bbox_top+4,bbox_right,bbox_bottom-4,other.id,0,0))
            &amp;&amp; (!collision_point(x,bbox_top+4,other.id,0,0))
                x--;
        }
        
        //Otherwise, if the player is moving to the left and there's a wall on the way.
        else if (xspeed &lt; 0)
        &amp;&amp; (collision_rectangle(bbox_left-1,bbox_top+4,bbox_left,bbox_bottom-4,other.id,0,0)) {
        
            //Stop horizontal speed
            xspeed = 0;
            
            //Prevent the player from getting embed on the wall
            while (collision_rectangle(bbox_left,bbox_top+4,bbox_left,bbox_bottom-4,other.id,0,0))
            &amp;&amp; (!collision_point(x,bbox_top+4,other.id,0,0))
                x++;
        }
        
        //If the player is moving up
        if (yspeed &lt; 0) 
        &amp;&amp; (collision_rectangle(bbox_left,bbox_top-1,bbox_right,bbox_top,other.id,1,0)) {
        
            //Prevent the player from getting embed on a ceiling
            if (state &gt; 1) {
            
                while (collision_rectangle(bbox_left,bbox_top+1,bbox_right,bbox_top+1,other.id,0,0))
                    y++;
            }
            
            //Stop vertical movement
            yspeed = 0;
            
            //Play 'Bump' sound if not climbing
            if (state == 2)
                audio_play_sound(snd_bump, 0, false);
        }
    }
    
    //Make sure if the player is below the block
    if (obj_playerparent.y &gt; y-11) {
    
        //If moving down
        if (vspeed &gt; 0) {
        
            //With the player
            with (obj_playerparent) {
            
                //If the player is below the platform
                while (collision_rectangle(bbox_left,bbox_top-1+other.id.vspeed,bbox_right,bbox_top,other.id,0,0))
                    y += other.id.vspeed;
            }
        }

        //Push the player in the direction the platform moves    
        if ((hspeed &lt; 0) &amp;&amp; (collision_rectangle(bbox_left-2-hspeed,bbox_top+4,bbox_left-2,bbox_bottom-1,obj_playerparent,0,0)))
        || ((hspeed &gt; 0) &amp;&amp; (collision_rectangle(bbox_right+2,bbox_top+4,bbox_right+2+hspeed,bbox_bottom-1,obj_playerparent,0,0)))
            obj_playerparent.x += hspeed;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_endmarker">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop and snap onto the grid

//Stop
speed = 0;

//Snap onto the grid
move_snap(16,16);

//Start moving again
alarm[0] = 120;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
