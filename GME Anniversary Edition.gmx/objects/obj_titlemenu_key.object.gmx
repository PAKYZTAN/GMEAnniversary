<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_marker_event</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-6</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Key Configuration Object

//Key variables
key = 0;
keyText = "";
keyDefault = vk_escape;

//Delay key press
ready = 0;
alarm[0] = 2;

//Create a screenshot
back = background_create_from_surface(application_surface,0,0,room_width,room_height,0,0);

//Stop movement on all backgrounds
for (var i=0; i&lt;8; i++) {

    temp_h[i] = background_hspeed[i];
    temp_v[i] = background_vspeed[i];
    background_hspeed[i] = 0;
    background_vspeed[i] = 0;
}

//Deactivate the instances.
instance_deactivate_all(1);

//Activate all
instance_activate_object(obj_persistent);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Allow key press

ready = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw menu

//Draw the screenshot if it exists
if (background_exists(back)) {

    //Disable alpha blending
    draw_enable_alphablend(0);
    
    //Draw screenshot
    draw_background(back,view_xview[0],view_yview[0]);
    
    //Enable alpha blending
    draw_enable_alphablend(1);
}

//Draw the box
draw_sprite_ext(spr_keybox, 0, view_xview[0]+global.gw/2, view_yview[0]+global.gh-48, 1, 1, 0, c_white, 0.5);

//Set the font
draw_set_font(global.font_interface);

//Align the text
draw_set_valign(fa_center);
draw_set_halign(fa_center);

//Draw the text
draw_text_colour_shadowed(view_xview[0]+global.gw/2, view_yview[0]+global.gh-48, keyText, c_black, c_white, 1, 1, 0.5, 1);

//Re-Align the text
draw_set_valign(fa_top);
draw_set_halign(fa_left);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up the key

if (ready == 1) {

    //Check for the new key
    var newKey = keyboard_key;
    
    //If the new key is the escape key, warn the player that said key cannot be mapped
    if (newKey == vk_escape) {
    
        //Play 'Wrong' sound
        audio_play_sound(snd_wrong, 0, false);
    
        //Set default key
        switch (key) {
        
            //Control
            case (0): global.controlkey = vk_control; break;
            
            //Shift
            case (1): global.shiftkey = vk_shift; break;
            
            //Space
            case (2): global.spacekey = vk_space; break;
            
            //Enter
            case (3): global.enterkey = vk_enter; break;
            
            //Up
            case (4): global.upkey = vk_up; break;
            
            //Down
            case (5): global.downkey = vk_down; break;
            
            //Left
            case (6): global.leftkey = vk_left; break;
            
            //Right
            case (7): global.rightkey = vk_right; break;
        }
    }
    else {
    
        //Play 'Correct' sound
        audio_play_sound(snd_correct, 0, false);
    
        //Set new key
        switch (key) {
        
            //Control
            case (0): { 
            
                if (newKey == vk_lcontrol)
                || (newKey == vk_rcontrol)
                    global.controlkey = vk_control;
                else
                    global.controlkey = newKey;
            } break;
            
            //Shift               
            case (1): { 
            
                if (newKey == vk_lshift)
                || (newKey == vk_rshift)
                    global.shiftkey = vk_shift;
                else
                    global.shiftkey = newKey;
            } break;
            
            //Space                
            case (2): global.spacekey = newKey; break;
            
            //Enter                
            case (3): global.enterkey = newKey; break;
            
            //Up                 
            case (4): global.upkey = newKey; break;
            
            //Down
            case (5): global.downkey = newKey; break;
            
            //Left
            case (6): global.leftkey = newKey; break;
            
            //Right
            case (7): global.rightkey = newKey; break;
        }
    }
    
    //Delete the screenshot
    background_delete(back);
    
    //Activate everything
    instance_activate_all();

    //Resume movement on all backgrounds
    for (var i=0; i&lt;8; i++) {
    
        background_hspeed[i] = temp_h[i]
        background_vspeed[i] = temp_v[i]
    }
    
    //Destroy
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
