<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_tongue</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-4</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Yoshi's tongue

//Did Yoshi eat something?
hunger = 0;

//What the food looks like
foodsprite = noone;
foodindex = 0;
foodoffset = 0;

//Eaten powerup
powerup = noone;

//Eaten berry
berry = noone;

//State variable
ready = 0;

//Tongue offset values
t2 = 0;
t3 = 0;
t4 = 0;
t5 = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Yoshi pull out his tounge

ready = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tongue logic

//If Mario and Yoshi exist
if (instance_exists(obj_playerparent)) 
&amp;&amp; (instance_exists(obj_yoshi)) {

    //Where the tongue should be drawn
    if (obj_yoshi.sprite_index == spr_yoshi_lick) {
    
        tongue1x = obj_yoshi.x-3+19*obj_playerparent.xscale;
        tongue2x = t2*obj_playerparent.xscale+tongue1x;
        tongue3x = t3*obj_playerparent.xscale+tongue1x;
        tongue4x = t4*obj_playerparent.xscale+tongue1x;
    }
    else {
    
        tongue1x = obj_yoshi.x-3+13*obj_playerparent.xscale;
        tongue2x = t2*obj_playerparent.xscale+tongue1x;
        tongue3x = t3*obj_playerparent.xscale+tongue1x;
        tongue4x = t4*obj_playerparent.xscale+tongue1x;     
    }

    //Actual tongue location
    x = round(t5*obj_playerparent.xscale+tongue1x);
    if (obj_yoshi.locked = 2)
        y = obj_yoshi.y+4;
    else
        y = obj_yoshi.y-7;

    //If Yoshi is moving his tongue out
    if (ready == 0) {

        //Increment tongue offset values
        if (t2 != 8)
            t2 += 4;
        if (t3 != 16)
            t3 += 4;
        if (t4 != 24)
            t4 += 4;
        if (t5 != 32)
            t5 += 4;

        //If the tongue is all the way out, pull it back in
        else if (ready != 1) {
        
            ready = 1;
            alarm[0] = 8;
        }
    }

    //If Yoshi is pulling back his tongue
    else if (ready == 2) {

        //Decrement tongue offset values
        if (t2 != 0)
            t2 -= 4;
        if (t3 != 0)
            t3 -= 4;
        if (t4 != 0)
            t4 -= 4;
        if (t5 != 0)
            t5 -= 4;

        //If the tongue is all the way in
        else {
        
            //Close Yoshi's mouth
            obj_yoshi.alarm[1] = 5;

            //If something was eaten
            if (hunger) {

                //If a powerup was eaten, place it in Yoshi
                if (powerup != noone) {
                
                    //Play 'Eat' sound
                    audio_play_sound(snd_yoshi_eat, 0, false);
                    
                    //Remember eaten powerup
                    obj_yoshi.powerup = powerup;
                    powerup = noone;
                }
                
                //Otherwise, if a berry was eaten.
                else if (berry != noone) {
                
                    //Play 'Eat' sound
                    audio_play_sound(snd_yoshi_eat, 0, false);
                    
                    //Remember eaten berry
                    obj_yoshi.berry = berry;
                    berry = noone;
                }
                
                //Otherwise, if a rotten shroom was eaten
                else if (obj_yoshi.mouthholder == obj_rotten) {
                
                    //Kill the player
                    with (obj_playerparent) {
                    
                        //If the player is invulnerable
                        if (!instance_exists(obj_invincibility)) {
                            
                            //Hurt the player                            
                            event_user(0);                                    
                        }
                    }
                }

                //If Yoshi's mouth is not full, swallow
                else if (obj_yoshi.mouthholder == noone) {
                               
                    //Play 'Eat' sound
                    audio_play_sound(snd_yoshi_eat, 0, false);
                    
                    //Play 'Coin' sound
                    audio_play_sound(snd_coin, 0, false);
                    
                    //Increment coins
                    global.coins++;
                }
            }

            //Destroy
            instance_destroy()
        }
    }
}

//Otherwise, stop licking and destroy
else {

    with (obj_yoshi) {
    
        licking = 0;
        locked = 0;
    }
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_powerupparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Eat powerups

if (hunger = 0) {

    //Item eaten
    hunger = 1;

    //Move tongue back
    ready = 1;
    alarm[0] = 8;

    //Food sprite
    foodsprite = other.sprite_index;

    //Food offset
    foodoffset = 0;

    //Remember powerup eaten
    powerup = other.object_index;

    //Destroy food
    with (other) instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemyparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Eat enemies

if (hunger == 0) 
&amp;&amp; (ready == 0) 
&amp;&amp; (other.depth &lt; 11) {

    //If the enemy is edible by yoshi
    if (other.edible == 2) {
    
        //Move tongue back
        ready = 1;
        alarm[0] = 8;
    }
    
    //Otherwise, create item
    else if (other.edible == 1)
        with (other) event_user(7);
        
    //Otherwise, eat it
    else {
    
        //Enemy eaten
        hunger = 1;
        
        //Move tongue back
        ready = 1;
        alarm[0] = 8;
        
        //If the item is a rotten shroom, kill instantly.
        if (other.object_index == obj_rotten) {
        
            //Put a rotten shroom inside yoshi's mouth
            obj_yoshi.mouthholder = obj_rotten;
        }
        
        //Otherwise, put shells inside yoshi's mouth
        else if (other.object_index == obj_shell_kick) {
        
            //If the yoshi is a red one, put fire inside
            if (global.mountcolour = 1)
                obj_yoshi.mouthholder = obj_yoshi_fire;
            
            //Otherwise,
            else {
            
                //Put a shell inside Yoshi's mouth
                obj_yoshi.mouthholder = obj_shell_kick;
                
                //Set the shell sprite
                obj_yoshi.mouthsprite = other.sprite_index;
            }
        } 
        
        //Otherwise, if the shell is a kamikaze shell
        else if (other.object_index == obj_koopa_kamikaze) {
        
            //Put fire inside yoshi's mouth
            obj_yoshi.mouthholder = obj_yoshi_fire;
        }
        
        //Otherwise, if the yoshi is a teal one
        else if (obj_yoshi.colour == 4) {
        
            //Put an ice block inside yoshi's mouth
            obj_yoshi.mouthholder = obj_iceblock;
            
            //Set the ice sprite
            obj_yoshi.mouthsprite = spr_iceblock;
        }
        
        //Otherwise, if the yoshi is a pink one
        else if (obj_yoshi.colour == 5) {
        
            //Put a vegetable inside yoshi's mouth
            obj_yoshi.mouthholder = obj_turnip;
            
            //Set the turnip sprite
            if (choose(0,1) == 0)
                obj_yoshi.mouthsprite = spr_turnip;
            else
                obj_yoshi.mouthsprite = spr_turnip_mini;
        }
        
        //Food sprite
        foodsprite = other.sprite_index;
        
        //Food image
        foodindex = other.image_index;
        
        //Food offset
        with (other) other.foodoffset = (bbox_left+bbox_right)/2-x;
        
        //Destroy food
        with (other) instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_parhold">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Eat held items

if (!hunger)
&amp;&amp; (other.object_index != obj_trampoline_timed)
&amp;&amp; (other.object_index != obj_trampoline_p_active) {

    //If the item is a shell, flip it.
    if (other.object_index == obj_shell) {
    
        //Green
        if (other.sprite_index = spr_shell)
            other.sprite_index = spr_shell_down;
            
        //Red
        else if (other.sprite_index = spr_shell_red)
            other.sprite_index = spr_shell_red_down;
            
        //Blue
        else if (other.sprite_index = spr_shell_blue)
            other.sprite_index = spr_shell_blue_down;
            
        //Yellow
        else if (other.sprite_index = spr_shell_yellow)
            other.sprite_index = spr_shell_yellow_down;
    }

    //Item eaten
    hunger = 1;

    //Move tongue back
    ready = 1;
    alarm[0] = 8;

    //If the item has any of the following sprites, do not remember.
    if (other.sprite_index != spr_shell_spiny)
    &amp;&amp; (other.sprite_index != spr_shell_buzzy)
    &amp;&amp; (other.sprite_index != spr_shell_buzzy_down) {
    
        //Put it in Yoshi's mouth
        obj_yoshi.mouthholder = other.object_index;

        //Remember its sprite
        obj_yoshi.mouthsprite = other.sprite_index;
    }

    //Food sprite
    foodsprite = other.sprite_index;

    //Food offset
    foodoffset = 0;

    //Destroy food
    with (other) instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_pswitch">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Eat held items

if (!hunger) &amp;&amp; (image_index == 0) {

    //Item eaten
    hunger = 1;

    //Move tongue back
    ready = 1;
    alarm[0] = 8;

    //Put it in Yoshi's mouth
    obj_yoshi.mouthholder = other.object_index;

    //Remember its sprite
    obj_yoshi.mouthsprite = other.sprite_index;

    //Food sprite
    foodsprite = other.sprite_index;

    //Food offset
    foodoffset = 0;

    //Destroy food
    with (other) instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_berry">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Eat red berry

if (!hunger) {

    //Item eaten
    hunger = 1;

    //Move tongue back
    ready = 1;
    alarm[0] = 8;

    //Food sprite
    foodsprite = other.sprite_index;

    //Food offset
    foodoffset = 8;
    
    //Remember berry eaten
    berry = other.sprite_index;

    //Destroy food
    with (other) instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bluebrick">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Eat bricks

if (!hunger) {

    //Item eaten
    hunger = 1;

    //Move tongue back
    ready = 1;
    alarm[0] = 8;

    //Put it in Yoshi's mouth
    obj_yoshi.mouthholder = obj_bluebrick_th;
    
    //Remember its sprite
    obj_yoshi.mouthsprite = other.heldsprite;
    
    //Food sprite
    foodsprite = other.heldsprite;

    //Food offset
    foodoffset = 0;

    //Destroy food
    with (other) instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Tongue

//Draw eaten item
if (hunger) {

    draw_sprite(foodsprite,foodindex,x+3+3*obj_playerparent.xscale-foodoffset,y-4)
}

//Draw tongue parts
draw_sprite_ext(spr_tongue,1,tongue1x+3-3*obj_playerparent.xscale,y,obj_playerparent.xscale,1,0,c_white,1)
draw_sprite_ext(spr_tongue,1,tongue2x+3-3*obj_playerparent.xscale,y,obj_playerparent.xscale,1,0,c_white,1)
draw_sprite_ext(spr_tongue,1,tongue3x+3-3*obj_playerparent.xscale,y,obj_playerparent.xscale,1,0,c_white,1)
draw_sprite_ext(spr_tongue,1,tongue4x+3-3*obj_playerparent.xscale,y,obj_playerparent.xscale,1,0,c_white,1)
draw_sprite_ext(spr_tongue,0,x+3-3*obj_playerparent.xscale,y,obj_playerparent.xscale,1,0,c_white,1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
