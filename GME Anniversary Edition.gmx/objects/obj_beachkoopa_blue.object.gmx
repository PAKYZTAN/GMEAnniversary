<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_beachkoopa_blue_walk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_deactenemyparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Blue beach koopa

//Default variables
ready = 1;

//How vulnerable is this enemy to various items?
vulnerable = 0;

//How vulnerable is this enemy to the player?
stomp = 0;

//How vulnerable is this enemy to yoshi?
edible = 0;

//Facing direction
xscale = 1;

//Whether the object is swimming
swimming = false;

//Whether the object is kicking a shell
kick = 0;
kicktime = 0;

//Whether the object movement was initialized before
ready2 = 0;

//Animate
image_speed = 0.125;

//Start moving
alarm[10] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move towards the player

//If the koopa can move and it's not kicking
if (ready &gt; 0) {

    //Set walking sprite
    sprite_index = spr_beachkoopa_blue_walk;
    
    //Animate
    image_speed = 0.125;
    
    //Set the horizontal speed
    if (ready2)
        hspeed = 1*sign(xscale);
        
    //Otherwise, if the koopa did not started it's movement
    else {
    
        //Start moving
        ready2 = 1;
    
        if (!instance_exists(obj_playerparent))
        || (obj_playerparent.x &lt; x)
            hspeed = -1;
        else
            hspeed = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Blue beach koopa logic

//Inherit event
event_inherited();

//Sliding logic
if (ready == 0) {
    
    //Slow down
    hspeed = max(0,abs(hspeed)-0.05)*sign(hspeed);
    
    //If the koopa is about to stop
    if (hspeed &lt; 0.05) 
    &amp;&amp; (hspeed &gt; -0.05) {
        
        //Stop it
        hspeed = 0;
        
        //Allow movement
        ready = 1;
        
        //Start moving
        alarm[10] = 10;
    }
}

//Otherwise, check for shells
else if (ready &gt; 0) {

    //If the koopa just came out from the shell, do not allow it to enter.
    if (sprite_index == spr_beachkoopa_blue_walk)
    &amp;&amp; (ready == 1)
    &amp;&amp; (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom-4,obj_shell,0,0))
        ready = 2;
        
    //Otherwise if the koopa is no longer overlapping a shell, make him kick one.
    else if (ready == 2) {
    
        //Check for a shell
        var shell = collision_rectangle(x+(5*sign(xscale)),bbox_top,x+(10*sign(xscale)),bbox_bottom-4,obj_shell,0,0);
        
        //If there's a shell in position
        if (shell)
        &amp;&amp; (kick != 1)
        &amp;&amp; (shell.held == 0)
        &amp;&amp; (((hspeed &gt; 0) &amp;&amp; (xscale == 1))
        || ((hspeed &lt; 0) &amp;&amp; (xscale == -1))) {
        
            //Set sprite
            sprite_index = spr_beachkoopa_blue_walk;
        
            //Stop animation
            image_speed = 0;
            image_index = 0;
            
            //Stop moving
            hspeed = 0;
            
            //Initialize kick
            kick = 1;
            
            //End alarms
            alarm[10] = -1;
        }
        
        //Otherwise if the koopa is about to kick the shell
        else if ((shell) &amp;&amp; (kick == 1)) {
            
            //If the timer hits 30
            if (kicktime &gt; 30) {
            
                //Play 'Kick' sound
                audio_play_sound(snd_kick, 0, false);
                
                //Set kicking pose
                sprite_index = spr_beachkoopa_blue_kick;
            
                //Kick the shell
                kick = 0;
                kicktime = 0;
                
                //Create a kicked shell
                mykick = instance_create(shell.x,shell.y,obj_shell_kick);
                
                //Give it the same stats
                mykick.sprite_index = shell.sprite_index;
                                        
                //Give it the same inside koopa
                mykick.koopainside = shell.koopainside;
                
                //Set the horizontal speed
                mykick.prevhspeed = 2.7*(other.xscale);
                mykick.hspeed = 2.7*(other.xscale);
                
                //Start moving again
                alarm[10] = 30;
                
                //Destroy shell
                with (shell) instance_destroy();
            }
            
            //Otherwise, increment timer
            else
                kicktime++;
        }
        
        //Check for a moving shell
        var shell_m = collision_rectangle(x+(5*sign(xscale)),bbox_top,x+(10*sign(xscale)),bbox_bottom-4,obj_shell_kick,0,0);
        
        //If there's a moving shell coming
        if (shell_m) &amp;&amp; ((shell_m.hspeed &lt; 0) &amp;&amp; (xscale == 1)) 
        || (shell_m) &amp;&amp; ((shell_m.hspeed &gt; 0) &amp;&amp; (xscale == -1)) {
        
            //Create a shell
            myshell = instance_create(shell_m.x,shell_m.y,obj_shell);
            
            //Give it the same stats
            myshell.sprite_index = shell_m.sprite_index;
                                    
            //Give it the same inside koopa
            myshell.koopainside = shell_m.koopainside;
            if (myshell.koopainside &gt; 0) {
            
                myshell.alarm[0] = 540;
                myshell.alarm[1] = 600;
            }
            
            //Force kick
            kick = 0;
            kicktime = 0;

            //Destroy shell
            with (shell_m) instance_destroy();    
        }
    }
    
    //Turn on ledges
    if (ready &gt; 1)
        event_user(6);
}

//Set facing direction
if (hspeed &gt; 0)
    xscale = 1;
else if (hspeed &lt; 0)
    xscale = -1;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default wall collision

if ((hspeed &lt; 0) &amp;&amp; (collision_rectangle(bbox_left-1,bbox_top+4,bbox_left,bbox_bottom-5,obj_solid,1,0)))
|| ((hspeed &gt; 0) &amp;&amp; (collision_rectangle(bbox_right,bbox_top+4,bbox_right+1,bbox_bottom-5,obj_solid,1,0))) {

    //Stop if being launched
    if (ready == 0)
        hspeed = 0;
    else
        hspeed = -hspeed;
    
    //Prevent getting embed on walls
    while (collision_rectangle(bbox_left,bbox_top+4,bbox_left,bbox_bottom-5,obj_solid,0,0))
        x++;
    while (collision_rectangle(bbox_left,bbox_top+4,bbox_right,bbox_bottom-5,obj_solid,0,0))
        x--;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Special turn at enemies script

if (ready &lt; 2)
exit;
    event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turn into a pancake

//Create pancak'd enemy
with (instance_create(x,y,obj_stomped)) sprite_index = spr_koopa_sq;

//Destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
