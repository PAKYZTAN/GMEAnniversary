<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mario_big_goal</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>obj_playerparent_clear</parentName>
  <maskName>spr_bigmask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player on the flagpole

//Default flagpole
flagpole = -1;

//Use the goal sprite
sprite_index = scr_mario_goal();

//Animate
image_speed = 0;
image_index = 0;

//Stop both music and timer
with (obj_levelcontrol) {

    event_user(0);
    alarm[2] = 0;
}

//Clear the level
global.clear = 1;
if (instance_exists(obj_flagpole_secret)) {

    global.clear = 2;
}

//Anim
anim = 0;

//Do not flash
isflashing = 0;

//Forget check points
global.checkpoint = noone;

//Do not bring kuribo shoes outside
if (global.mount == 2) {

    //Play 'Transform' sound
    audio_play_sound(snd_powerlost, 0, false);
    
    //Forget it
    global.mount = 0;
    
    //With the shoe
    with (obj_kuriboshoe) {
    
        //Create flying shoe
        with (instance_create(x,y,obj_kuriboshoe_lost)) {
        
            sprite_index = other.sprite_index;
            image_xscale = obj_playerparent.xscale;
            hspeed = obj_playerparent.xscale*-1;
        }
        
        //Destroy
        instance_destroy();
    }
}

//State
ready = 0;
ready2 = 0;
ready3 = 0;

//Stream
stream = -1;

//Hold a bit before going down
alarm[11] = 60;

//Whether the object is swimming
swimming = false;

//Kill every enemy on screen
with (instance_create(view_xview[0],view_yview[0],obj_powkiller)) killtype = 1;

//Get number of fireworks
if ((global.time mod 10) == 6) 
    global.fireworks = 6;
else if ((global.time mod 10) == 3) 
    global.fireworks = 3;
else if ((global.time mod 10) == 1) 
    global.fireworks = 1;
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go down the flagpole

//Play the flagpole sound
audio_play_sound(snd_flagpole, 0, false);

//Give points
with (flagpole) {

    event_user(0);
    with (instance_create(x+8,y+144,obj_flag_p)) 
        vspeed = -1.5;
}

//Move down
vspeed = 1.5;

//Start walking
alarm[0] = 112;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start moving again

ready2 = 2;
depth = 14;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Return to the map after the music is done playing.

if (!audio_is_playing(bgm_sm1clear)) {

    //If there's not fireworks
    if (global.fireworks == 0)
        endlevel();
    
    else {
    
        //If there's more than 1 fireworks
        if (global.fireworks &gt; 1) {
        
            //Spawn a firework
            instance_create(view_xview[0]+random_range(32,336),view_yview[0]+random_range(32,64),obj_firework_spawner);
              
            //Decrease amount of firework
            global.fireworks--;
            
            //Repeat
            alarm[2] = 30;
        }
        else {
        
        
            //Spawn a firework
            instance_create(view_xview[0]+random_range(32,336),view_yview[0]+random_range(32,64),obj_firework_spawner);
              
            //Decrease amount of firework
            global.fireworks = 0;
            
            //Repeat
            alarm[2] = 120;        
        }
    }
}
else
    alarm[2] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Take points off the time, and add to the score

//If there is no time left
if (global.time == 0) 
    alarm[2] = 1;

//Otherwise
else {

    //If the time is greater than 4, decrement 5 seconds from timer
    if (global.time &gt; 4) {
    
        //Repeat the process
        alarm[1] = 2;
    
        //Get 250 points
        score += 250;
        
        //Decrement 5 seconds
        global.time -= 5;
    }
    
    //Otherwise, decrement timer by 1 second
    else if ((global.time &lt; 5) &amp;&amp; (global.time &gt; 0)) {
    
        //Repeat the process
        alarm[1] = 2;
    
        //Get 50 points
        score += 50;
        
        //Decrement 1 second
        global.time--;
    }

    //Play 'Count' sounds
    if (ready3 == 0) {
    
        //If the timer is greater than 0
        if (global.time &gt; 0) {
        
            ready3 = 1;
            audio_play_sound(snd_count, 0, false);
            audio_play_sound(snd_count2, 0, true);
        }
        else {
        
            ready3 = 2;
            audio_play_sound(snd_countend, 0, false);
        }
    }
    else if ((global.time &lt; 1) &amp;&amp; (ready3 == 1)) {
    
        ready3 = 2;
        audio_stop_sound(snd_count2);
        audio_play_sound(snd_countend, 0, false);
    }    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start walking to the goal castle

//Physics state
ready = 2;

//Play the flagpole music
audio_play_sound(bgm_sm1clear, 0, false);

//Jump off the flagpole
vspeed = -3;
y--;

//Move right 8 pixels
x += 8;

//Face right
image_xscale = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player flagpole logic

//Animate Yoshi if riding one
anim += 0.065+abs(hspeed)/7.5;

//When in the physics or countdown state
if ((ready == 2) || (ready == 3)) {

    //Prevent physics parent from destroying (Hack)
    if (bbox_top &gt; room_height) {
    
        //If it's moving to the right...
        if (ready = 2) then hspeed = -1
        
        //Stay invisible on the bottom of the view
        y = room_height-32;
        visible = 0;
    }

    //Default event
    event_inherited();

    //If Mario reached a wall or fell out of the room when in the physics state
    if (ready = 2) {
    
        if (hspeed &lt; 0) {

            //Countdown state
            ready = 3;
    
            //Begin countdown state
            event_user(15);
    
            //Stop walking
            hspeed = 0;
        }
        else {
        
            if (ready2 != 1) {
            
                //Set horizontal speed
                hspeed += 0.07;
                if (hspeed &gt; 1.5)
                    hspeed = 1.5;
            }
        }
    }
}

//Animate
event_user(13);

//Enter castle
event_user(14);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_flagpole">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///When Mario reaches the bottom of the flagpole

if (ready == 0) 
&amp;&amp; (y &gt; other.y+144) {

    //Do not animate
    image_speed = 0;
    image_index = 0;

    //Stop moving
    vspeed = 0;

    //Snap to bottom of the flagpole
    y = other.y+144;

    //Ready to jump state
    ready = 1;
    
    //Face left
    image_xscale = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enter castle

if (instance_exists(obj_incastle)) {

    //Do the victory pose
    if (ready2 == 0) 
    &amp;&amp; (x &gt; obj_incastle.x) {
    
        //Snap in castle door
        x = obj_incastle.x;
    
        //Stop in the door
        ready2 = 1;
        
        //Stop moving
        hspeed = 0;
        
        //Move again after a while
        alarm[3] = 30;
    }    
    else if (x &gt; obj_incastle.x+8) {
    
        //Set up in-door state
        if (ready == 2)
            ready = 4;

        //If the object is in-door state, make him enter
        else if ((ready == 4) &amp;&amp; (x &gt; obj_incastle.x+24)) {
        
            //Snap to the castle's door
            x = obj_incastle.x+26;
            
            //Inside castle state
            ready = 5;
            
            //Stop moving
            hspeed = 0;
            
            //Begin countdown state
            event_user(15);
        }
    }
    
    //Decrement alpha
    if (ready2 == 2)
    &amp;&amp; (x &gt; obj_incastle.x)
        image_alpha -= 0.05;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animate

//When on flagpole
if (ready &lt; 2) {

    //Set climbing pose
    sprite_index = scr_mario_goal();

    //Animate
    if (vspeed &gt; 0)
        image_speed = 0.15;
    else {
    
        image_speed = 0;
        image_index = 0;
    }
}

//When not on flagpole
else {

    //When on the ground, use walking sprite.
    if (gravity = 0) { 
    
        if (hspeed == 0) {
        
            //Set idle pose
            sprite_index = scr_mario_clear();
            image_speed = 0;
            image_index = 0;
        }
        else {
        
            //Set walking pose
            sprite_index = scr_mario_walk();
            
            //Animate
            image_speed = 0.065+abs(hspeed)/7.5;
        }
    }
    
    //Otherwise
    else {
    
        //Use the jump sprite
        sprite_index = scr_mario_jump();
    
        //Use the correct image index
        image_index = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the player

//If the player is riding a yoshi
if (global.mount == 1) {

    //If the player is going down the flagpole
    if (ready &lt; 2) {
    
        //Set Yoshi palette
        pal_swap_set(spr_palette_yoshi, obj_yoshi.colour);
        
        //Draw Yoshi
        draw_sprite_ext(spr_yoshi_flag, 0, round(x)-8*sign(image_xscale), round(y)+1, image_xscale, 1, 0, c_white, image_alpha);
        
        //Reset palette
        pal_swap_reset();
        
        //Draw the player
        player_draw_yoshi(scr_mario_ride(), 0, round(x)-8*sign(image_xscale), y, image_xscale);        
    }

    //Otherwise, if the player is moving
    else {
    
        //If the player is jumping
        if (vspeed != 0) {
        
            //Set Yoshi palette
            pal_swap_set(spr_palette_yoshi, obj_yoshi.colour);
            
            //If moving up, draw yoshi jumping
            if (vspeed &lt; 0)
                draw_sprite_ext(spr_yoshi_jump, 0, round(x),round(y)+1,image_xscale,1,0,c_white,image_alpha);

            //Otherwise, draw yoshi falling
            else
                draw_sprite_ext(spr_yoshi_jump, 1, round(x),round(y)+1,image_xscale,1,0,c_white,image_alpha);        
                
            //Reset palette
            pal_swap_reset();
            
            //Draw the player
            player_draw_yoshi(scr_mario_ride(), 0, x, y+obj_yoshi.myy, image_xscale);
        }
        
        //Otherwise, if the player is not jumping
        else {
        
            //If the player is not moving horizontally
            if (hspeed == 0) {
                
                //Draw the player first
                player_draw_yoshi(scr_mario_clear(), 0, x, y-9+obj_yoshi.myy, image_xscale);               
                
                //Set Yoshi palette
                pal_swap_set(spr_palette_yoshi, obj_yoshi.colour);
                
                //Draw Yoshi
                if (obj_yoshi.mouthholder != noone)
                    draw_sprite_ext(spr_yoshi_warp, 1, round(x),round(y)+1,image_xscale,1,0,c_white,image_alpha);
                else
                    draw_sprite_ext(spr_yoshi_warp, 0, round(x),round(y)+1,image_xscale,1,0,c_white,image_alpha);
                    
                //Reset palette
                pal_swap_reset();       
            }
        
            //Otherwise, if the player is moving horizontally
            else {
        
                //Set Yoshi palette
                pal_swap_set(spr_palette_yoshi, obj_yoshi.colour);
                
                //Draw Yoshi
                draw_sprite_ext(spr_yoshi, anim, round(x), round(y)+1, image_xscale, 1, 0, c_white, image_alpha);
                    
                //Reset palette
                pal_swap_reset();
                
                //Draw the player
                if (x &lt; obj_incastle.x)
                    player_draw_yoshi(scr_mario_ride(), 0, x, y+obj_yoshi.myy, image_xscale);
                else
                    player_draw_yoshi(scr_mario_ride(), 1, x, y-3+obj_yoshi.myy, image_xscale);
            }
        }
    }
}

//Otherwise, draw normally
else
    draw_sprite_ext(sprite_index,-1,round(x),round(y)+1,image_xscale,1,0,c_white,image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
