<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_wiggler</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_deactenemyparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wiggler

//How vulnerable is this enemy to various items?
vulnerable = 2;

//How vulnerable is this enemy to the player?
stomp = 4;

//How vulnerable is this enemy to yoshi?
edible = 2;

//Facing direction
xscale = 1;

//Whether the object is swimming
swimming = false;

//Animate
image_speed = 0.125;

//Start moving
alarm[10] = 2;

//Not angry
state = 0

//Colour
color = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wiggler's body

//Body parts count
seg = 5;

//Create anatomy
for (var b = 1; b &lt; seg; b++) {

    mybody[b] = instance_create(xstart, ystart, obj_wiggler_body);
    mybody[b].image_speed = 0.125;
    mybody[b].image_index = b;
    mybody[b].depth = 0+b;
    mybody[b].parent = id;
    if (b = 1)
        mybody[b].prevsegment = other.id; //Snap to the head.
    else
        mybody[b].prevsegment = mybody[b]-1 //Snap to other consecutive parts. 
}

//Make body structure
closeness = 16;
amount_previous = 85;

//Make body coodirnate queue
for (i=1; i&lt;amount_previous; i++;) {

    oldx[i] = x;
    oldy[i] = y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy body parts

for (i=1; i &lt; seg; i++)
    with (mybody[i]) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start moving

if (!outside_view()) {

    //Check if moving
    moving = 1;
    
    //Set the body horizontal scale
    for (i=0; i&lt;4; i++) {
    
        with (mybody[i]) {
        
            if (!instance_exists(obj_playerparent))
            || (obj_playerparent.x &lt; x)
                xscale = -1;
            else
                xscale = 1;
        }
    }
        
    //Inherit event
    event_inherited();
    
    //Turn around
    event_user(15);
}
else
    alarm[10] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cycle between colours

if (state == 1) {

    alarm[1] = 2;
    color++;
    if (color &gt; 8)
        color = 0;
}
else
    color = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move towards the player

//If the player does exist
if (instance_exists(obj_playerparent)) {

    //If the player is at the left and the wiggler is moving right
    if ((obj_playerparent.x &lt; x) &amp;&amp; (hspeed &gt; 0))  {
    
        hspeed = -1;
        alarm[0] = 40;
    }
    
    //Otherwise, if the player is at the right and the wiggler is moving left
    else if ((obj_playerparent.x &gt; x) &amp;&amp; (hspeed &lt; 0)) {
    
        hspeed = 1;
        alarm[0] = 40;
    }
    
    //Otherwise, repeat
    else
        alarm[0] = 40;
}
else
    alarm[0] = 1;
    
//Change anaimation speed
image_speed = 0.27;

//Restart speed
speed = 1;

//Change state
state = 2;

//Set the parts animation
for (i=1; i &lt; seg; i++) 
    mybody[i].image_speed = 0.27;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wiggler body logic

//Activate
for (i=1; i &lt; seg; i++) {

    if (!instance_exists(mybody[i]))
        instance_activate_object(mybody[i]);
}

//If it freezes
if (speed == 0)
    exit;

//Set the body position
for (i=1; i &lt; seg; i++) {

    mybody[i].x = oldx[i*closeness];
    mybody[i].y = oldy[i*closeness];
}

//Record coodirnates for body parts to follow
oldx[0] = x;
oldy[0] = y;
for (i = amount_previous; i &gt; 0; i--) {

    oldx[i] = oldx[i-0.001];
    oldy[i] = oldy[i-0.001];
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wiggler logic

//Inherit event
event_inherited();

//Turn at ledges
event_user(6);

//Set the facing direction
if (hspeed &gt; 0)
    xscale = 1;
else if (hspeed &lt; 0)
    xscale = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turn at ledges script

if (gravity == 0) {

    //If moving left
    if (hspeed &lt; 0) {
    
        //If there's no ground on the way, turn around
        if (!collision_rectangle(bbox_left+3, bbox_bottom-1, bbox_left+3, bbox_bottom+12, obj_semisolid, 0, 0))
        &amp;&amp; (!collision_rectangle(bbox_left+3, bbox_bottom-1, bbox_left+3, bbox_bottom+12, obj_slopeparent, 0, 0)) {
        
            //Reverse horizontal direction
            hspeed = -hspeed;
            x = xprevious;
            
            //If angry, delay turn
            if (state == 1)
                alarm[1] = 40;
        }
    }
    
    //Otherwise, if moving right
    else if (hspeed &gt; 0) {
    
        //If there's no ground on the way, turn around
        if (!collision_rectangle(bbox_right-3, bbox_bottom-1, bbox_right-3, bbox_bottom+12, obj_semisolid, 0, 0))
        &amp;&amp; (!collision_rectangle(bbox_right-3, bbox_bottom-1, bbox_right-3, bbox_bottom+12, obj_slopeparent, 0, 0)) {
        
            //Reverse horizontal direction
            hspeed = -hspeed;
            x = xprevious;
            
            //If angry, delay turn
            if (state == 1)
                alarm[1] = 40;        
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Special turn at enemies script

//If moving right
if (hspeed &gt; 0) {

    //Check for a enemy object
    if (collision_rectangle(bbox_right,bbox_top,bbox_right+hspeed*2,bbox_bottom,obj_enemyparent,0,1))
    &amp;&amp; (!collision_rectangle(bbox_right,bbox_top,bbox_right+hspeed*2,bbox_bottom,obj_wiggler_body,0,1))
        hspeed = -hspeed;
}

//Otherwise, if moving left
else if (hspeed &lt; 0) {

    //Check for a enemy object
    if (collision_rectangle(bbox_left-hspeed*2,bbox_top,bbox_left,bbox_bottom,obj_enemyparent,0,1))
    &amp;&amp; (!collision_rectangle(bbox_left-hspeed*2,bbox_top,bbox_left,bbox_bottom,obj_wiggler_body,0,1))
        hspeed = -hspeed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wiggler stomp

//If wiggler is not angry
if (state == 0) {

    //Get points based on combo
    if (obj_playerparent.hitcombo &lt;= 6) //If the player did 6 or less consecutive stomps
        with (instance_create((bbox_left+bbox_right)/2-8, y, obj_score)) event_user(2+obj_playerparent.hitcombo);
    else
        with (instance_create((bbox_left+bbox_right)/2-8, y, obj_score)) event_user(9);
    
    //Increment combo
    obj_playerparent.hitcombo++;
    
    //Kill flower
    with (instance_create(x, y, obj_enemy_dead)) {
    
        sprite_index = spr_wiggler_flower;
        image_xscale = other.xscale;
        nospin = 1;
    }
        
    //Stop movement
    speed = 0;
    
    //Stunned state
    state = 1;
    
    //New length for body parts
    closeness = 8;
    
    //Sprite
    sprite_index = spr_wiggler_mad;
    
    //Stop animation
    image_speed = 0;
    
    //Update length and sprite
    for (i = 1; i &lt; seg; i++)  {
    
        mybody[i].x = oldx[i*closeness];
        mybody[i].y = oldy[i*closeness];
        mybody[i].image_speed = 0;
        mybody[i].sprite_index = spr_wiggler_mad_body;
    }
    
    //Reset coodirnate values
    amount_previous = 85;
    
    //Cycle between palettes
    alarm[1] = 1;
    
    //Go after the player
    alarm[0] = 65;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wiggler kill

//Create dead object.
imdead = instance_create(x,y,obj_enemy_dead);

//Set the sprite
imdead.sprite_index = sprite_index;

//Set the facing direction
imdead.image_xscale = xscale;

//Set a waving movement
imdead.hspeed = 0.5;
imdead.alarm[0] = 4;

//Set the vertical speed
imdead.vspeed = -6;

//Dead followers.
multidead = instance_create(x,y,obj_enemy_multidead);
with (multidead) {

    //Set the enemy parts.
    count = 4;
    
    //Set the xscale
    xscale = other.xscale;
    
    //Set the sprite
    if (other.sprite_index == spr_wiggler)
        sprite_index = spr_wiggler_body;
    else
        sprite_index = spr_wiggler_mad_body;
}

//Destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw wiggler head

//If transforming, apply palette
if (state == 1) {

    pal_swap_set(spr_palette_wiggler, color);
}

//Draw wiggler
draw_sprite_ext(sprite_index, -1, round(x), y-1, xscale, 1, 0, c_white, 1);

//If transforming, end palette
if (state == 1)
    pal_swap_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
