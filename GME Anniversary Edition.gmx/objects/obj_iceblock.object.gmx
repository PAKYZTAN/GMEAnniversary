<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_iceblock</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_bluebrick_th</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///A frozen enemy

//Blink
alarm[0] = 1080;

//Destroy
alarm[1] = 1200;

//Sparkle
alarm[2] = 1;

//Whether the block was kicked
ready = 0;

//Combo
hitcombo = 0;

//Inherit create event
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Leave a trail

with (instance_create(bbox_left+random(sprite_width),bbox_top+random(sprite_height),obj_smoke)) {

    sprite_index = spr_icespark;
    image_speed = 0.1;
}
alarm[2] = 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy

instance_create(bbox_left+bbox_right/2-8,bbox_top+bbox_bottom/2-8,obj_smoke);
instance_destroy();
exit;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Blink

image_alpha = !image_alpha
alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Held item logic when held

//If the item is being held
if (held) {
    
    //Disable underwater movement
    swimming = false;
    
    //If the player does exist
    if (instance_exists(obj_playerparent)) {
    
        //If the player control is not disabled
        if (obj_playerparent.disablecontrol == false) {
        
            //If the player is turning
            if (obj_playerparent.turning) {
            
                //Set up the depth
                depth = -6;
                
                //Snap into player's 'x' position
                x = obj_playerparent.x;
            }
            
            //Otherwise...
            else {
            
                //Set up the depth
                depth = -4;
                
                //Snap into the player's 'x' position
                if (dir == 1)
                    x = obj_playerparent.bbox_right+(sprite_width/2);
                else
                    x = obj_playerparent.bbox_left-sprite_width+(sprite_width/2);
            }
            
            //Make the player hold the item
            if (keyboard_check(global.controlkey))
                obj_playerparent.holding = 2;
                
            //Otherwise, release it
            else {
            
                //Make the player release the item
                with (obj_playerparent) {
                
                    //Set the kicking pose
                    event_user(4);
                    
                    //Do not hold
                    holding = 0;
                }
                
                //Stop being held
                held = 0;
                
                //Reset depth
                depth = -2;
                
                //Kick the item
                event_user(2);
            }
            
            //Set the direction
            dir = obj_playerparent.xscale;
            
            //Snap into the player's y position
            if (obj_playerparent.crouch)
                y = obj_playerparent.y;
            else {
            
                if (obj_playerparent.mask_index != spr_bigmask)
                    y = obj_playerparent.y;
                else
                    y = obj_playerparent.y-4;
            }
        }
        else {
                    
            //Make the player release the item
            with (obj_playerparent) {
            
                //Set the kicking pose
                event_user(4);
                
                //Do not hold
                holding = 0;
            }
            
            //Stop being held
            held = 0;
            
            //Reset depth
            depth = -2;
            
            //Kick the item
            event_user(2);            
        }
        
        //Make it visible
        visible = true;
    }
    
    //Otherwise, follow other items
    else {
    
        //Check what object is holding first
        event_user(15);
        
        //Then check if it exists
        if (instance_exists(follow)) {
            
            //Set the position of the item.
            x = follow.x;
            y = follow.y;
            
            //Make it invisible.
            visible = 0;
            
            //Make said object hold the item
            follow.holding = 1;
            
            //Set up the item's sprite
            follow.myitem = sprite_index;
            
            //Set up the item's frame.
            follow.myframe = image_index;            
        }
    }
}

//Inherit default event
if (!held) {

    event_inherited();
    if (ready)
        image_alpha = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_iceblock">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy if possible
    
//If the brick is held
if (other.held == 1) {

    //Play 'Kick' sound
    audio_play_sound(snd_kick, 0, false);

    //Kill enemy
    event_user(0);    
    
    //Get 1000 points
    with (instance_create(x-8,y,obj_score)) event_user(5);
    
    //Create 'Spinthump' effect
    with (instance_create(round(bbox_left+bbox_right)/2,round(bbox_top+bbox_bottom)/2-8,obj_smoke)) sprite_index = spr_spinthump;
    
    //Destroy brick
    with (other) event_user(0);
}

//Otherwise
else if ((other.held == 0) &amp;&amp; (other.ready == 1)) {
    
    //Kill the enemy
    event_user(0);
    
    //Get points based on combo
    if (other.hitcombo == 0) { //200 points
    
        audio_play_sound(snd_kick2, 0, false);
        with (instance_create(round(bbox_left+bbox_right)/2-8,y,obj_score))
            event_user(2);
    }
    else if (other.hitcombo == 1) { //400 points
    
        audio_play_sound(snd_kick3, 0, false);
        with (instance_create(round(bbox_left+bbox_right)/2-8,y,obj_score))
            event_user(3);
    }
    else if (other.hitcombo == 2) { //800 points
    
        audio_play_sound(snd_kick4, 0, false);
        with (instance_create(round(bbox_left+bbox_right)/2-8,y,obj_score))
            event_user(4);
    }
    else if (other.hitcombo == 3) { //1000 points
    
        audio_play_sound(snd_kick5, 0, false);
        with (instance_create(round(bbox_left+bbox_right)/2-8,y,obj_score))
            event_user(5);
    }
    else if (other.hitcombo == 4) { //2000 points
    
        audio_play_sound(snd_kick6, 0, false);
        with (instance_create(round(bbox_left+bbox_right)/2-8,y,obj_score))
            event_user(6);
    }
    else if (other.hitcombo == 5) { //4000 points
    
        audio_play_sound(snd_kick7, 0, false);
        with (instance_create(round(bbox_left+bbox_right)/2-8,y,obj_score))
            event_user(7);
    }
    else if (other.hitcombo == 6) { //8000 points
    
        audio_play_sound(snd_kick8, 0, false);
        with (instance_create(round(bbox_left+bbox_right)/2-8,y,obj_score))
            event_user(8);
    }
    else if (other.hitcombo &gt; 6) { //1-UP

        audio_play_sound(snd_kick8, 0, false);
        with (instance_create(round(bbox_left+bbox_right)/2-8,y,obj_score))
            event_user(9);
    }
    
    //Create 'Spinthump' effect
    with (instance_create(round(bbox_left+bbox_right)/2,round(bbox_top+bbox_bottom)/2-8,obj_smoke)) sprite_index = spr_spinthump;
    
    //Increment hitcombo
    other.hitcombo++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bluebrick_th">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ignore throwable bricks

exit;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_playerparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the player interact with the item

//If the item was not kicked yet
if (!ready) {

    //If the item is not being held
    if (canhold())
    &amp;&amp; (!inwall)
    &amp;&amp; (other.bbox_bottom &gt; bbox_top) {
        
        //Make the player hold it
        other.holding = 2;
        
        //Hold
        held = 1;
        
        //Stop movement
        speed = 0;
        gravity = 0;
        
        //Set the held direction
        dir = other.xscale;
    } 
    
    //Otherwise, if the item is not moving up
    else if ((vspeed &gt;= 0) &amp;&amp; (!held)) {
    
        //Play 'Kick' sound
        audio_play_sound(snd_kick, 0, false);
                
        //Make the player visually kick the item
        with (obj_playerparent) {
        
            if (holding == 0)
                event_user(4);
        }
        
        //Make it visible
        image_alpha = 1;
        
        //Disable alarms
        alarm[0] = -1;
        alarm[1] = -1;
        
        //Kick it
        ready = 1;
        
        //Create thump
        with (instance_create(x,y,obj_smoke)) sprite_index = spr_spinthump;
        
        //Set the horizontal speed
        if (obj_playerparent.x &lt; x)
            hspeed = 2.7;
        else
            hspeed = -2.7;
    }   
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Select a appropiate ice sprite

//If the sprite if greater than 16x16, set a 32x32 block
if (bbox_bottom-bbox_top &gt; 18)
&amp;&amp; (bbox_right-bbox_left &gt; 18)
    sprite_index = spr_iceblock_32x32;
    
//Otherwise, if the sprite height is greater than 16 pixels, set a 16x32 block
else if (bbox_bottom-bbox_top &gt; 18)
    sprite_index = spr_iceblock_16x32;
    
//Otherwise, if the sprite width is greater than 16 pixels, set a 32x16 block
else if (bbox_right-bbox_left &gt; 18)
    sprite_index = spr_iceblock_32x16;
    
//Otherwise, set a normal block
else {

    sprite_index = spr_iceblock;
}
    
//Prevent frozen enemies from spawning inside solids
if (!collision_rectangle(bbox_right,bbox_top,bbox_right,bbox_bottom,obj_solid,1,0)) {

    while (collision_rectangle(bbox_left,bbox_top,bbox_left,bbox_bottom,obj_solid,1,0))
        x++;
}
else if (!collision_rectangle(bbox_left,bbox_top,bbox_left,bbox_bottom,obj_solid,1,0)) {

    while (collision_rectangle(bbox_right,bbox_top,bbox_right,bbox_bottom,obj_solid,1,0))
        x--;
}
else if (!collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom,obj_solid,1,0)) {

    while (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_solid,1,0))
        y++;
}
else if (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_solid,1,0)) {

    while (collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom,obj_solid,1,0))
        y--;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Custom wall script

//If the ice block has been kicked
if (ready) {
    
    //If moving and there's a wall on the way
    if ((hspeed &lt; 0) &amp;&amp; (collision_rectangle(bbox_left-1+hspeed,bbox_top,bbox_left,bbox_bottom-8,obj_solid,1,0)))
    || ((hspeed &gt; 0) &amp;&amp; (collision_rectangle(bbox_right,bbox_top,bbox_right+1+hspeed,bbox_bottom-8,obj_solid,1,0)))
        event_user(0);
}
else
    event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy

//Play 'Kick' sound
audio_play_sound(snd_kick, 0, false);

//Create sparks
repeat(32) {

    with (instance_create(bbox_left+sprite_width/2-4,bbox_top+sprite_height/2-4,obj_smoke)) {
    
        //Sprite
        sprite_index = spr_icespark;
        
        //Animate
        image_speed = 0.1;
        
        //Motion
        motion_set(random(360), random(1));
    }
}

//Destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
