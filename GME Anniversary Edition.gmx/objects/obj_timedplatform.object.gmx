<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_timedplatform</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>obj_platformparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Timed platform

/*
//  This item uses creation code.
//
//  time = Time the platform will move before falling. (In seconds)
*/

//Default values
time = 4;

//Remember the given time
prevtime = -1;

//Whether the platform is moving
ready = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Decrement timer and make the object fall when timer hits 0

if (time == 1) {

    //End timer
    time = 0;
    
    //Start falling
    gravity = 0.15;
}
else {

    //Play 'Move' sound
    audio_play_sound(snd_move, 0, false);
    
    //Decrement timer
    time -= 1;
        
    //Repeat the process 
    alarm[0] = 60;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stone block logic

//If the player is on this moving platform
if ((collision_rectangle(bbox_left,bbox_top-5,bbox_right,bbox_top+4,obj_playerparent,0,0))
&amp;&amp; (obj_playerparent.bbox_bottom &lt; yprevious+5)
&amp;&amp; (obj_playerparent.state &lt; 2)) {

    //If the platform is not falling
    if (ready == 0) {
    
        //Remember time given
        prevtime = time;
        
        //Fall
        ready = 1;
        
        //Decrement timer
        alarm[0] = 60;
        
        //Set movement
        if (place_meeting(x,y,obj_up))
            motion_set(90,1);
        else if (place_meeting(x,y,obj_down))
            motion_set(270,1);
        else if (place_meeting(x,y,obj_left))
            motion_set(180,1);
        else
            motion_set(0,1);
    }

    //Check for a moving platform
    var check = collision_rectangle(obj_playerparent.bbox_left,obj_playerparent.bbox_bottom-1,obj_playerparent.bbox_right,obj_playerparent.bbox_bottom+1,obj_semisolid,0,1);
    if (check)
    || (collision_rectangle(obj_playerparent.bbox_left,obj_playerparent.bbox_bottom-1,obj_playerparent.bbox_right,obj_playerparent.bbox_bottom+1,obj_quicksand,0,0))
        exit;

    //Snap the player vertically
    obj_playerparent.y = ceil(bbox_top-15);

    //Move the player horizontally if there is no solid in his way
    if (x &lt; x-xprevious) &amp;&amp; (!collision_rectangle(obj_playerparent.bbox_left-1,obj_playerparent.bbox_top+4,obj_playerparent.bbox_left-1,obj_playerparent.bbox_bottom-1,obj_solid,0,0))
    || (x &gt; x-xprevious) &amp;&amp; (!collision_rectangle(obj_playerparent.bbox_right+1,obj_playerparent.bbox_top+4,obj_playerparent.bbox_right+1,obj_playerparent.bbox_bottom-1,obj_solid,0,0))
        obj_playerparent.x += x-xprevious;
}

//Cap vertical speed
if (vspeed &gt; 2.5)
    vspeed = 2.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if the platform is below the bottom boundary

if (bbox_top &gt; room_height+32) {

    //If the platform is falling, generate a new one.
    if (ready == 1)
        ready = 2;
        
    //Otherwise, if the start position of the platform is outside the view.
    else {
    
        //If the platform is outside the view
        if (xstart &lt; view_xview[0]-sprite_width)
        || (xstart &gt; view_xview[0]+view_wview[0])
        || (ystart &lt; view_yview[0]-sprite_height)
        || (ystart &gt; view_yview[0]+view_hview[0]) {
        
            //Create a new platform
            with (instance_create(xstart,ystart,obj_timedplatform)) {
            
                //Hereby the time from the old platform
                time = other.prevtime;
            }
            
            //Destroy this platform
            instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the platform

//Draw the timer
if (time &gt; 0) {

    //Set the font
    draw_set_font(global.font_interface);
    
    //Draw text
    draw_text(x+12,y+3,string(time))
}

//Draw the platform
draw_sprite_ext(sprite_index,-1,round(x),round(y),1,1,0,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
