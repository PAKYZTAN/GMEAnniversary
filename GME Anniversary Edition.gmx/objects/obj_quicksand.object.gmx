<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_quicksand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-6</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Quicksand

//Animate
image_speed = 0.15;

//Collision
mycol = instance_create(x, y+4, obj_semisolid);
with (mycol)
    image_xscale = other.sprite_width/16;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hide the semisolid

//If the player is riding a kuribo shoe
if (global.mount == 2) {

    //If the shoe is a dossun shoe
    if (global.mountcolour = 2) {
    
        mycol.x = xstart;
        mycol.y = ystart+4;
    }
    
    //Otherwise
    else {
    
        mycol.x = -1000;
        mycol.y = -1000;
    }
}
else {
    
    mycol.x = -1000;
    mycol.y = -1000;    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_playerparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the player sink when it's overlapping the sand.

if (other.yspeed &gt;= 0) 
|| (other.yspeed &lt; -2) {

    with (other) {
    
        //Stop 'P-Meter' sound
        audio_stop_sound(snd_pmeter);
                    
        //Decrement P-Meter
        flying = false;
        run = false;
        if (pmeter &gt; 0)
            pmeter--;

        //Stop vertical speed
        yspeed = 0;
        ygrav = 0;
        
        //Reset values
        event_user(15);
        
        //Make the player able to jump.
        if (keyboard_check_pressed(global.shiftkey)) 
        &amp;&amp; (!collision_rectangle(bbox_left,bbox_top-1,bbox_right,bbox_top-1,obj_solid,0,0)) {
            
            //Play the 'Jump' sound
            audio_play_sound(snd_jump, 0, false);
            
            //Set the phase.
            state = 2;
            
            //Move upwards.
            y -= 6;
            yspeed = -3;
                        
            //Allow variable jumping
            jumping = 1;
        }
        
        //Sink slowly and cap horizontal speed
        if (!collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_semisolid,0,0))
        &amp;&amp; (!collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+2,obj_slopeparent,1,0)) {
        
            //Sink slowly
            y += 0.2;
            
            //Cap horizontal speed
            if (abs(xspeed) &gt; 0.2)
                xspeed = 0.2*sign(xscale);         
        }
        
        //Set the state of the player
        if (xspeed == 0)
            state = 0;
        else
            state = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_projectileparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ignore collision with quicksand

exit;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_physicsparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make NPCs sink slowly

//If the object is affected by gravity.
if (other.gravity &gt; 0) {
    
    with (other) {
        
        //Stop vertical speed
        vspeed = 0;
        gravity = 0;
    
        //Sink slowly and stop vertical movement
        if (!collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_semisolid,0,0))
        &amp;&amp; (!collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+2,obj_slopeparent,1,0))
            y += 0.1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemyparent_held">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Kill instantly

if (other.gravity &gt; 0) {

    with (other) {
    
        //Create dead object
        imdead = instance_create(x,y,obj_enemy_dead);
        
        //Make the dead object hereby the sprite
        imdead.sprite_index = sprite_index;
        
        //Make the dead object hereby the frame
        imdead.image_index = image_index;
        
        //Make the dead object hereby the scale
        imdead.image_xscale = dir;
        
        //Do NOT apply vertical speed
        imdead.hspeed = 0;
        imdead.vspeed = 0;
        
        //Destroy
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemyparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Kill instantly

if (other.gravity &gt; 0) {

    with (other) {
    
        //Create dead object
        imdead = instance_create(x,y,obj_enemy_dead);
        
        //Make the dead object hereby the sprite
        imdead.sprite_index = sprite_index;
        
        //Make the dead object hereby the frame
        imdead.image_index = image_index;
        
        //Make the dead object hereby the scale
        imdead.image_xscale = xscale;
        
        //Do NOT apply vertical speed
        imdead.hspeed = 0;
        imdead.vspeed = 0;
        
        //Destroy
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_parcarry">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ignore collision with quicksand

exit;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the quicksand

draw_sprite_tiled_area_ext(spr_quicksand, -1, x, y, x, y, x+sprite_width-1, y+15, c_white, 1);
if (sprite_height &gt; 16) {

    draw_sprite_tiled_area_ext(spr_quicksandb, -1, x, y+16, x, y+16, x+sprite_width-1, y+sprite_height-1, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
