<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_fireflower</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_physicsparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The parent object for all powerups

//Inherit the parent event
event_inherited();

//Animate
image_speed = 0.15;

//Sequence to display
//0: Small to big
//1: Big to small
//2: Powerup
//3: Powerdown
//4: Transform
sequence = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Powerup logic

//Call the inherited event
event_inherited();

//Check for a water object
var water = collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_swim,0,0);

//If the object is not underwater and makes contact with water
if (water) 
&amp;&amp; (!swimming) {

    //Make the object go underwater
    swimming = true;
    
    //Stop vertical movement
    if (vspeed &gt; 0)
        vspeed = 0;
}

//Otherwise, if the object is underwater and it's not underwater, end swimming.
else if (!water) 
&amp;&amp; (swimming)
    swimming = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_playerparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get a powerup

//Get 1000 points
with (instance_create(x-8,y,obj_score)) event_user(5);

//If the player is big and there's NOT an item on reserve.
if (global.powerup == cs_big) 
&amp;&amp; (global.reserve == cs_small) { 

    //If health mode is NOT enabled, save a mushroom in the reserve box.
    if (global.healthmode == false)
        global.reserve = cs_big;
}

//Otherwise, if the player does have a powerup.
else if (global.powerup &gt; cs_big) {

    //Set the previous powerup as a reserve item if health mode is not active
    if (global.healthmode == false)
        global.reserve = global.powerup;
}

//If the player does not have the correct powerup.
if (global.powerup != sprite_get_constant(sprite_index)) {

    //Give out the correct powerup
    global.powerup = sprite_get_constant(sprite_index);
    
    //Perform animation sequence and play sound
    with (instance_create(0,0,obj_player_transform)) {
    
        sequence = other.sequence;
        if (other.sequence != 4)
            audio_play_sound(snd_powerup, 0, false);
        else
            audio_play_sound(snd_transform, 0, false);
    }
}
else {

    //Play 'Powerup' sound
    audio_play_sound(snd_powerup, 0, false);
}

//Destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
