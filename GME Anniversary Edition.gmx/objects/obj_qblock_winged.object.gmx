<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_qblock_winged</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>obj_solid</parentName>
  <maskName>spr_square</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Winged Question Block

/*
**  This item uses creation code!
**
**  sprout = Pick from below:
**      cs_coin_s
**      cs_big
**      cs_fire
**      cs_ice
**      cs_carrot
**      cs_leaf
**      cs_frog
**      cs_tanooki
**      cs_hammer
**      cs_boomerang
**      cs_super
**      cs_bomb
**      cs_shell
**      cs_bee
**      cs_lightning
**      cs_penguin
**      cs_propeller
**      cs_cat
**      cs_yoshi
**      cs_yoshi_r
**      cs_yoshi_y
**      cs_yoshi_b
**      cs_kuriboshoe
**      cs_baburushoe
**      cs_dossunshoe
**      cs_jugemushoe
**      cs_golden
**      cs_1up
**      cs_3up
**      cs_poison
**      cs_pwing
**      cs_star
**      cs_key
**      cs_pswitch
**      cs_gswitch
**      cs_trampoline
**      cs_propellerblock
**      cs_beanstalk
**      cs_billy
**
**  backnforth = Whether if the block moves back and forth
**      true = Enable
**      false = Disable
*/

//Default value
sprout = cs_coin;
backnforth = true;

//Animate
image_speed = 0.15;

//Whether the block is ready
ready = 0;

//Direction
dir = -1;

//Start moving
alarm[0] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start moving if inside the view

//If the object is outside the view
if (outside_view()) {

    alarm[0] = 1;
    exit;
}
else {

    //If the block cannot move back and forth
    if (backnforth == false) {
    
        if (!instance_exists(obj_playerparent))
        || (obj_playerparent.x &lt; x+8)
            hspeed = -1;
        else
            hspeed = 1;
    }
    else {
    
        //Allow moving back and forth
        ready = 1;
    
        //Move towards the player
        if (!instance_exists(obj_playerparent))
        || (obj_playerparent.x &lt; x+8)
            dir = -1;
        else
            dir = 1;
    }
    
    //Set the vertical speed.
    vspeed = 0.5;    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Winged block riding logic

//If the player is on this moving platform
if ((collision_rectangle(bbox_left,bbox_top-5,bbox_right,bbox_top+4,obj_playerparent,0,0))
&amp;&amp; (obj_playerparent.bbox_bottom &lt; yprevious+5)
&amp;&amp; (obj_playerparent.state &lt; 2)) {

    //Check for a moving platform
    var check = collision_rectangle(obj_playerparent.bbox_left,obj_playerparent.bbox_bottom-1,obj_playerparent.bbox_right,obj_playerparent.bbox_bottom+1,obj_semisolid,0,1);
    if (check)
        exit;

    //Snap the player vertically
    obj_playerparent.y = ceil(bbox_top-16);

    //Move the player horizontally if there is no solid in his way
    if (x &lt; x-xprevious) &amp;&amp; (!collision_rectangle(obj_playerparent.bbox_left-1,obj_playerparent.bbox_top+4,obj_playerparent.bbox_left,obj_playerparent.bbox_bottom-1,obj_solid,0,0))
    || (x &gt; x-xprevious) &amp;&amp; (!collision_rectangle(obj_playerparent.bbox_right,obj_playerparent.bbox_top+4,obj_playerparent.bbox_right+1,obj_playerparent.bbox_bottom-1,obj_solid,0,0))
        obj_playerparent.x += x-xprevious;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Winged block logic

//Check for the player
var player = collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+2,obj_playerparent,0,0);

//If the player is in position
if (player)
&amp;&amp; (player.state = 2) 
&amp;&amp; (player.yspeed &lt;= 0)
&amp;&amp; (player.bbox_top &gt; bbox_bottom+player.yspeed-1) {

    //Create a new block, give it the same item and bump it.
    with (instance_create(x,y,obj_qblock)) {
    
        //Set the sprite
        sprite_index = spr_qblock_winged;
        image_speed = 0;
        image_index = 0;
    
        //Bump it
        ready = 1;
        
        //Set the vertical speed
        vspeed = -2;
        
        //Move down
        alarm[0] = 4;
        
        //Hereby the item
        sprout = other.sprout;
        
        //Hereby block specific events
        event_user(0);
    }
    
    //Destroy
    instance_destroy();
}

//Handle block movement
event_user(0);

//Push the player when below the block
if (other.y &gt; y-11) {

    if ((hspeed &lt; 0) &amp;&amp; (collision_rectangle(bbox_left-2-hspeed,bbox_top,bbox_left,bbox_bottom-1,obj_playerparent,0,0)))
    || ((hspeed &gt; 0) &amp;&amp; (collision_rectangle(bbox_right,bbox_top,bbox_right+2+hspeed,bbox_bottom-1,obj_playerparent,0,0)))
        obj_playerparent.x += hspeed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle block movement if not static

if ((backnforth == true) &amp;&amp; (ready)) {

    //If the block is moving to the right.
    if (dir == 1) {
        
        //Cap horizontal speed.
        if (hspeed &gt; 1)
        hspeed = 1;
            
        //Change direction.
        if (x &gt; xstart+32)
            dir = -1;
    }
    
    //Otherwise, if the block is moving to the left.
    else if (dir == -1) {
    
        //Cap horizontal speed.
        if (hspeed &lt; -1)
        hspeed = -1;
            
        //Change direction.
        if (x &lt; xstart-32)    
            dir = 1;
    }
    
    //Increment / Decrement speed.
    hspeed += 0.02*sign(dir);
}

//Wave
if (y &gt; ystart)
    vspeed -= 0.025;
else if (y &lt; ystart)
    vspeed += 0.025;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
