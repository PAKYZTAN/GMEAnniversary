<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_turnip_shell</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-6</depth>
  <persistent>0</persistent>
  <parentName>obj_parcarry</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///A throwable shell

//Inherit create event
event_inherited();

//Do not animate
image_speed = 0;
image_index = 0;

//Whether this object can harm the player
harmplayer = 0;

//Create semisolid
mytop = instance_create(x,y,obj_semisolid);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inherit destroy event

//Inherit destroy event
event_inherited();

//Destroy semisolid
with (mytop) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the shell able to harm the player

harmplayer = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Finish pull

//If the puller object does exist
if (instance_exists(obj_puller)) {

    //Play 'Pickup' sound
    audio_play_sound(snd_pickup, 0, false);
    
    //Create vegetable
    with (instance_create(obj_playerparent.x,y+8,obj_turnip_out)) {
    
        sprite_index = spr_turnip_shell;
        myveggie = obj_turnip_shell;
    }
    
    //Destroy
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shell logic (Player + obj_physicsparent Physics)

//Make sure is not held
if (!held) {
    
    //Make sure the semisolid follows
    if (instance_exists(mytop)) {
        
        mytop.x = bbox_left;
        mytop.y = round(y)+2;
        
        //If the player is on this moving platform
        if (collision_rectangle(bbox_left,bbox_top-5,bbox_right,bbox_top+4,obj_playerparent,0,0))
        &amp;&amp; (obj_playerparent.bbox_bottom &lt; yprevious+5)
        &amp;&amp; (obj_playerparent.state &lt; 2) {
        
            //Make the player able to pull
            if (canpull()) {

                //Force player hold
                with (obj_playerparent) {
                
                    holding = 1;
                    visible = 0;
                }
                
                //Create puller
                instance_create(other.x,other.y,obj_puller);
                
                //Finish pull
                alarm[0] = 10;
            }
        
            //Snap the player vertically
            obj_playerparent.y = ceil(bbox_top-15);
        
            //Move the player horizontally if there is no solid in his way
            if (hspeed &lt; 0) &amp;&amp; (!collision_rectangle(obj_playerparent.bbox_left-hspeed-2.5,obj_playerparent.bbox_top+4,obj_playerparent.bbox_left-hspeed,obj_playerparent.bbox_bottom-1,obj_solid,0,0))
            || (hspeed &gt; 0) &amp;&amp; (!collision_rectangle(obj_playerparent.bbox_right+hspeed,obj_playerparent.bbox_top+4,obj_playerparent.bbox_right+hspeed+2.5,obj_playerparent.bbox_bottom-1,obj_solid,0,0))
                obj_playerparent.x += hspeed;
        }
    }
    
    //Inherit event
    event_inherited();
}

//Otherwise, inherit default End Step event and make the solidtop go away
else {

    //Check if my top exists
    if (instance_exists(mytop)) {
    
        mytop.x = -1000;
        mytop.y = -1000;
    }
    
    //If the player does exist.
    if (instance_exists(obj_playerparent)) {
        
        //Force player hold
        obj_playerparent.holding = 1;
        
        //Make it visible
        visible = 1;
        
        //Snap onto the player's x position
        x = obj_playerparent.x;
        
        //Snap onto the player's y position        
        if (obj_playerparent.crouch) { //If the player is crouched down.
        
            //If the player is small.
            if (global.powerup == cs_small)
                y = obj_playerparent.y-9;
            else
                y = obj_playerparent.y-12;
        }
        
        //Otherwise, if it's not.
        else {
        
            //If the player is small.
            if (global.powerup == cs_small)
                y = obj_playerparent.y-12;
            else
                y = obj_playerparent.y-20;
        }
    }
    
    //Otherwise
    else {
            
        //Check what object is holding first
        event_user(15);
        
        //Then check if it exists
        if (instance_exists(follow)) {
            
            //Set the position of the item.
            x = follow.x;
            y = follow.y;
            
            //Make it invisible.
            visible = 0;
            
            //Make said object hold the item
            follow.holding = 1;
            
            //Set up the item's sprite
            follow.myitem = sprite_index;
            
            //Set up the item's frame.
            follow.myframe = image_index;            
        }            
    }
    
    //Destroy if the player object does not exist
    if (!instance_exists(obj_playerparent))
    &amp;&amp; (follow == noone) {
    
        instance_create(x,y,obj_smoke);
        instance_destroy();
        exit;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shell logic

//If the object is being held.
if (held) {

    //Depth
    depth = -6;

    //If the control key is being pressed and the vegetable can be thrown.
    if (keyboard_check_pressed(global.controlkey)) {
    
        //If the player does exist.
        if (instance_exists(obj_playerparent)) {
        
            //Play 'Throw' sound
            audio_play_sound(snd_throw, 0, false);
            
            //With the player
            with (obj_playerparent) {
            
                //Stop holding
                holding = 0;
                
                //Toss
                event_user(3);
            }
            
            //Check if 'Up' is pressed and throw the object upwards if so.
            if (keyboard_check(global.upkey)) {

                //Set the vertical speed
                vspeed = -6;
                gravity = 0.2;
                
                //Set the horizontal speed
                hspeed = 2.4*sign(obj_playerparent.xscale);
            }
            
            //Otherwise, if it's not.
            else {
            
                //Set the vertical speed
                vspeed = 1;
                gravity = 0.2;
                
                //Set the horizontal speed
                hspeed = 2.4*sign(obj_playerparent.xscale);
            }
            
            //Stop holding.
            held = false;
            
            //Animate
            image_speed = 0.3;
            
            //Make the shell able to harm the player after a while
            alarm[1] = 30;
        }
    }
}
else {

    //Wall collision
    event_user(3);
    
    //Floor collision
    event_user(4);
    
    //Depth
    depth = -2;

    //Check for a water object
    var water = collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_swim,0,0);
    
    //If the object is not underwater and makes contact with water
    if (water) 
    &amp;&amp; (!swimming) {
    
        //Make the object go underwater
        swimming = true;
        
        //Stop vertical movement
        gravity = 0;
        if (vspeed &gt; 0)
            vspeed = 0;
    }
    
    //Otherwise, if the object is underwater and it's not underwater, end swimming.
    else if (!water) 
    &amp;&amp; (swimming)    
        swimming = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_playerparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the shell harm the player

if (harmplayer)
&amp;&amp; (other.bbox_bottom &gt; yprevious+5)
    with (other) event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default wall collision

//If moving left
if (hspeed &lt; 0) 
&amp;&amp; (collision_rectangle(bbox_left-1,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,1,0)) {

    //If not outside view
    if (!outside_view()) {
    
        //Play 'Bump' sound
        audio_play_sound(snd_bump, 0, false);
            
        //Bump nearby blocks
        instance_create(bbox_left,y+8,obj_shellbump);
        instance_create(x,y,obj_blockbumper);
    }
    
    //Reverse speed
    hspeed = -hspeed;    
    
    //Prevent getting embed on a wall
    while (collision_rectangle(bbox_left,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,0,0))
        x++; 
}

//Otherwise, if moving right
else if (hspeed &gt; 0)
&amp;&amp; (collision_rectangle(bbox_right,bbox_top+4,bbox_right+1,bbox_bottom-1,obj_solid,1,0)) {

    //If not outside view
    if (!outside_view()) {
    
        //Play 'Bump' sound
        audio_play_sound(snd_bump, 0, false);
            
        //Bump nearby blocks
        instance_create(bbox_right,y+8,obj_shellbump);
        instance_create(x,y,obj_blockbumper);
    }
    
    //Reverse speed
    hspeed = -hspeed;
    
    //Prevent getting embed on a wall
    while (collision_rectangle(bbox_right,bbox_top+4,bbox_right,bbox_bottom-1,obj_solid,0,0))
        x--;             
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw shell

draw_sprite_ext(sprite_index,-1,round(x),round(y)+1,1,1,0,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
