<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_marker_event</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The world map manager, this is needed on the world map room. Do not forget to place it.

//World map music
mapmusic = noone;

//Do not animate
image_speed = 0;
image_index = 0;

//Animation
anim = 0;

//Level name
levelname = "";

//Level id
levelid = -1;

//Whether the player is flashing
isflashing = 0;
alarm[0] = 4;

//Whether the inventory is showing
inventory = 0;

//Set up the position of the inventory
inv_y = 0;

//Handles the item highlighted in inventory
boxselection = 0;

//Draws the player or collected Star Coins
showcase = 0;
alarm[1] = 240;

//Generate a cloud every 10 seconds
alarm[4] = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Generate a cloud

//Generate another cloud
alarm[4] = round(random(120)) + 120;

//Generate current cloud
if (choose(0,1) == 1)
    instance_create(view_xview[0]-16, view_yview[0]-16, obj_mapcloud);
else
    instance_create(view_xview[0] + view_wview[0], view_yview[0] + view_hview[0], obj_mapcloud);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop playing the world map music

audio_stop_sound(mapmusic);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Begin playing the world map music

//Check the current world
switch (global.world) {

    //World 1
    case (1): mapmusic = bgm_map1; break;
    
    //World 2
    case (2): mapmusic = bgm_map2; break;
}

//Play the correct theme based on the current world
audio_play_sound(mapmusic, 0, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change the hud to display Player or Starcoins

//Change what to showcase.
showcase = !showcase;

//Repeat the process.
alarm[1] = 240;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cycle between palettes

//Repeat
alarm[0] = 1;

//Make the player flash.
if (global.mapstar) {
    
    isflashing += 0.1;
    if (isflashing &gt; 6)
        isflashing = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle various map features

//Snap on the player's leftmost position
x = obj_mapplayer.x+8;
y = obj_mapplayer.y;

//Animate the player sprite at the top-left corner
anim += 0.07;

//If the 'Space' key is pressed...
if (keyboard_check_pressed(global.spacekey)) 

//...and the inventory is closed...
&amp;&amp; (!inventory)

//...and the player is not moving...
&amp;&amp; (obj_mapplayer.speed == 0) 

//...and the player is not ready or entering a level...
&amp;&amp; (obj_mapplayer.ready == 0)
&amp;&amp; (obj_mapplayer.letsgo == 0) {
    
    //Play 'Inventory' sound
    audio_play_sound(snd_inventory, 0, false);
    
    //Set the player state
    with (obj_mapplayer) ready = 1;
    
    //Show inventory
    inventory = 1;
    
    //Set selection
    boxselection = 1;
    if (global.inventory[0] == 0)
        boxselection = 0;
}

//Otherwise, if the inventory is opened
else if (inventory) {

    //If the 'Space' key is pressed
    if (keyboard_check_pressed(global.spacekey)) {
        
        //Play the inventory sound
        audio_play_sound(snd_inventory, 0, false);

        //Close the inventory
        inventory = 0;
        
        //Reset showcase
        showcase = 0;
        alarm[1] = 240;        
        
        //Set the player state
        obj_mapplayer.ready = 0;    
    }
    
    //Otherwise, if there is a item to select
    else if (boxselection != 0) {
    
        //If shift is pressed
        if (keyboard_check_pressed(global.shiftkey)) {
        
            //If a powerup is selected.
            if (global.inventory[boxselection] != cs_star) 
            &amp;&amp; (global.inventory[boxselection] != cs_pwing) {
            
                //If a P-Wing is active
                if (!global.pwing) {
                
                    //Play the reserve item sound
                    audio_play_sound(snd_powerup,0,0)
                    
                    //Remember previous powerup
                    var previous = global.powerup;
                
                    //Change the powerup to the selected item
                    global.powerup = global.inventory[boxselection];
                    
                    //If Mario does not have a powerup.
                    if (previous == 0) {
                        
                        //Shift the inventory items over by one
                        for (var i = boxselection; i &lt; global.inventory[0]; i++) {
                        
                            global.inventory[i] = global.inventory[i+1];
                        }
                            
                        //Subtract from the number of items in the inventory
                        global.inventory[0]--;
                    }
                    
                    //Otherwise, replace the powerup with the old powerup.
                    else {
                            
                        global.inventory[boxselection] = previous;
                    }
                    
                    //Finish item retrieval
                    event_user(0);
                }
                else {
                
                    //Deny event
                    audio_play_sound(snd_wrong, 0, false);
                }
            }
            
            //Otherwise, if a star got selected.
            else if (global.inventory[boxselection] == cs_star) {
            
                //If the star is not active
                if (!global.mapstar) {
            
                    //Play the reserve item sound
                    audio_play_sound(snd_powerup,0,0)
                                    
                    //Shift the inventory items over by one
                    for (var i = boxselection; i &lt; global.inventory[0]; i++) {
                    
                        global.inventory[i] = global.inventory[i+1];
                    }
                        
                    //Subtract from the number of items in the inventory
                    global.inventory[0]--;
                    
                    //Give Mario star power on the next level if we didn't.
                    global.mapstar = true;
                    
                    //Finish item retrieval
                    event_user(0);
                }
                else {
                
                    //Deny event
                    audio_play_sound(snd_wrong, 0, false);
                }         
            }
            
            //Otherwise, if a p-wing got selected
            else if (global.inventory[boxselection] == cs_pwing) {
            
                //If the p-wing is not active
                if (global.pwing == 0) {
            
                    //Play the reserve item sound
                    audio_play_sound(snd_powerup,0,0)
                    
                    //Change the powerup to the selected item
                    if (global.powerup != cs_leaf)
                    &amp;&amp; (global.powerup != cs_tanooki)
                        global.powerup = cs_leaf;
                                    
                    //Shift the inventory items over by one
                    for (var i = boxselection; i &lt; global.inventory[0]; i++) {
                    
                        global.inventory[i] = global.inventory[i+1];
                    }
                        
                    //Subtract from the number of items in the inventory
                    global.inventory[0]--;
                    
                    //Give Mario star power on the next level if we didn't.
                    global.pwing = 1;
                    
                    //Finish item retrieval
                    event_user(0);
                }
                else {
                
                    //Deny event
                    audio_play_sound(snd_wrong, 0, false);
                }                     
            }
        }
        
        //If the 'Left' key is pressed, move one item to the left
        else if (keyboard_check_pressed(global.leftkey)) 
        &amp;&amp; (boxselection != 0) {
        
            //If the item selected is the leftmost one, go to the last one
            if (boxselection &gt; 1) {
            
                //Play 'Move' sound
                audio_play_sound(snd_move, 0, false);
                
                //Move left
                boxselection--;
            }
                
            //Otherwise, go to the previous one
            else
                boxselection = 1;
        }
        
        //If the 'Right' key is pressed, move one item to the right
        else if (keyboard_check_pressed(global.rightkey))
        &amp;&amp; (boxselection != 0) {
            
            //If the item selection if the rightmost one, go to the first item.
            if (boxselection &lt; global.inventory[0]) {
            
                //Play 'Move' sound
                audio_play_sound(snd_move, 0, false);
                
                //Move right
                boxselection++;
            }
                
            //Otherwise, go to the next one
            else
                boxselection = global.inventory[0];
        }
    }
    
    //Show inventory
    inv_y += 4;
    if (inv_y &gt; 40)
        inv_y = 40;        
}

//Hide inventory if not showing
if (!inventory) {

    inv_y -= 4;
    if (inv_y &lt; 0)
        inv_y = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inventory retrieval script

//Delay allow movement
with (obj_mapplayer) {

    ready = 2;
    alarm[4] = 4;
}

//Show Mario
showcase = 0;
alarm[1] = 240;

//Close the inventory
inventory = 0;

//Create smoke
with (instance_create(view_xview[0]+24,view_yview[0]+8,obj_smoke))
    depth = -11;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Perform fade out and do not bring kuribo shoes

//Generate map water
instance_create(0,0,obj_mapwater);

//Fade out screen
instance_create(0,0,obj_fadeout);

//Make sure the player gets health
if (global.healthmode) {

    //If health was set to 0
    if (health == 0) {
    
        health = 2;
        if (global.powerup == cs_small)
            global.powerup = cs_big;
    }
}

//Begin playing the world map music
if (instance_exists(obj_mapplayer))
&amp;&amp; (global.died == 0)
&amp;&amp; (global.clear == 0)
    alarm[2] = 2;

//Make sure the player did not bring a kuribo shoe from a level
if (global.mount == 2)
    global.mount = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw HUD

//Draw border
draw_sprite_ext(spr_mapborder, 0, view_xview[0], view_yview[0], 1, 1, 0, c_white, 1);

//Set the font
draw_set_font(global.font_interface);

//Draw the player
if ((showcase == 0) || (inventory == 1)) {

    //Set the palette
    pal_swap_set(spr_palette_mario, isflashing);
    
    //Draw the player
    draw_sprite_ext(scr_mario_walk(), anim*2, view_xview[0]+32, view_yview[0]+16, 1, 1, 0, c_white, 1);
    
    //Reset the palette
    pal_swap_reset();
    
    //Set the colour
    draw_set_colour(c_white);
    
    //Draw lives
    draw_text(view_xview[0]+40, view_yview[0]+24, "* " + string_format(lives,2,0));
}

//Draw the total amount of Star Coins
else if (showcase == 1) {
    
    //Draw the player
    draw_sprite_ext(spr_hud_starcoin_get, 0, view_xview[0]+24, view_yview[0]+16, 1, 1, 0, c_white, 1);
    
    //Set the colour
    draw_set_colour(c_white);
    
    //Draw amount of coins collected
    draw_text(view_xview[0]+40, view_yview[0]+24, "* " + string_format(global.starcoins,3,0) + "/" + string_format(global.levelmax*3,3,0));
}

//Draw levelname
if (levelname != "") {

    //Draw the current levelname
    draw_text(view_xview[0]+120, view_yview[0]+24, string(levelname));
    
    //Draw the coins collected in the level
    if (levelid != -1) {
    
        //Draw the coin spot
        draw_sprite_ext(spr_hud_starcoin, 0, view_xview[0]+120, view_yview[0]+4, 1, 1, 0, c_white, 1);
    
        //Draw the coins
        for (var i = 0; i &lt; 3; i++) {
        
            for (var j = 0; j &lt; global.levelmax; j++) {
                
                if (ds_map_find_value(global.sc[i],levelid) &gt; 0) {
                
                    if (ds_map_find_value(global.sc[i],levelid) == 2)
                        draw_sprite_ext(spr_hud_starcoin_get, anim*1.5, view_xview[0]+120+(17*i), view_yview[0]+4, 1, 1, 0, c_white, 1);
                    else
                        draw_sprite_ext(spr_hud_starcoin_get, 0, view_xview[0]+120+(17*i), view_yview[0]+4, 1, 1, 0, c_white, 1);
                }
            }
        }
    }
}

//Draw the inventory if showing
if (inv_y &gt; 0) {

    //Draw inventory box
    draw_sprite_ext(spr_mapinventory, 0, view_xview[0]+view_wview[0]/2, view_yview[0]+view_hview[0]-inv_y, 1, 1, 0, c_white, 1);
    
    //Draw the items and the cursor
    for (var i = 1; i &lt;= global.inventory[0]; i++) {
        
        //Draw items in inventory
        draw_sprite_ext(constant_get_sprite(global.inventory[i]), 0, view_xview[0]+83+(i-1)*20, view_yview[0]+(224-inv_y), 1, 1, 0, c_white, 1);
        
        //Set the position of the box
        if (boxselection == i)
            draw_sprite_ext(spr_mapinventory_selector, anim, view_xview[0]+75+(i-1)*20, view_yview[0]+(224-inv_y), 1, 1, 0, c_white, 1);
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="123">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Open up the cheat introduction window.

/*
// WARNING: Remember to call 'global.cheats == true' on every cheat you introduce.
*/

var cheat = get_string("Please enter a cheat code. WARNING: You won't be able to save if you enter a correct cheat.", "");

//Switch between cheats
switch (cheat) {

    //needafireflower
    case ("needafireflower"): {
    
        audio_play_sound(snd_inventory, 0, false)
        global.powerup = cs_fire;
        global.cheats = true;
    } break;
    
    //needarainbow
    case ("needarainbow"): {
    
        audio_play_sound(snd_inventory, 0, false);
        global.mapstar = true;
        global.cheats = true;
    } break;

    default:
        audio_play_sound(snd_wrong, 0, false); break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
