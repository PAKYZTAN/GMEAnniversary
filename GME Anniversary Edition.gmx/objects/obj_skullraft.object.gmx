<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_skullraft</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>obj_solid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///A skull raft on lava

//Sink into lava
y += 4;

//Animate
image_speed = 0.15;

//Left raft
myleft = collision_point(x-8,y+8,obj_skullraft,0,1);

//Right raft
myright = collision_point(x+24,y+8,obj_skullraft,0,1);

//Length of raft
length = 0;

//State variable
ready = 0;

//Calculate length for leftmost skull in raft
if (myright == noone) {

    while (position_meeting(x-8-length,y+8,obj_skullraft))
        length += 16;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Skull raft riding logic

//If the player is on this moving platform
if ((collision_rectangle(bbox_left,bbox_top-5,bbox_right,bbox_top+4,obj_playerparent,0,0))
&amp;&amp; (obj_playerparent.bbox_bottom &lt; yprevious+5)
&amp;&amp; (obj_playerparent.state &lt; 2)) {

    //Check for other skull rafts
    var check = collision_rectangle(obj_playerparent.bbox_left,bbox_top-5,obj_playerparent.bbox_right,bbox_top+1,obj_skullraft,0,1);

    //If no skull rafts are around, or the other one is lower
    if (!check)
    || (((check.y &gt; y) || (check.y = y)) &amp;&amp; (check &gt; id)) {

        //Snap the player vertically
        obj_playerparent.y = ceil(bbox_top-16);
    
        //Snap the player horizontally and prevent it from getting embed on a solid.
        obj_playerparent.x += x-xprevious;
        if (collision_rectangle(obj_playerparent.bbox_right,obj_playerparent.bbox_top+4,obj_playerparent.bbox_right+1,obj_playerparent.bbox_bottom-1,obj_solid,0,0))
            with (obj_playerparent) x--;
        else if (collision_rectangle(obj_playerparent.bbox_left-1,obj_playerparent.bbox_top+4,obj_playerparent.bbox_left,obj_playerparent.bbox_bottom-1,obj_solid,0,0))
            with (obj_playerparent) x++;   
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Skull raft logic

//If this is the rightmost raft
if (myright == noone) {

    //Start the raft if the player gets on the raft
    if (ready == 0)
    &amp;&amp; (collision_rectangle(bbox_left-length,bbox_top-2,bbox_right,bbox_top+4,obj_playerparent,0,0))
        event_user(0)

    //Stop the raft when running into a solid
    else if (hspeed != 0) &amp;&amp; (gravity == 0) {
    
        //If there's a solid to the right
        if (collision_rectangle(bbox_right,bbox_top,bbox_right,bbox_bottom-8,obj_solid,0,1)) {
        
            x = collision_rectangle(bbox_right,bbox_top,bbox_right,bbox_bottom-8,obj_solid,0,1).x-16;
            event_user(1);
        }
        
        //otherwise, if there's a solid to the left
        else if (collision_rectangle(bbox_left,bbox_top,bbox_left,bbox_bottom-8,obj_solid,0,1)) {
        
            x = collision_rectangle(bbox_left,bbox_top,bbox_left,bbox_bottom-8,obj_solid,0,1).x+1;
            event_user(2);
        }
    }
}

//Ride the lava
if ((collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+4,obj_lava,1,0)) 
&amp;&amp; (!collision_rectangle(bbox_left,bbox_bottom-4,bbox_right,bbox_bottom-4,obj_lava,1,0)))
    y += 4;

//Handle lava collision
if (collision_rectangle(bbox_left,bbox_bottom-4,bbox_right,bbox_bottom-1,obj_lava,1,0)) 
&amp;&amp; (!collision_rectangle(bbox_left,bbox_bottom-8,bbox_right,bbox_bottom-8,obj_lava,1,0)) {

    //If the player is moving down onto a slope.
    if (vspeed &gt; 0) {
    
        //Stop vertical movement
        vspeed = 0;
        gravity = 0;
    }
    
    //Prevent the player from getting embed inside a slope.
    if (vspeed &gt; -0.85)
        while (collision_rectangle(bbox_left,bbox_bottom-4,bbox_right,bbox_bottom-1,obj_lava,1,0))        
            y--;
}
else
    gravity = 0.15;

//Cap fall speed
if (vspeed &gt; 2.5)
    vspeed = 2.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop moving raft parts

//Stop horizontal speed
hspeed = 0;

//Snap them
if (myleft != noone) {

    myleft.x = x+1;
    with (myleft) event_user(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop moving raft parts

//Stop horizontal speed
hspeed = 0;

//Snap them
if (myleft != noone) {

    myleft.x = x-16;
    with (myleft) event_user(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start moving raft parts

//Set the horizontal speed
if (!place_meeting(x,y,obj_left))
    hspeed = 0.5;
else
    hspeed = -0.5;

//Start moving all raft parts
ready = 1;
if (myleft != noone)
    with (myleft) event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
