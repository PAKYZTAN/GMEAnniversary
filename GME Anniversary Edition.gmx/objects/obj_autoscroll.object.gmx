<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_marker_event2</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the level scroll automatically.

/*
**  This item uses creation code!
**
**  mypath    = Path that the autoscroll object will use. Build it on the paths folder.
**  maxspd    = Maximum autoscroll speed.
**  airship   = To make the object wave up/down like if you were on a airship level.
*/

//Default variables
mypath = noone;
maxspd = 0.5;
airship = 0;

//Make the player able to die.
alarm[0] = 90;

//Handle airship offset.
alarm[1] = 1;

//Start moving.
alarm[2] = 1;

//Mode
mode = 0;

//Make mario die
candie = 1;

//Set the airship speed
airshipspeed = 0;

//Set the airship offset
airshipoffset = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start moving

//If a path does exist
if (mypath != noone)
    path_start(mypath,0.01,path_action_stop,false);

//Otherwise, move normally
else if (mode == 0)
    hspeed = 0.01;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Manage airship offset

if (airship) {

    //Set the airship offset speed.
    airshipspeed = 0.1;
    
    //Set the airship offset value.
    airshipoffset = -32;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the player able to die.

candie = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Autoscroll logic

//Update speed
if (mypath != noone) {

    path_speed += 0.01;
    if (path_speed &gt; maxspd)
        path_speed -= 0.01;
}
else {

    //If the area does not have a boss
    if (mode == 0) {
    
        hspeed += 0.01;
        if (hspeed &gt; maxspd)
            hspeed = maxspd;
    }
}

//Airship floating effect.
if (airship) {

    airshipoffset += airshipspeed;
    if (airshipoffset &gt; 0)
        airshipspeed -= 0.004;
    else
        airshipspeed += 0.004;
}

//Set wall variables
var wallleft, wallright;

//Wall collision.
if (instance_exists(obj_playerparent)) 
&amp;&amp; (obj_levelcontrol.barrier == false) {

    //Left wall collision.
    if (collision_rectangle(obj_playerparent.bbox_left-1,obj_playerparent.bbox_top+4,obj_playerparent.bbox_left,obj_playerparent.bbox_bottom-1,obj_solid,1,0))
        wallleft = 1;
    else
        wallleft = 0;
    
    //Right wall collision.
    if (collision_rectangle(obj_playerparent.bbox_right,obj_playerparent.bbox_top+4,obj_playerparent.bbox_right+1,obj_playerparent.bbox_bottom-1,obj_solid,1,0))
        wallright = 1;
    else
        wallright = 0;
        
    //Prevents the player from going outside the view.    
    if (obj_playerparent.x &lt;= view_xview[0]+5) {
    
        if (wallright) 
        &amp;&amp; (candie == true) {
        
            instance_create(obj_playerparent.x,obj_playerparent.y,obj_player_dead);
            with (obj_playerparent) instance_destroy();
            exit;
        }
        else {
        
            obj_playerparent.x = view_xview[0]+6;
            if (obj_playerparent.xspeed &lt; 0)
                obj_playerparent.xspeed = 0;
        }
    }
    if (obj_playerparent.x &gt;= view_xview[0]+view_wview[0]-5) {
    
        if (wallleft) 
        &amp;&amp; (candie == true) {
        
            instance_create(obj_playerparent.x,obj_playerparent.y,obj_player_dead);
            with (obj_playerparent) instance_destroy();
            exit;
        }
        else {
        
            obj_playerparent.x = view_xview[0]+view_wview[0]-5;
            if (obj_playerparent.xspeed &gt; 0)
                obj_playerparent.xspeed = 0;
        }
    }
    
    //Kill the player when below the view
    if (obj_playerparent.y &gt; view_yview[0]+248) 
    &amp;&amp; (candie == true) {
    
        instance_create(obj_playerparent.x,obj_playerparent.y,obj_player_dead);
        with (obj_playerparent) instance_destroy();
        exit;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
