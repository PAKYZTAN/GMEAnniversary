<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mario_big_spin</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_warpmask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The player when it's warping through a pipe

//Set up the initial sprite
sprite_index = scr_mario_spin();

//Animate it.
image_speed = 0.2;

//Set the depth
depth = 10;

//Don't stop warping yet
ready = 0;

//Give it time before he can stop
alarm[0] = 10;

//Default speed
speed = 1;

//Whether the player is being launched out of a cannon
cannon = 0;

//Set up the player top boundary.
boundary = -8;

//Is the player invincible?
isflashing = 0;
alarm[4] = 1;

//Is the player holding something?
holding = 0;

//Draw the item held
myitem = -1;
myframe = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cycle between palettes

//Make the player flash if he's under the effects of the starman.
if (instance_exists(obj_invincibility)) {

    //Make the player flash.
    isflashing += 0.1;
    if (isflashing &gt; 6)
        isflashing = 1;
    
    //Repeat the process.
    if (obj_invincibility.alarm[0] &gt; 120)
        alarm[4] = 1;
    else
        alarm[4] = 4;
}
else {

    isflashing = 0;
    alarm[4] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enable gravity

gravity = 0.25;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Launch the player out of a diagonal pipe cannon

//Play 'Explode' sound
audio_play_sound(snd_explode, 0, false);

//Create particles
repeat (16) {

    with (instance_create(x-8,y-8,obj_smoke)) {
    
        //Friction
        friction = 0.05;
        
        //Depth
        depth = 11;        
        
        //Set motion
        if (other.image_xscale == 1)
            motion_set(random_range(35,55), random(6));
        else
            motion_set(random_range(125,145), random(6));
    }
}

//Set the horizontal speed
hspeed = 4*sign(image_xscale);

//Set the vertical speed
vspeed = -4;

//Make it visible
visible = 1;

//Enable gravity
alarm[3] = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Launch the player out of a pipe cannon

//Play 'Explode' sound
audio_play_sound(snd_explode, 0, false);

//Create particles
repeat (16) {

    with (instance_create(x-8,y-8,obj_smoke)) {
    
        //Set motion
        motion_set(random_range(80,100), random(6));
        
        //Depth
        depth = 11;
        
        //Friction
        friction = 0.05;
    }
}

//Move up
vspeed = -4;

//Make it visible
visible = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the player able to exit the pipes

ready = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player pipe logic

//Update sprite to be used
if (cannon &lt; 2) { //If the player is not in diagonal cannon mode

    //If the player is moving vertically
    if (vspeed != 0) {
    
        sprite_index = scr_mario_spin();
        image_speed = 0;
        image_index = 0;
    }
        
    //Otherwise, if the player is moving horizontally
    else {
    
        //Set the animation
        image_speed = 0.2;
    
        //If the player is holding something
        if (holding)
            sprite_index = scr_mario_hold();
            
        //Otherwise
        else
            sprite_index = scr_mario_walk();
    }
}

//Otherwise, if the player is on diagonal cannon mode
else {

    //Do not animate
    image_speed = 0;
    image_index = 0;
    
    //If the player is holding something
    if (holding)
        sprite_index = scr_mario_hold();
    else
        sprite_index = scr_mario_runjump();
}

//Update boundary and facing direction
event_user(1);

//If not in cannon mode
if (cannon == 0) {
    
    //Make the player move slower/faster.
    if (collision_point(x-8,y+boundary,obj_solid,0,0))
    &amp;&amp; (collision_point(x+7,y+boundary,obj_solid,0,0))
    &amp;&amp; (collision_point(x-8,bbox_bottom,obj_solid,0,0))
    &amp;&amp; (collision_point(x+7,bbox_bottom,obj_solid,0,0)) {
    
        speed = 3;
        visible = false;
    }
    else {
    
        //Play a sound if the player is about to exit a pipe.
        if (speed == 3) {
            
            //Play 'Warp' sound
            audio_play_sound(snd_warp, 0, false);
        }
        
        //Make it visible
        visible = true;
    
        //Set the speed of the player
        if ((direction == 90) || (direction == 270))
            speed = 1;
        else
            speed = 0.5;
    }
    
    //Make the player exit the pipe.
    if (ready)
    &amp;&amp; (!collision_rectangle(x-8,y+boundary,x+7,bbox_bottom,obj_solid,0,0))
        event_user(0);
}

//If he is in diagonal cannon mode, and moving down, turn into Mario
else if ((cannon == 2) &amp;&amp; (vspeed &gt; 0))
    event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_right">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go right!

//Set the direction.
direction = 0;

//Snap to position.
move_snap(16,16);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_left">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go left!

//Set the direction.
direction = 180;

//Snap to position.
move_snap(16,16);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_down">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go down!

//If the player is on cannon mode, turn into a controllable player.
if (cannon == 1)
    event_user(0);

else {

    //Set the direction.
    direction = 270;
    
    //Snap to position.
    move_snap(16,16);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_up">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go up!

//Set the direction.
direction = 90;

//Snap to position.
move_snap(16,16);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_warpcannon_big">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Giant warp cannon

//If the player is not in cannon mode
if (cannon == 0) {

    //Enable cannon mode
    cannon = 2;
    
    //Stop moving
    speed = 0;
    
    //Set the facing direction
    image_xscale = other.direct;
    
    //Prepare to launch
    alarm[2] = 30;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_warpcannon">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Regular warp cannon

//If the player is not in cannon mode
if (cannon == 0) {

    //Enable cannon mode
    cannon = 1;
    
    //Stop moving
    speed = 0;
    
    //Prepare to launch
    alarm[1] = 16;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_warpbranch">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Warp to another room.

//With the warp object.
with (other) {

    //Value to check
    switch (mode) {
    
        //Coins
        case (0): 
            check = coins; 
            break;
        
        //Time
        case (1): 
            check = global.time; 
            break;
        
        //A-Coins
        case (2): 
            check = ds_map_size(global.acecoins); 
            break;
    }
            
    //Range A
    if ((check &gt;= target_a) &amp;&amp; (check &lt; target_b)) {
    
        //If the position needs to be changed
        if (postchange[0] != -1) {
        
            //Remember the spawn type
            global.postchange = postchange[0];
            
            //Remember the x spawn position.
            global.postx = postx[0]+16;
            
            //Remember the y spawn position.
            global.posty = posty[0]+16;                                    
        }
        
        //Go to the assigned room
        if (instance_number(obj_fadein) == 0)
            with (instance_create(0, 0, obj_fadein)) target = other.myroom[0];
    }
    
    //Range B
    else if ((check &gt;= target_b) &amp;&amp; (check &lt; target_c)) {
    
        //If the position needs to be changed
        if (postchange[1] != -1) {
        
            //Remember the spawn type
            global.postchange = postchange[1];
            
            //Remember the x spawn position.
            global.postx = postx[1]+16;
            
            //Remember the y spawn position.
            global.posty = posty[1]+16;                                    
        }
        
        //Go to the assigned room
        if (instance_number(obj_fadein) == 0)
            with (instance_create(0, 0, obj_fadein)) target = other.myroom[1];                            
    }
    
    //Range C
    else if (check &gt; target_c) {
    
        //If the position needs to be changed
        if (postchange[2] != -1) {
        
            //Remember the spawn type
            global.postchange = postchange[2];
            
            //Remember the x spawn position.
            global.postx = postx[2]+16;
            
            //Remember the y spawn position.
            global.posty = posty[2]+16;                                    
        }
        
        //Go to the assigned room
        if (instance_number(obj_fadein) == 0)
            with (instance_create(0, 0, obj_fadein)) target = other.myroom[2];                     
    }
}

//Stop
speed = 0;

//Snap in grid
move_snap(16,16);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_warproom">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Warp to another room.

//With the warp object.
with (other) {

    //If the position needs to be changed in the new room.
    if (postchange != -1) {
    
        //Remember the spawn type
        global.postchange = postchange;
        
        //Remember the x spawn position.
        global.postx = postx+16;
        
        //Remember the y spawn position.
        global.posty = posty+16;
    }
    
    //Go to the assigned room
    if (instance_number(obj_fadein) == 0)
        with (instance_create(0,0,obj_fadein)) target = other.myroom;
}

//Stop
speed = 0;

//Snap in grid
move_snap(16,16);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_warppost">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Warp to another coordinate

//Snap the camera on the new coordinates
if (instance_exists(obj_levelcontrol)) {

    //Activate barrier
    with (obj_levelcontrol) {
    
        //Manage barrier
        barrier = 1;
        
        //Deactivate barrier
        alarm[7] = 3;
    }
    
    //Set position
    obj_levelcontrol.x = other.postx+16;
    obj_levelcontrol.y = other.posty+16;
}

//Go to the new position
x = other.postx+16;
y = other.posty+16;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update boundary and facing direction

//Set the boundary
if (global.mount &gt; 0)
    boundary = -8;
else {
    
    if (global.powerup == cs_small)
        boundary = 0;
    else
        boundary = -8;
}

//Change the facing direction of the player.
if (hspeed &gt; 0)
    image_xscale = 1;
else if (hspeed &lt; 0)
    image_xscale = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create player

with (player_retrieve(x,y)) {

    //If the pipe is used as a cannon
    if (other.cannon &gt; 0) {
    
        //If the player came from a diagonal cannon
        if (other.cannon == 2) {
        
            //Set the horizontal speed
            xspeed = other.hspeed;
        }
        
        //Set the vertical speed
        yspeed = other.vspeed;
        
        //Set jump state
        state = 2;
    }
    else {
    
        //If the object was moving down, hereby vertical speed
        if (other.vspeed &gt; 0) {
        
            //Set vertical speed
            yspeed = other.vspeed;
            
            //Set jump state
            state = 2;
        }
    }
    
    //Facing direction
    xscale = other.image_xscale;
}

//Destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw player and item

//If the player is inside a kuribo shoe
if (global.mount == 2) {
    
    //Set the shader
    pal_swap_set(spr_palette_mario, isflashing);
    
    //Draw the player inside the shoe
    draw_sprite_ext(spr_mario_shoe, global.powerup, round(x), round(y)-15, image_xscale, 1, 0, c_white, 1);
    
    //Reset shader
    pal_swap_reset();
    
    //Draw the shoe on front
    draw_sprite_ext(obj_kuriboshoe.sprite_index,-1,round(x),round(y)+1,image_xscale,1,0,c_white,1);
}

//Otherwise, if the player is riding a yoshi
else if (global.mount == 1) {

    //If the player is in diagonal cannon mode
    if (cannon == 2) {

        //Set Yoshi palette
        pal_swap_set(spr_palette_yoshi, obj_yoshi.colour);
        
        //Draw Yoshi
        if (obj_yoshi.mouthholder != noone)
            draw_sprite_ext(spr_yoshi_fm_jump, -1, round(x),round(y)+1,image_xscale,1,0,c_white,1);
        else
            draw_sprite_ext(spr_yoshi_jump, -1, round(x),round(y)+1,image_xscale,1,0,c_white,1);
            
        //Reset palette
        pal_swap_reset();
        
        //Draw the player
        player_draw_yoshi(scr_mario_ride(), 1, x, y, image_xscale);
    }
    else {

        //If the player is not moving vertically
        if (obj_player_warp.vspeed == 0) {

            //Set Yoshi palette
            pal_swap_set(spr_palette_yoshi, obj_yoshi.colour);
            
            //Draw Yoshi
            if (obj_yoshi.mouthholder != noone)
                draw_sprite_ext(spr_yoshi_fm, -1, round(x),round(y)+1,image_xscale,1,0,c_white,1);
            else
                draw_sprite_ext(spr_yoshi, -1, round(x),round(y)+1,image_xscale,1,0,c_white,1);
                
            //Reset palette
            pal_swap_reset();
            
            //Draw the player
            player_draw_yoshi(scr_mario_ride(), 1, x, y-3, image_xscale);
        }
        
        //Otherwise, if the player is moving vertically
        else if (obj_player_warp.vspeed != 0) {
            
            //Draw the player first
            player_draw_yoshi(scr_mario_spin(), 0, x, y-9, image_xscale);               
            
            //Set Yoshi palette
            pal_swap_set(spr_palette_yoshi, obj_yoshi.colour);
            
            //Draw Yoshi
            if (obj_yoshi.mouthholder != noone)
                draw_sprite_ext(spr_yoshi_warp, 1, round(x),round(y)+1,image_xscale,1,0,c_white,1);
            else
                draw_sprite_ext(spr_yoshi_warp, 0, round(x),round(y)+1,image_xscale,1,0,c_white,1);
                
            //Reset palette
            pal_swap_reset();       
        }
    }
}

//Otherwise, draw it normally
else {

    //Draw the item behind the player if moving horizontally
    if ((holding &gt; 0) &amp;&amp; (vspeed == 0)) {
    
        //If the player is small
        if (global.powerup == cs_small) {
        
            if (sprite_get_xoffset(myitem) == sprite_get_width(myitem)/2)
                draw_sprite_ext(myitem,myframe,round(x)+(10*image_xscale),round(y),1,1,0,c_white,1);
            else
                draw_sprite_ext(myitem,myframe,round(x)-8+(10*image_xscale),round(y),1,1,0,c_white,1);
        }
        
        //Otherwise, if the player is not small
        else {
            
            if (sprite_get_xoffset(myitem) == sprite_get_width(myitem)/2)
                draw_sprite_ext(myitem,myframe,round(x)+(10*image_xscale),round(y)-4,1,1,0,c_white,1);
            else
                draw_sprite_ext(myitem,myframe,round(x)-8+(10*image_xscale),round(y)-4,1,1,0,c_white,1);        
        }
    }
    
    //Set the palette
    pal_swap_set(spr_palette_mario, isflashing);
    
    //Draw the player
    draw_sprite_ext(sprite_index,-1,round(x),round(y)+1,image_xscale,1,0,c_white,image_alpha);
    
    //Reset the palette
    pal_swap_reset();
    
    //Draw the item in front of the player if moving vertically
    if ((holding &gt; 0) &amp;&amp; (vspeed != 0)) {
    
        //If the player is small
        if (global.powerup == cs_small) {
            
            if (sprite_get_xoffset(myitem) == sprite_get_width(myitem)/2)
                draw_sprite_ext(myitem,myframe,round(x),round(y),1,1,0,c_white,1);
            else
                draw_sprite_ext(myitem,myframe,round(x)-8,round(y),1,1,0,c_white,1);
        }
        
        //Otherwise, if the player is not small
        else {
            
            if (sprite_get_xoffset(myitem) == sprite_get_width(myitem)/2)
                draw_sprite_ext(myitem,myframe,round(x),round(y)-4,1,1,0,c_white,1);
            else
                draw_sprite_ext(myitem,myframe,round(x)-8,round(y)-4,1,1,0,c_white,1);    
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
