<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bossbass</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_cheepcheep</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Boss Bass (Always active)

//How vulnerable is this enemy to various items?
vulnerable = 0;

//How vulnerable is this enemy to the player?
stomp = 1;

//How vulnerable is this enemy to yoshi?
edible = 2;

//Facing direction
xscale = 1;

//Whether the cheep-cheep is jumping
jumping = 0;

//Food
fud = noone;

//Move up 4 pixels
y -= 4;

//Animate
image_speed = 0.125;

//Start moving
alarm[10] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Generate a new boss bass

with (instance_create(x,ystart,obj_enemy_tick)) sprite_index = spr_bossbass;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cheep Cheep logic

//Cap vertical speed
if (vspeed &gt; 4)
    vspeed = 4;

//If the player does exist and the cheep has not jumped yet.
if (instance_exists(obj_playerparent)) 
&amp;&amp; (jumping == 0) {

    //If the cheep has not jumped and the player is nearby.
    if (obj_playerparent.x &gt; x-32) 
    &amp;&amp; (obj_playerparent.x &lt; x+32) {
    
        //Set the jumping sprite
        sprite_index = spr_bossbass_jump;
    
        //Make it jump
        jumping = 1;
        
        //Set the vertical speed
        vspeed = -4;
        gravity = 0.2;
        
        //Set the horizontal speed.
        hspeed = 1.25*sign(xscale);
    }
}

//Otherwise, look for a nearest water surface and allow the cheep to jump.
else {

    //Find a nearby body of water
    water = collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_swim,0,0);
    
    //If there's a body of water
    if (water) 
    &amp;&amp; (water.object_index != obj_waterbubble) {
    
        //If the cheep has jumped out of the water.
        if (jumping == 1) {
        
            //If the cheep makes contact with water.
            if ((y &gt; water.y+12) &amp;&amp; (vspeed &gt; 0)) {
            
                //If the boss bass didn't ate the player, set the sprite
                if (fud == noone) then sprite_index = spr_bossbass;
            
                //Snap to position.
                y = water.y+12;
                
                //Stop vertical speed
                vspeed = 0;
                gravity = 0;
                
                //Disallow jumping
                jumping = 2;
                
                //Allow jumping.
                alarm[0] = 24;
                
                //Cap horizontal speed.
                hspeed = 2.5*sign(xscale);
            }
        }
    }
}

//Chase the player
if (jumping == 0) {

    //If the player does not exists or it's at the left
    if (!instance_exists(obj_playerparent))
    || (obj_playerparent.x &lt; x) {
    
        hspeed -= 0.1;
        if (hspeed &lt; -2.5)
            hspeed = -2.5;    
    }
    
    //Otherwise, go to the right
    else if (obj_playerparent.x &gt; x) {
    
        hspeed += 0.1;
        if (hspeed &gt; 2.5)
            hspeed = 2.5;
    }
}

//Facing direction
if (hspeed &gt; 0)
    xscale = 1;
else if (hspeed &lt; 0)
    xscale = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_playerparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision with the player

//If the player is invulnerable, exit
if (instance_exists(obj_invincibility))
exit;

//If the enemy is invulnerable to stomp or the player is invulnerable.
if (stomp != -1)
|| (other.invulnerable == -1) {

    //If the player is sliding down a slope
    if (other.sliding)
    &amp;&amp; (vulnerable &lt; 99) {

        //Get points based on combo
        if (other.hitcombo == 0) { //200 points
        
            audio_play_sound(snd_kick2, 0, false);
            with (instance_create(round(bbox_left+bbox_right)/2-8,y,obj_score))
                event_user(2);
        }
        else if (other.hitcombo == 1) { //400 points
        
            audio_play_sound(snd_kick3, 0, false);
            with (instance_create(round(bbox_left+bbox_right)/2-8,y,obj_score))
                event_user(3);
        }
        else if (other.hitcombo == 2) { //800 points
        
            audio_play_sound(snd_kick4, 0, false);
            with (instance_create(round(bbox_left+bbox_right)/2-8,y,obj_score))
                event_user(4);
        }
        else if (other.hitcombo == 3) { //1000 points
        
            audio_play_sound(snd_kick5, 0, false);
            with (instance_create(round(bbox_left+bbox_right)/2-8,y,obj_score))
                event_user(5);
        }
        else if (other.hitcombo == 4) { //2000 points
        
            audio_play_sound(snd_kick6, 0, false);
            with (instance_create(round(bbox_left+bbox_right)/2-8,y,obj_score))
                event_user(6);
        }
        else if (other.hitcombo == 5) { //4000 points
        
            audio_play_sound(snd_kick7, 0, false);
            with (instance_create(round(bbox_left+bbox_right)/2-8,y,obj_score))
                event_user(7);
        }
        else if (other.hitcombo == 6) { //8000 points
        
            audio_play_sound(snd_kick8, 0, false);
            with (instance_create(round(bbox_left+bbox_right)/2-8,y,obj_score))
                event_user(8);
        }
        else if (other.hitcombo &gt; 6) { //1-UP
        
            //If the combo is odd
            if (other.hitcombo % 2 == 1) {
        
                audio_play_sound(snd_kick8, 0, false);
                with (instance_create(round(bbox_left+bbox_right)/2-8,y,obj_score))
                    event_user(9);
            }
            
            //Otherwise, if the combo is even
            else if (other.hitcombo % 2 == 0) {
            
                audio_play_sound(snd_kick8, 0, false);
                with (instance_create(round(bbox_left+bbox_right)/2-8,y,obj_score))
                    event_user(10);        
            }
        }
    
        //Kill the enemy
        event_user(0);        
        
        //Create 'Spinthump' effect
        with (instance_create(round(bbox_left+bbox_right)/2,round(bbox_top+bbox_bottom)/2-8,obj_smoke)) sprite_index = spr_spinthump;
                
        //Increment hitcombo
        other.hitcombo++;   
    }
    
    //Otherwise, if the player is not sliding
    else {
        
        //If the player is above the enemy and moving down
        if (other.bbox_bottom &lt; bbox_top-vspeed+5) {
    
            //If the player is spin jumping
            if (stomp != 4)
            &amp;&amp; ((other.stompstyle == 1) || (global.mount &gt; 0)) {
    
                //If this enemy is not immune to spin jumps
                if (stomp == 0)
                || (stomp == 3)
                || ((stomp == 1) &amp;&amp; (global.mount &gt; 0)) {
                
                    //Create spin smoke effect
                    instance_create((bbox_left+bbox_right)/2-8,y,obj_spinsmoke);
                    
                    //Get points based on combo
                    if (other.hitcombo &lt;= 6) //If the player did 6 or less consecutive stomps
                        with (instance_create((bbox_left+bbox_right)/2-8,y,obj_score)) event_user(2+obj_playerparent.hitcombo);
                    else {
                            
                        //If the combo is odd
                        if (other.hitcombo % 2 == 1)
                            with (instance_create((bbox_left+bbox_right)/2-8,y,obj_score)) event_user(9);
                        
                        //Otherwise, if the combo is even
                        else if (other.hitcombo % 2 == 0)
                            with (instance_create((bbox_left+bbox_right)/2-8,y,obj_score)) event_user(10);        
                    }
                    
                    //Increment combo
                    other.hitcombo++;
                    
                    //Bounce against if riding or just stop
                    if (global.mount &gt; 0)
                        with (other) event_user(1);
                    else
                        other.vspeed = 0;
                        
                    //Destroy
                    instance_destroy();
                }
                
                //Otherwise, spin on spiky enemies
                else {
                
                    //Play 'Stomp' sound
                    audio_play_sound(snd_stomp, 0, false);
                    
                    //Create spin smoke
                    with (instance_create(other.x,other.bbox_bottom-8,obj_smoke)) sprite_index = spr_spinthump;
                    
                    //Bounce
                    with (other) event_user(1);
                }    
            }
    
            //Regular stomp
            else if ((stomp == 0) || (stomp == 4))
            &amp;&amp; (other.swimming == false) {
            
                //Play 'Stomp' sound
                audio_play_sound(snd_stomp, 0, false);
            
                //Prevent certain enemies from getting double stomped
                if (vspeed &lt; 0) {
                
                    y = yprevious;
                    if (other.yspeed &gt; 0)
                        other.y = other.yprevious;
                }
                
                //Bounce the player
                with (other) event_user(1);
                
                //If the enemy does give points
                if (stomp == 0) {
                
                    //Get points based on combo
                    if (other.hitcombo &lt;= 6) //If the player did 6 or less consecutive stomps
                        with (instance_create((bbox_left+bbox_right)/2-8,y,obj_score)) event_user(2+obj_playerparent.hitcombo);
                    else {
                            
                        //If the combo is odd
                        if (other.hitcombo % 2 == 1)
                            with (instance_create((bbox_left+bbox_right)/2-8,y,obj_score)) event_user(9);
                        
                        //Otherwise, if the combo is even
                        else if (other.hitcombo % 2 == 0)
                            with (instance_create((bbox_left+bbox_right)/2-8,y,obj_score)) event_user(10);        
                    }
                    
                    //Increment combo
                    other.hitcombo++;
                }
                
                //Create spin smoke
                with (instance_create(other.x,other.bbox_bottom-8,obj_smoke)) sprite_index = spr_spinthump;
                
                //Stomp the enemy
                event_user(1);                
            }
        }
    
        //Otherwise, kill
        else {
            
            //If the boss bass is jumping, eat the player
            if (jumping == 1) 
            &amp;&amp; (other.bbox_bottom &gt; bbox_top+16-vspeed) {
        
                //Eat Mario
                if (fud == noone) {
                
                    fud = instance_create(x,room_height+900,obj_player_eaten);
                    with (fud) {
                    
                        parent = other.id;
                    }
                    
                    //Set the sprite
                    sprite_index = spr_bossbass;
                    
                    //Destroy Mario
                    with (other) instance_destroy();
                }
            }
            
            //Otherwise, kill
            else        
                with (other) event_user(0);
        }
    } 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
