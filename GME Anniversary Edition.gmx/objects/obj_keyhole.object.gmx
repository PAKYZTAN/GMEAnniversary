<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_keyhole</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>9</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Unlocks the secret exit

//Animation state
ready = 0;

//Scale of the keyhole animation
scale = 0;

//Fade out the player during the animation
fade = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Return to the map

//Return to the map
if (instance_number(obj_fadein) == 0) {

    with (instance_create(0,0,obj_fadein))
        target = rm_map;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Key animation logic

//Keyhole growing
if (ready == 1) {

    scale += 0.02;
    if (scale &gt;= 1)
        ready = 2;
}

//The player fades out
else if (ready == 2) {

    fade -= 0.1;
    if (fade &lt;= 0)
        ready = 3;
}

//Keyhole shrinking
else if (ready == 3) 
&amp;&amp; (scale &gt; 0)
    scale -= 0.02;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_yoshi">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Open the secret exit

//If the animation has not started and the player brings a key
if (ready == 0)
&amp;&amp; (other.mouthholder == obj_key)
&amp;&amp; (instance_exists(obj_playerparent)) {

    //Play 'Key' sound
    audio_play_sound(snd_key, 0, false);
    
    //Remember colour
    global.mountcolour = obj_yoshi.colour;    
    
    //Begin key sequence
    event_user(0);
    
    //Save the state of the key
    kx = -1000;
    ky = -1000;
    kd = 0;
    
    //Save the state of Yoshi, and delete him
    with (obj_yoshi) {
    
        //X Position
        other.mx = round(x);
        
        //Y Position
        other.my = round(y)
        
        //Sprite
        other.ms = sprite_index
        
        //Frame
        other.mi = image_index
        
        //Facing direction
        other.md = image_xscale;
        
        //Swallow key
        mouthholder = noone;
        
        //Destroy
        instance_destroy()
    }
    
    //Destroy the player parent
    with (obj_playerparent) instance_destroy();

    //Return to the world map after the animation
    alarm[0] = 120;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_key">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Open the secret exit

//If the animation has not started and the player brings a key
if (ready == 0)
&amp;&amp; (other.held == 1)
&amp;&amp; (instance_exists(obj_playerparent)) {
    
    //Begin key sequence
    event_user(0);

    //Save the state of the key
    kx = round(other.x);
    ky = round(other.y);
    kd = other.dir;

    //Delete the key
    with (other) instance_destroy()

    //Save the state of Mario, and delete him
    with (obj_playerparent) {
    
        //X Position
        other.mx = round(x);
        
        //Y Position
        other.my = round(y);
        
        //Sprite
        other.ms = sprite_index;
        
        //Frame
        other.mi = image_index;
        
        //Facing direction
        other.md = xscale;
        
        //Destroy
        instance_destroy();
    }

    //Return to the world map after the animation
    alarm[0] = 120;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Begin key sequence

//Play 'Keyhole' sound
audio_play_sound(snd_key, 0, false);

//Start the animation
ready = 1;

//Stop music and time
with (obj_levelcontrol) {

    event_user(0);
    alarm[2] = 0;
}

//Open up the secret exit
global.clear = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw both keyhole and animation

//Draw the keyhole
if (ready &lt; 2)
    draw_sprite(spr_keyhole, 0, x, y);
    
//Otherwise, if the animation has started
if (ready != 0) {

    //Draw the animation
    draw_sprite_ext(spr_keyhole_anim, 0, x+8, y+16, scale, scale, 0, c_white, 1);
    
    //If the player was riding a yoshi
    if (global.mount == 1) {
    
        //Draw yoshi and the player during the animation
        if (ready == 1)
        || (ready == 2) {
        
            //Set palette
            pal_swap_set(spr_palette_yoshi, global.mountcolour);
            
            //Draw Yoshi
            draw_sprite_ext(ms, mi, mx, my, md, 1, 0, c_white, fade);
            
            //Reset shader
            pal_swap_reset();
            
            //Draw the player
            draw_sprite_ext(scr_mario_ride(), 0, mx, my, md, 1, 0, c_white, fade);
        }
    } 
    
    //Otherwise, draw the player normally
    else {
        
        //Draw the player and the key during the animation
        if (ready == 1)
        || (ready == 2) {
        
            draw_sprite_ext(spr_key, 0, kx+8-10, ky, kd, 1, 0, c_white, fade);
            draw_sprite_ext(ms, mi, mx, my, md, 1, 0, c_white, fade);
        }        
    }   
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
