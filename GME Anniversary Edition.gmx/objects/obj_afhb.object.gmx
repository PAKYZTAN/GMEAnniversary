<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_afhb_platform</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_platformparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Amazing Flying Hammer Bro

//Do not animate
image_speed = 0;
image_index = 0;
alarm[0] = 7;

//Angle
angle = 0;

//Whether any of the blocks was hit
ready = 0;

//Timer
mytimer = 0;

//Block offsets
loffset = 0;
roffset = 0;

//Distance
distance = 56;

//Position
myx = xstart+distance;
myy = ystart;

//Rider
rider = instance_create(x,y,obj_afhb_rider);
    with (rider) parent = other.id;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change wing frame

//Repeat the process
alarm[0] = 7

//Change image
image_index = !image_index;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Platform logic

//If the player is on this moving platform
if ((collision_rectangle(bbox_left,bbox_top-5,bbox_right,bbox_top+4,obj_playerparent,0,0))
&amp;&amp; (obj_playerparent.bbox_bottom &lt; yprevious+5)
&amp;&amp; (obj_playerparent.state &lt; 2)) {

    //Check for a moving platform or quicksand
    var check = collision_rectangle(obj_playerparent.bbox_left,obj_playerparent.bbox_bottom-1,obj_playerparent.bbox_right,obj_playerparent.bbox_bottom,obj_semisolid,0,1);
    if (check)
    || (collision_rectangle(obj_playerparent.bbox_left,obj_playerparent.bbox_bottom-1,obj_playerparent.bbox_right,obj_playerparent.bbox_bottom+1,obj_quicksand,0,0))
        exit;

    //Snap the player vertically
    obj_playerparent.y = ceil(bbox_top-15);

    //Snap the player horizontally and prevent it from getting embed on a solid.
    obj_playerparent.x += x-xprevious;
    if (collision_rectangle(obj_playerparent.bbox_right,obj_playerparent.bbox_top+4,obj_playerparent.bbox_right+1,obj_playerparent.bbox_bottom-1,obj_solid,0,0))
        with (obj_playerparent) x--;
    else if (collision_rectangle(obj_playerparent.bbox_left-1,obj_playerparent.bbox_top+4,obj_playerparent.bbox_left,obj_playerparent.bbox_bottom-1,obj_solid,0,0))
        with (obj_playerparent) x++;    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Block logic

//If none of the blocks was hit
if (ready == 0) {

    //If the player bumps the leftmost block
    if (collision_rectangle(x-15,y+19,x,y+19,obj_playerparent,0,0)) {
    
        //Set up offset for the leftmost block
        loffset = -0.2;
        
        //Mark as hit
        ready = 1;        
    }
    
    //Otherwise, if the player bumps the rightmost block
    else if (collision_rectangle(x,y+19,x+15,y+19,obj_playerparent,0,0)) {
    
        //Set up offset for the rightmost block
        roffset = -0.2;
        
        //Mark as hit
        ready = 1;
    }
}

//Otherwise, if any of the blocks got hit
else if (ready == 1) {

    //Update offset for the leftmost block
    if (loffset &lt; 0) {
    
        loffset -= 0.5;
        if (loffset &lt; -4)
            ready = 2;
    }
    
    //Otherwise, update offset for the rightmost block
    else if (roffset &lt; 0) {
    
        roffset -= 0.5;
        if (roffset &lt; -4)
            ready = 2;
    }
}

//Otherwise, if any of the blocks is moving down
else if (ready == 2) {

    //Reset position of the leftmost block
    if (loffset &gt; 0.5) {
    
        //Reset offset
        loffset = 0;
        
        //Make the platform not able to be hit
        ready = 3;        
    }
    
    //Otherwise, reset position of the rightmost block
    else if (roffset &gt; 0.5) {
    
        //Reset offset
        roffset = 0;
        
        //Make the platform not able to be hit
        ready = 3;
    }
    
    //Change offset for the leftmost block
    if (loffset &lt; 0) then loffset += 0.5;
    
    //Change offset for the rightmost block
    if (roffset &lt; 0) then roffset += 0.5;
}

//Time it
mytimer += 0.5;
angle = cos(mytimer*0.05)*(pi/2);

//Set the position of the block
x = myx-sin(angle)*distance;
y = myy+cos(angle)*distance;

//Manage player events
event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Manage player events

//Make sure the player exists
if (instance_exists(obj_playerparent)) {

    with (obj_playerparent) {
    
        //If the player is moving to the right and there's a wall on the way.
        if (xspeed &gt; 0) 
        &amp;&amp; (collision_rectangle(bbox_right,bbox_top+4,bbox_right+1,bbox_bottom-4,other.id,0,0)) {
        
            //Stop horizontal speed
            xspeed = 0;
            
            //Prevent the player from getting embed on the wall
            while (collision_rectangle(bbox_right,bbox_top+4,bbox_right,bbox_bottom-4,other.id,0,0))
            &amp;&amp; (!collision_point(x,bbox_top+4,other.id,0,0))
                x--;
        }
        
        //Otherwise, if the player is moving to the left and there's a wall on the way.
        else if (xspeed &lt; 0)
        &amp;&amp; (collision_rectangle(bbox_left-1,bbox_top+4,bbox_left,bbox_bottom-4,other.id,0,0)) {
        
            //Stop horizontal speed
            xspeed = 0;
            
            //Prevent the player from getting embed on the wall
            while (collision_rectangle(bbox_left,bbox_top+4,bbox_left,bbox_bottom-4,other.id,0,0))
            &amp;&amp; (!collision_point(x,bbox_top+4,other.id,0,0))
                x++;
        }
        
        //If the player is moving up
        if (yspeed &lt; 0) 
        &amp;&amp; (collision_rectangle(bbox_left,bbox_top-1,bbox_right,bbox_top,other.id,1,0)) {
        
            //Prevent the player from getting embed on a ceiling
            if (state &gt; 1) {
            
                while (collision_rectangle(bbox_left,bbox_top+1,bbox_right,bbox_top+1,other.id,0,0))
                    y++;
            }
            
            //Stop vertical movement
            yspeed = 0;
            
            //Play 'Bump' sound if not climbing
            if (state == 2)
                audio_play_sound(snd_bump, 0, false);
        }
    }
    
    //Make sure if the player is below the block
    if (obj_playerparent.y &gt; y-11) {
    
        //If moving down
        if (vspeed &gt; 0) {
        
            //With the player
            with (obj_playerparent) {
            
                //If the player is below the platform
                while (collision_rectangle(bbox_left,bbox_top-1+other.id.vspeed,bbox_right,bbox_top,other.id,0,0))
                    y += other.id.vspeed;
            }
        }

        //Push the player in the direction the platform moves    
        if ((x-xprevious &lt; 0) &amp;&amp; (collision_rectangle(bbox_left-2-hspeed,bbox_top+4,bbox_left-2,bbox_bottom-1,obj_playerparent,0,0)))
        || ((x-xprevious &gt; 0) &amp;&amp; (collision_rectangle(bbox_right+2,bbox_top+4,bbox_right+2+hspeed,bbox_bottom-1,obj_playerparent,0,0)))
            obj_playerparent.x += x-xprevious;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the platform

//Wings
draw_sprite_ext(sprite_index, -1, round(x), round(y), 1, 1, 0, c_white, 1);

//Left block
draw_sprite_ext(sprite_index, 2, round(x), round(y)+loffset, 1, 1, 0, c_white, 1)

//Right block
draw_sprite_ext(sprite_index, 3, round(x), round(y)+roffset, 1, 1, 0, c_white, 1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
