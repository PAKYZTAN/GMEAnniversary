<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_galoomba_parachute</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_galoomba</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Parachute Galoomba

//How vulnerable is this enemy to various items?
vulnerable = 0;

//How vulnerable is this enemy to the player?
stomp = 0;

//How vulnerable is this enemy to yoshi?
edible = 1;

//Facing direction
xscale = 1;

//Whether the object landed in the ground
ready = 0;

//Whether the object is swimming
swimming = false;

//Parachute position
para_y = 0;

//Animate
image_speed = 0.3;

//Start moving
alarm[10] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start moving

if (!instance_exists(obj_playerparent))
|| (obj_playerparent.x &lt; x)
    hspeed = random_range(0, -0.5);
else
    hspeed = random_range(0, 0.5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turn into a galoomba

instance_create(x,y,obj_galoomba)
instance_destroy();
exit;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Parachute galoomba logic

//Inherit event
event_inherited();

//Begin landing sequence
if (gravity == 0) {

    //Stop horizontal speed
    hspeed = 0;

    //Begin to lower the parachute
    if (ready == 0)
        ready = 1;
    
    //If the parachute is going down
    else if (ready == 1) {
    
        //Keep moving the parachute down
        para_y += 0.5;
        
        //If the parachute is fully behind the paragaloomba, turn into a normal galoomba
        if (para_y &gt; 16) {
                
            //Hide it
            para_y = 16;
            
            //End parachute sequence
            ready = 2;               
            
            //Turn into a galoomba
            alarm[0] = 30;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default floor collision

//When moving down
if (vspeed &gt; 0) {

    //Check for a semisolid below
    var semisolid = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+vspeed,obj_semisolid,0,0);
    
    //If the semisolid exists, snap above it.
    if (semisolid)
    &amp;&amp; (bbox_bottom &lt; semisolid.yprevious+5)
        y = semisolid.bbox_top-16;
}

//Embed the NPC into the slope to ensure correct slope physics.
if (collision_rectangle(x-1,bbox_bottom,x+1,bbox_bottom+4,obj_slopeparent,1,0)) 
&amp;&amp; (!collision_rectangle(x-1,bbox_bottom-4,x+1,bbox_bottom-4,obj_slopeparent,1,0))
&amp;&amp; (vspeed == 0) {

    //Make sure it's not in contact with a semisolid
    if (!collision_rectangle(x-1,bbox_bottom,x+1,bbox_bottom+1,obj_semisolid,0,0))
        y += 4;
}
    
//Handle slope collision
if (collision_rectangle(x-1,bbox_bottom-4,x+1,bbox_bottom,obj_slopeparent,1,0))
&amp;&amp; (!collision_rectangle(x-1,bbox_bottom-8,x+1,bbox_bottom-8,obj_slopeparent,1,0)) {

    //Stay embed on the slope.
    while collision_rectangle(x-1,bbox_bottom-4,x+1,bbox_bottom,obj_slopeparent,1,0)
        y--;
}

//Check for floor objects
if ((collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_semisolid,0,0))
&amp;&amp; (!collision_rectangle(bbox_left,bbox_bottom-4,bbox_right,bbox_bottom-4,obj_semisolid,0,0)))
|| (collision_rectangle(x-1,bbox_bottom+1,x+1,bbox_bottom+1,obj_slopeparent,1,0)) {

    //Stop vertical movement
    gravity = 0;
    if (vspeed &gt; 0)
        vspeed = 0;
}
else {
    
    //Gravity
    gravity = 0.2;
    
    //Cap vertical speed
    if (vspeed &gt; 0.5)
        vspeed = 0.5;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default enemy dead script

//Create dead object
imdead = instance_create(x,y,obj_enemy_dead);

//Make the dead object hereby the sprite
imdead.sprite_index = spr_galoomba;

//Make the dead object hereby the scale
imdead.image_xscale = xscale;

//Set the hspeed of the dead object
if (other.hspeed == 0) {

    //If the kill object is at the left of this object
    if (other.bbox_left+bbox_right/2 &lt; bbox_left+bbox_right/2)
        imdead.hspeed = 0.6;
    else if (other.bbox_left+bbox_right/2 &gt; bbox_left+bbox_right/2)
        imdead.hspeed = -0.6;
}
else {

    //If the kill object is the player, hereby player's hspeed
    if (other.object_index == obj_playerparent) {
    
        //If the player is sliding
        if (other.sliding)        
            imdead.hspeed = other.xspeed;
    }
        
    //Otherwise, set default speed
    else {
    
        if (other.hspeed &gt; 0)
            imdead.hspeed = 0.6;
        else if (other.hspeed &lt; 0)
            imdead.hspeed = -0.6;
    }
}

//Destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Parachute Galoomba

//If the galoomba is moving down
if (ready == 0)
    draw_sprite_ext(sprite_index, -1, round(x), y+1, 1, 1, 0, c_white, 1);
    
//Otherwise, draw both parachute and galoomba
else {

    //Draw the parachute
    if (ready &lt; 2) {
    
        draw_sprite_ext(spr_galoomba_parachute_land, 1, round(x), y+1+para_y, 1, 1, 0, c_white, 1);
    }
    
    //Draw the galoomba
    draw_sprite_ext(spr_galoomba_parachute_land, 0, round(x), y+1, 1, 1, 0, c_white, 1);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
