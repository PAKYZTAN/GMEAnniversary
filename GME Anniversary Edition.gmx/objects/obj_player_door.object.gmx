<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mario_big_walk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The player is warping through a door

//Get the sprite
sprite_index = scr_mario_spin();

//Animate it
image_speed = 0;
image_index = 2;

//Change Mario's depth
alarm[0] = 27;

//Whether the player is flashing
isflashing = 0;
alarm[1] = 1;

//Is the player holding something?
holding = 0;

//Draw the item held
myitem = -1;
myframe = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cycle between palettes

//Make the player flash if he's under the effects of the starman.
if (instance_exists(obj_invincibility)) {

    //Make the player flash.
    isflashing += 0.1;
    if (isflashing &gt; 6)
        isflashing = 1;
    
    //Repeat the process.
    if (obj_invincibility.alarm[0] &gt; 120)
        alarm[1] = 1;
    else
        alarm[1] = 4;
}
else {

    isflashing = 0;
    alarm[1] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up the depth

depth = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the player

//Draw the door background
if (depth == 2) then draw_sprite(spr_door_inside, 0, x-8, y);

//If the player is inside a kuribo shoe
if (global.mount == 2) {
    
    //Set the shader
    pal_swap_set(spr_palette_mario, isflashing);
    
    //Draw the player inside the shoe
    switch (global.player) {
    
        //Mario
        case (0): draw_sprite_ext(spr_mario_shoe, global.powerup, round(x), round(y)-15, image_xscale, 1, 0, c_white, 1); break;
    }
    
    //Reset shader
    pal_swap_reset();
    
    //Draw the shoe on front
    draw_sprite_ext(obj_kuriboshoe.sprite_index,-1,round(x),round(y)+1,image_xscale,1,0,c_white,1);
}

//Otherwise, if the player is riding a yoshi
else if (global.mount == 1) {

    //Set Yoshi palette
    pal_swap_set(spr_palette_yoshi, obj_yoshi.colour);
    
    //Draw Yoshi
    if (obj_yoshi.mouthholder != noone)
        draw_sprite_ext(spr_yoshi_fm, 0, round(x),round(y)+1,image_xscale,1,0,c_white,1);
    else
        draw_sprite_ext(spr_yoshi, 0, round(x),round(y)+1,image_xscale,1,0,c_white,1);
        
    //Reset palette
    pal_swap_reset();
    
    //Draw the player
    player_draw_yoshi(scr_mario_ride(), 0, x, y, image_xscale);  
}

//Otherwise, draw the player normally
else {

    //If the player is holding a item, draw it
    if (holding &gt; 0) {
    
        //If the player is small
        if (global.powerup == cs_small) {

            //If the offset of the item is at the middle
            if (sprite_get_xoffset(myitem) == sprite_get_width(myitem)/2)
                draw_sprite_ext(myitem,myframe,round(x),round(y),1,1,0,c_white,1);
            else
                draw_sprite_ext(myitem,myframe,round(x)-8,round(y),1,1,0,c_white,1);
        }
        
        //Otherwise
        else {

            //If the offset of the item is at the middle
            if (sprite_get_xoffset(myitem) == sprite_get_width(myitem)/2)
                draw_sprite_ext(myitem,myframe,round(x),round(y)-4,1,1,0,c_white,1);
            else
                draw_sprite_ext(myitem,myframe,round(x)-8,round(y)-4,1,1,0,c_white,1);       
        }
    }
    
    //Set up the palette
    pal_swap_set(spr_palette_mario, isflashing);
    
    //Draw the player
    draw_sprite_ext(sprite_index, 2, round(x), round(y)+1,1,1,0,c_white,1);
    
    //Reset the shader
    pal_swap_reset();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
