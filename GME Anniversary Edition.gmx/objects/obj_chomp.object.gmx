<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_chainchomp</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_enemyparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Chain Chomp

//How vulnerable is this enemy to various items?
vulnerable = 2;

//How vulnerable is this enemy to the player?
stomp = 2;

//How vulnerable is this enemy to yoshi?
edible = 2;

//Facing direction
xscale = 1;

//Whether the object is swimming
swimming = false;

//Find Mario
ready = 0;

//Idle
idle = 1;

//Lunge
lunge = 0;

//Retreat
retreat = 0;

//Set horizontal speed
hspeed = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the chomp retreat

//Retreat
retreat = 1;

//Do not lunge
lunge = 0

//Do not stay idle
idle = 0

//Find start position
start = instance_position(originx,originy,obj_chainchomp)
with (start) {
    taunt = false
}

//Set the turning positions
event_user(8);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set turning position.

if ((idle) || (retreat)) {

    if ((x &lt; originx) &amp;&amp; (xprevious &gt; originx))
        stop_l = originx-4-ceil(random(16));
    else if ((x &gt; originx) &amp;&amp; (xprevious &lt; originx))
        stop_r = originx+4+ceil(random(16));
}

//Animate
image_speed = 0.1+(0.2*lunge);

//Set the facing direction
if (hspeed &gt; 0)
    xscale = 1;
else if (hspeed &lt; 0)
    xscale = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Chain Chomp logic

//If the chain chomp is not lunging
if (lunge == false) {

    //Gravity
    gravity = 0.25;
    
    //Cap vertical speed
    if (vspeed &gt; 4)
        vspeed = 4
}
else {

    gravity = 0;
}

//If the chain chomp is idle
if (idle) {

    //Reverse horizontal speed.
    if (x &lt; stop_l)
        hspeed = 1
    if (x &gt; stop_r)
        hspeed = -1
    
    //If Mario does exist
    if (instance_exists(obj_playerparent)) {
    
        //If Mario is on sight
        if ((point_distance(obj_playerparent.x,obj_playerparent.y,x,y) &lt; 1.5*maxdist) &amp;&amp; (!ready)) {
        
            //Do not retreat
            retreat = 0
            
            //Lunge
            lunge = 1
            
            //Do not idle
            idle = 0
            
            //Got Mario
            ready = 1;
            
            //Set the motion
            if (obj_playerparent.x &lt; originx)
                motion_set(random(85)+90,4);
            else
                motion_set(90-random(85),4);
        }
    }
}

//If the chain chomp is lunging
if (lunge) {

    //Find start position.
    start = instance_position(originx,originy,obj_chainchomp)
    
    //If the chomp is too far from the origin.
    if (x-originx &gt; maxdist) {
    
        x = originx+maxdist
        alarm[0] = 60
        speed = 0
        with (start) {
        
            taunt = true;
        }   
    }
    else if (originx-x &gt; maxdist) {
    
        x = originx-maxdist
        alarm[0] = 60
        speed = 0
        with (start) {
        
            taunt = true;
        }   
    }
    
    //If the chomp is higher than the origin position.
    if (originy-y &gt; maxdist) {
    
        y = originy-maxdist
        alarm[0] = 60
        speed = 0
        with (start) {
        
            taunt = true;
        }   
    }
}

//If the chomp is retreating.
if (retreat) {
    
    if ((x &lt; stop_l) &amp;&amp; (hspeed &lt; 0))
    || ((x &gt; stop_r) &amp;&amp; (hspeed &gt; 0)) {
    
        //Do not lunge
        lunge = 0;
        
        //Idle
        idle = 1;
        
        //Do not retreat
        retreat = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_semisolid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Floor collision

//Deny if above the origin
if (other.y &lt; ystart)
exit;

//If there's a platform nearby and the vertical speed is greater than 0.
if ((y &lt; other.y-3) &amp;&amp; (vspeed &gt; 0)) {

    //Snap to position.
    y = other.y-8;
    
    //Stop vertical speed.
    vspeed = -1.5;
    gravity = 0;
    
    //Lunge at Mario again
    if (ready == 1)
        ready = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set the turning positions

if (originx &lt;= x) {

    hspeed = -1;
    stopleft = originx-20;
}
else if (originx &gt;= x) {

    hspeed = 1;
    stopright = originx+20;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Chain Chomp kill

//Create dead object.
imdead = instance_create(x,y,obj_enemy_dead);

//Set the sprite
imdead.sprite_index = spr_chainchomp;

//Set the facing direction
imdead.image_xscale = xscale;

//Set a waving movement
imdead.hspeed = 0.5;
imdead.alarm[0] = 4;

//Set the vertical speed
imdead.vspeed = -6;

//Dead followers.
multidead = instance_create(x,y,obj_enemy_multidead);
with (multidead) {

    //Set the enemy parts.
    count = 4;
    
    //Set the xscale
    xscale = 1;
    
    //Set the sprite
    sprite_index = spr_chainchomp_chain;
}

//Destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
